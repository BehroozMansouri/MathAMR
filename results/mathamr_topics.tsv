B.1	"(m / multi-sentence
      :snt1 (c / come-across-21
            :arg0 (ii / i)
            :arg1 (p / problem
                  :mod (t / this)))
      :snt2 (f / find-01
            :arg1 (v / value-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / 𝑐)
                        :arg0-of (c2 / contain-01
                              :polarity -
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (O1 / interval$C-C$$ :op0(O2 / minus :op0(N1 / 1)) :op1(O3 / minus :op0(O4 / divide :op0(N2 / 1) :op1(N3 / 3))))))
                        :arg2-of (r / range-01
                              :arg3 (s3 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V2 / 𝑓) :op0(V3 / 𝑥)))))
                  :condition (s4 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V4 / 𝑓) :op0(V5 / 𝑥)) :op0(O5 / divide :op0(U4 / plus :op0(O6 / SUP :op0(V6 / 𝑥) :op1(N4 / 2)) :op0(V7 / 𝑥) :op0(V8 / 𝑐)) :op1(U5 / plus :op0(O7 / SUP :op0(V9 / 𝑥) :op1(N5 / 2)) :op0(U6 / times :op0(N6 / 2) :op0(V10 / 𝑥)) :op0(V11 / 𝑐)))))
                  :time (t2 / then))))"
B.2	"(t / thing
      :manner-of (s / solve-01
            :arg1 (e / equation
                  :mod (d / differential)
                  :mod (f / form
                        :arg1-of (f2 / follow-01)
                        :mod (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / divide :op0(U2 / times :op0(V1 / 𝑑) :op0(V2 / 𝑓)) :op1(U3 / times :op0(V3 / 𝑑) :op0(V4 / 𝑥))) :op0(U4 / times :op0(V5 / 𝑓) :op0(U5 / plus :op0(V6 / 𝑥) :op0(N1 / 1)))))))))"
B.3	"(m / multi-sentence
      :snt1 (a / attempt-01
            :arg0 (ii / i)
            :arg1 (r / resolve-01
                  :arg0 ii
                  :arg1 (p / problem
                        :arg1-of (f / follow-04)
                        :consist-of (f2 / find-01
                              :arg0 ii
                              :arg1 (t / thing
                                    :arg1-of (a2 / approximate-01
                                          :arg2 (e / equal-01
                                                :arg1 (t2 / thing
                                                      :name (n / name
                                                            :op1 MATH 
 :math (O1 / root :op0(N1 / 5) :op1(N2 / 2))))))
                                    :arg1-of (c / correct-02
                                          :arg2 (e2 / equal-01
                                                :arg1 (t3 / thing
                                                      :name (n2 / name
                                                            :op1 MATH 
 :math (O2 / SUP :op0(N3 / 10) :op1(O3 / minus :op0(N4 / 10)))))
                                                :arg2 (e3 / exact))))
                              :instrument (a3 / algorithm
                                    :instrument-of (b / bisect-01))))))
      :snt2 (c2 / contrast-01
            :arg1 (o / obligate-01
                  :arg2 (p2 / place-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O4 / root :op0(N5 / 5) :op1(N6 / 2)))
                        :arg2 (f3 / function-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (V1 / 𝑥))))
                  :arg1-of (u / understand-01
                        :arg0 (ii2 / i)))
            :arg2 (s3 / sure-02
                  :polarity -
                  :arg0 ii2
                  :arg1 (t4 / thing
                        :arg2-of (g / go-02
                              :arg0 ii2
                              :arg3 (t5 / there))))))"
B.4	"(c / contrast-01
      :arg1 (h / have-03
            :arg0 (ii / i)
            :arg1 (s / sum-of
                  :op1 (s2 / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑘) :op0(N1 / 0))) :op1(V2 / 𝑛)) :op1(U2 / times :op0(T1 / \binom) :op0(V3 / 𝑛) :op0(V4 / 𝑘) :op0(V5 / 𝑘))))
                  :op2 (s3 / string-entity
                        :value MATH 
 :math (U3 / times :op0(V6 / 𝑛) :op0(O5 / SUP :op0(N2 / 2) :op1(O6 / minus :op0(V7 / 𝑛) :op1(N3 / 1)))))))
      :arg2 (k / know-01
            :arg0 ii
            :arg1 (r / result-01
                  :arg2 s))
      :arg3 (k2 / know-01
            :polarity -
            :arg0 ii
            :arg1 (t / thing
                  :manner-of (g / get-05
                        :arg1 (y / you)
                        :arg2 s))))"
B.6	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (f / find-01
                  :arg0 ii
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / times :op0(O1 / SUP :op0(N1 / 5) :op1(N2 / 133)) :op0(T1 / \mod) :op0(N3 / 8)))))
      :snt2 (n / notice-01
            :arg0 (ii2 / i)
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(O2 / SUP :op0(N4 / 5) :op1(V1 / 𝑛)) :op0(T2 / \mod) :op0(N5 / 8)) :op0(N6 / 5)))
            :condition (a / and
                  :op1 (e / even-02
                        :polarity -
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (V2 / 𝑛)))
                  :op2 (h / have-polarity-91
                        :arg2 -
                        :arg1 s3)
                  :arg0-of (l / lead-03
                        :arg1 ii2
                        :arg2 (s4 / say-01
                              :arg0 ii2
                              :arg1 (s5 / string-entity
                                    :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(O3 / SUP :op0(N7 / 5) :op1(N8 / 133)) :op0(T3 / \mod) :op0(N9 / 8)) :op0(N10 / 5)))))))
      :snt3 (c / contrast-01
            :arg2 (k / know-01
                  :polarity -
                  :arg0 ii2
                  :arg1 (t / thing
                        :manner-of (p / prove-01
                              :arg0 ii2
                              :arg1 (t2 / this))))))"
B.8	"(m / multi-sentence
      :snt1 (f / find-01
            :arg0 (ii / i)
            :arg1 (v / value-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑛) :op1(C1 / infinity))) :op1(O4 / root :op0(O5 / divide :op0(U1 / times :op0(O6 / SUP :op0(N1 / 27) :op1(V2 / 𝑛)) :op0(O7 / SUP :op0(O8 / factorial :op0(V3 / 𝑛)) :op1(N2 / 3))) :op1(O9 / factorial :op0(U2 / times :op0(N3 / 3) :op0(V4 / 𝑛)))) :op1(V5 / 𝑛)))))
            :arg1-of (t / try-01
                  :arg0 ii))
      :snt2 (a / and
            :op1 (s2 / string-entity
                  :value MATH 
 :math (U3 / eq :op0(V6 / 𝑙) :op0(O10 / limit :op0(O11 / SUB :op0(O12 / limit) :op1(F2 / → :op0(V7 / 𝑛) :op1(C2 / infinity))) :op1(O13 / SUP :op0(O14 / divide :op0(U4 / times :op0(O15 / SUP :op0(N4 / 27) :op1(V8 / 𝑛)) :op0(O16 / SUP :op0(O17 / factorial :op0(V9 / 𝑛)) :op1(N5 / 3))) :op1(O18 / factorial :op0(U5 / times :op0(N6 / 3) :op0(V10 / 𝑛)))) :op1(O19 / divide :op0(N7 / 1) :op1(V11 / 𝑛))))))
            :op2 (s3 / string-entity
                  :value MATH 
 :math (U6 / eq :op0(F3 / ln :op0(V12 / 𝑙)) :op0(O20 / limit :op0(O21 / SUB :op0(O22 / limit) :op1(F4 / → :op0(V13 / 𝑛) :op1(C3 / infinity))) :op1(U7 / times :op0(O23 / divide :op0(N8 / 1) :op1(V14 / 𝑛)) :op0(M1 / D-lsqb;&rsqb; :op0(O24 / minus :op0(U8 / plus :op0(U9 / times :op0(V15 / 𝑛) :op0(F5 / ln :op0(N9 / 27))) :op0(U10 / times :op0(N10 / 3) :op0(F6 / ln :op0(O25 / factorial :op0(V16 / 𝑛))))) :op1(F7 / ln :op0(O26 / factorial :op0(U11 / times :op0(N11 / 3) :op0(V17 / 𝑛))))))))))
            :domain (s4 / string-entity
                  :value MATH 
 :math U6 ))
      :snt3 (s5 / solve-01
            :arg0 (ii2 / i)
            :arg1 (ii3 / it)
            :arg2 (a2 / amr-unknown))
      :snt4 (h / help-01
            :mode imperative
            :polite +
            :arg0 (y / you)
            :arg1 ii2))"
B.9	"(m / multi-sentence
      :snt1 (n / need-01
            :arg0 (ii / i)
            :arg1 (w / write-01
                  :arg0 ii
                  :arg1 (s / series
                        :example (s2 / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑛) :op0(N1 / 0))) :op1(V2 / 𝑁)) :op1(U2 / times :op0(V3 / 𝑛) :op0(O5 / SUP :op0(V4 / 𝑥) :op1(V5 / 𝑛))))))
                  :manner (f / form
                        :arg0-of (ii2 / involve-01
                              :polarity -
                              :arg1 (n2 / notation
                                    :mod (s3 / summarize-01)
                                    :example (s4 / string-entity
                                          :value MATH 
 :math (U3 / eq :op0(O6 / SUB :op0(O7 / SUP :op0(O8 / SUB :op0(O9 / sum) :op1(U4 / eq :op0(V6 / 𝑖) :op0(N2 / 0))) :op1(V7 / 𝑛)) :op1(O10 / SUP :op0(V8 / 𝑖) :op1(N3 / 2))) :op0(O11 / divide :op0(U5 / times :op0(U6 / plus :op0(O12 / SUP :op0(V9 / 𝑛) :op1(N4 / 2)) :op0(V10 / 𝑛)) :op0(U7 / plus :op0(U8 / times :op0(N5 / 2) :op0(V11 / 𝑛)) :op0(N6 / 1))) :op1(N7 / 6)))))))))
      :snt2 (h / have-03
            :arg0 (a / anyone)
            :arg1 (ii3 / idea
                  :mod (a2 / any)
                  :topic (d / do-02
                        :arg0 a
                        :arg1 (t / this)))
            :polarity (a3 / amr-unknown)))"
B.10	"(m / multi-sentence
      :snt1 (f / find-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (v / value-interval
                  :op1 (v2 / variable
                        :name (n / name
                              :op1 MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(C1 / infinity)) :op1(O5 / divide :op0(F1 / sin :op0(V1 / 𝑥)) :op1(O6 / SUP :op0(V2 / 𝑥) :op1(V3 / 𝑎)))))
                        :arg1-of (ii / integrate-01
                              :mod (p / proper
                                    :polarity -)))
                  :op2 (v3 / variable
                        :name (n2 / name
                              :op1 ""a>0"")
                        :arg1-of (c / converge-01))))
      :snt2 (o / obligate-01
            :arg1 (ii2 / i)
            :arg2 (e / expand-01
                  :arg0 ii2
                  :arg1 (ii3 / integrate-01)
                  :manner (u / use-01
                        :arg0 ii2
                        :arg1 (e2 / expand-01
                              :arg1 (s / series))))
            :polarity (a / amr-unknown)))"
B.11	"(m / multi-sentence
      :snt1 (e / exemplify-01
            :arg0 (c / contrast-01
                  :arg1 (h / have-03
                        :arg1 (p / parameterize-01
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / Φ) :op0(O1 / interval$O-O$$ :op0(V2 / 𝑢) :op1(V3 / 𝑣))) :op0(O2 / interval$O-O$$ :op0(U3 / times :op0(V4 / 𝑓) :op0(V5 / 𝑢)) :op1(U4 / times :op0(V6 / 𝑔) :op0(V7 / 𝑣)))))))
                  :arg2 (n / need-01
                        :arg1 (c2 / calculate-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (O3 / SUP :op0(V8 / 𝑅) :op1(N1 / 2)))))))
      :snt2 e
      :arg0 c
      :arg1 (e2 / example
            :quant (p2 / plenty)
            :location (b / book)
            :purpose (c3 / calculate-01
                  :arg1 (s3 / string-entity
                        :value ""d""
                        :arg1-of (d / determine-01))
                  :prep-in (s4 / string-entity
                        :value MATH 
 :math (O4 / SUP :op0(V9 / 𝑅) :op1(N2 / 3)))))
      :arg2 (e3 / example
            :quant (n2 / none
                  :degree (a / at-all))
            :prep-for (c4 / case-04
                  :arg1 (s5 / string-entity
                        :value MATH 
 :math (O5 / SUP :op0(V10 / 𝑅) :op1(N3 / 2))))))"
B.12	"(m / multi-sentence
      :snt1 (a / ask-02
            :arg0 (ii / it)
            :arg1 (a2 / and
                  :op1 (f / find-01
                        :arg0 (ii2 / i)
                        :arg1 (r / root
                              :mod (a3 / all)))
                  :op2 (s / sketch-01
                        :arg0 ii2
                        :arg1 (ii3 / it)
                        :time (t / then)))
            :arg2 ii2)
      :snt2 (p / proceed-01
            :arg0 (w / we)
            :manner (a4 / amr-unknown)))"
B.13	"(m / multi-sentence
      :snt1 (s / simplify-01
            :arg1 (e / express-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U1 / plus :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(V1 / 𝑎)) :op1(V2 / 𝑏)) :op1(U2 / times :op0(V3 / 𝑓) :op0(V4 / 𝑥) :op0(F1 / d :op0(V5 / 𝑥)))) :op0(O5 / SUB :op0(O6 / SUP :op0(O7 / SUB :op0(O8 / int) :op1(U3 / times :op0(V6 / 𝑓) :op0(V7 / 𝑎))) :op1(U4 / times :op0(V8 / 𝑓) :op0(V9 / 𝑏))) :op1(U5 / times :op0(O9 / SUP :op0(V10 / 𝑓) :op1(O10 / minus :op0(N1 / 1))) :op0(V11 / 𝑥) :op0(F2 / d :op0(V12 / 𝑥)) :op0(V13 / &quest;))))))
            :manner (a / amr-unknown))
      :snt2 (c / contrast-01
            :arg1 (a2 / answer-01
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (O11 / minus :op0(U6 / times :op0(V14 / 𝑏) :op0(V15 / 𝑓) :op0(V16 / 𝑏)) :op1(U7 / times :op0(V17 / 𝑎) :op0(V18 / 𝑓) :op0(V19 / 𝑎)))))
            :arg2 (w / wonder-01
                  :arg0 (ii / i)
                  :arg1 (t / thing
                        :manner-of (g / get-01
                              :arg1 (a3 / answer-01)))
                  :polarity (a4 / amr-unknown))))"
B.14	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (e / equation
                  :mod (d / differential)
                  :mod (o / order
                        :ord (o2 / ordinal-entity
                              :value 1))
                  :mod (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V1 / 𝑦) :op0(U2 / plus :op0(U3 / times :op0(V2 / 𝑥) :op0(O1 / SUP :op0(V3 / 𝑦) :op1(V4 / ′))) :op0(U4 / times :op0(O2 / divide :op0(N1 / 1) :op1(N2 / 2)) :op0(O3 / SUP :op0(O4 / SUP :op0(V5 / 𝑦) :op1(V6 / ′) :op1(N3 / 2)))))))))
      :snt2 (p / possible-01
            :arg1 (f / find-01
                  :arg0 (s2 / someone)
                  :arg1 (w / way)
                  :arg2 (s3 / solve-01
                        :arg0 s2
                        :arg1 e
                        :arg2 (s4 / string-entity
                              :value MATH 
 :math (U5 / eq :op0(U6 / times :op0(O5 / divide :op0(N4 / 1) :op1(N5 / 2)) :op0(O6 / SUP :op0(V7 / 𝑦) :op1(V8 / ′)) :op0(U7 / plus :op0(U8 / times :op0(N6 / 2) :op0(V9 / 𝑥)) :op0(O7 / SUP :op0(V10 / 𝑦) :op1(V11 / ′)))) :op0(V12 / 𝑦))))
                  :arg1-of (c / cause-01
                        :arg0 (t / this))))
      :snt3 (a / and
            :op1 (t2 / think-01
                  :arg0 (ii2 / i)
                  :arg1 (p2 / possible-01
                        :arg1 (u / use-01
                              :arg0 ii2
                              :arg1 (s5 / string-entity
                                    :value MATH 
 :math (U9 / eq :op0(U10 / plus :op0(O8 / SUP :op0(V13 / 𝑥) :op1(N7 / 2)) :op0(V14 / 𝑦)) :op0(V15 / 𝑡)))
                              :arg2 (s6 / substitute-01))))
            :op2 (h2 / have-03
                  :arg0 ii2
                  :arg1 (s7 / string-entity
                        :value ""eqx80eqx""
                        :arg1-of (s8 / same-01
                              :arg2 (s9 / string-entity
                                    :value ""eqx80eqx""
                                    :time (p3 / previous))
                              :mod (e2 / exact)))
                  :time (d2 / derive-01
                        :arg0 ii2
                        :arg1 s7)))
      :snt4 (h3 / have-03
            :polarity -
            :arg0 (ii3 / i)
            :arg1 (ii4 / idea
                  :topic (t3 / thing
                        :manner-of (s10 / start-01)))))"
B.15	"(m / multi-sentence
      :snt1 (c / concern-02
            :arg1 (s / series
                  :example (a / and
                        :op1 (s2 / string-entity
                              :value MATH 
 :math (U1 / plus :op0(N1 / 1) :op0(U2 / times :op0(N2 / 2) :op0(V1 / 𝑥)) :op0(U3 / times :op0(N3 / 3) :op0(O1 / SUP :op0(V2 / 𝑥) :op1(N4 / 2))) :op0(U4 / times :op0(N5 / 4) :op0(O2 / SUP :op0(V3 / 𝑥) :op1(N6 / 3))) :op0(U5 / times :op0(N7 / 5) :op0(O3 / SUP :op0(V4 / 𝑥) :op1(N8 / 4))) :op0(V5 / …) :op0(U6 / times :op0(V6 / 𝑛) :op0(O4 / SUP :op0(V7 / 𝑥) :op1(O5 / minus :op0(V8 / 𝑛) :op1(N9 / 1)))) :op0(V9 / …)))
                        :op2 (s3 / string-entity
                              :value MATH 
 :math (U7 / neq :op0(V10 / 𝑥) :op0(M1 / L-3 :op0(N10 / 1) :op1(U8 / times :op0(F1 / abs :op0(V11 / 𝑥)) :op0(V12 / &) :op0(V13 / 𝑙) :op0(V14 / 𝑡)) :op2(N11 / 1)))))))
      :snt2 (n / need-01
            :arg0 (ii / i)
            :arg1 (f / find-01
                  :arg0 ii
                  :arg1 (a2 / and
                        :op1 (s4 / sum
                              :mod (p / part))
                        :op2 (s5 / sum
                              :mod (f2 / final)
                              :mod (s6 / series))))))"
B.16	"(m / multi-sentence
      :snt1 (c / calculate-01
            :arg0 (ii / i)
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(N2 / 1)) :op1(U1 / times :op0(O5 / divide :op0(U2 / times :op0(F1 / ln :op0(U3 / plus :op0(N3 / 1) :op0(V1 / 𝑥))) :op0(F2 / ln :op0(O6 / minus :op0(N4 / 1) :op1(V2 / 𝑥)))) :op1(U4 / plus :op0(N5 / 1) :op0(V3 / 𝑥))) :op0(F3 / d :op0(V4 / 𝑥))))))
      :snt2 (t / try-01
            :arg0 (ii2 / i)
            :arg1 (l / let-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U5 / eq :op0(U6 / times :op0(V5 / 𝐼) :op0(O7 / interval$O-O$$ :op0(V6 / 𝑎) :op1(V7 / 𝑏))) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / int) :op1(N6 / 0)) :op1(N7 / 1)) :op1(U7 / times :op0(O12 / divide :op0(U8 / times :op0(F4 / ln :op0(O13 / minus :op0(N8 / 1) :op1(U9 / times :op0(V8 / 𝑎) :op0(V9 / 𝑥) :op0(F5 / ln :op0(U10 / plus :op0(N9 / 1) :op0(U11 / times :op0(V10 / 𝑏) :op0(V11 / 𝑥)))))))) :op1(U12 / plus :op0(N10 / 1) :op0(V12 / 𝑥))) :op0(F6 / d :op0(V13 / 𝑥))))))))
      :snt3 (c2 / compute-01
            :arg0 (ii3 / i)
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (O14 / divide :op0(U13 / times :op0(O15 / SUP :op0(V14 / 𝑑) :op1(N11 / 2)) :op0(V15 / 𝐼) :op0(O16 / interval$O-O$$ :op0(V16 / 𝑎) :op1(V17 / 𝑏))) :op1(U14 / times :op0(V18 / 𝑑) :op0(V19 / 𝑎) :op0(V20 / 𝑑) :op0(V21 / 𝑏))))
            :time (t2 / then)))"
B.17	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (c / calculate-01
                  :arg0 ii
                  :arg1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(U1 / eq :op0(V1 / 𝑥) :op0(N1 / 0))) :op1(C1 / infinity)) :op1(O5 / divide :op0(F1 / sin :op0(V2 / 𝑥)) :op1(V3 / 𝑥))))
                        :arg2 (f / function-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V4 / 𝑓) :op0(V5 / 𝑧)) :op0(O6 / divide :op0(O7 / SUP :op0(V6 / 𝑒) :op1(U4 / times :op0(V7 / 𝑖) :op0(V8 / 𝑧))) :op1(V9 / 𝑧))))))))
      :snt2 (t / think-01
            :arg0 (ii2 / i)
            :arg1 (u / use-01
                  :arg0 ii2
                  :arg1 (p / path
                        :arg1-of (c2 / close-01)
                        :consist-of (s3 / string-entity
                              :value MATH 
 :math (U5 / eq :op0(V10 / Γ) :op0(U6 / plus :op0(O8 / SUB :op0(V11 / 𝛾) :op1(N2 / 1)) :op0(O9 / SUB :op0(V12 / 𝛾) :op1(V13 / 𝑅)) :op0(O10 / SUB :op0(V14 / 𝛾) :op1(N3 / 2)) :op0(O11 / SUB :op0(V15 / 𝛾) :op1(V16 / italic-ϵ)))))))
            :time (a / and
                  :op1 (e2 / equal-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (O12 / form-seq :op0(U7 / eq :op0(U8 / times :op0(O13 / SUB :op0(V17 / 𝛾) :op1(N4 / 1)) :op0(V18 / 𝑡)) :op0(V19 / 𝑡)) :op1(O14 / in :op0(V20 / 𝑡) :op1(O15 / interval$C-C$$ :op0(U9 / times :op0(V21 / 𝑖) :op0(V22 / italic-ϵ)) :op1(U10 / times :op0(V23 / 𝑖) :op0(V24 / 𝑅))))))
                        :arg2 (f2 / function-01))
                  :op2 (e3 / equal-01
                        :arg1 (s5 / string-entity
                              :value MATH 
 :math (O16 / form-seq :op0(U11 / eq :op0(U12 / times :op0(O17 / SUB :op0(V25 / 𝛾) :op1(V26 / 𝑅)) :op0(V27 / 𝑡)) :op0(U13 / times :op0(V28 / 𝑅) :op0(O18 / SUP :op0(V29 / 𝑒) :op1(U14 / times :op0(V30 / 𝑖) :op0(V31 / 𝑡))))) :op1(O19 / in :op0(V32 / 𝑡) :op1(O20 / interval$C-C$$ :op0(O21 / minus :op0(O22 / divide :op0(V33 / 𝜋) :op1(N5 / 2))) :op1(O23 / divide :op0(V34 / 𝜋) :op1(N6 / 2))))))
                        :arg2 (f3 / function-01))
                  :op3 (e4 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (O24 / form-seq :op0(U15 / eq :op0(U16 / times :op0(O25 / SUB :op0(V35 / 𝛾) :op1(N7 / 2)) :op0(V36 / 𝑡)) :op0(V37 / 𝑡)) :op1(O26 / in :op0(V38 / 𝑡) :op1(O27 / interval$C-C$$ :op0(O28 / minus :op0(U17 / times :op0(V39 / 𝑖) :op0(V40 / 𝑅))) :op1(O29 / minus :op0(U18 / times :op0(V41 / 𝑖) :op0(V42 / italic-ϵ)))))))
                        :arg2 (f4 / function-01))
                  :op4 (e5 / equal-01
                        :arg1 (s7 / string-entity
                              :value MATH 
 :math (O30 / form-seq :op0(U19 / eq :op0(U20 / times :op0(O31 / SUB :op0(V43 / 𝛾) :op1(V44 / italic-ϵ)) :op0(V45 / 𝑡)) :op0(U21 / times :op0(V46 / italic-ϵ) :op0(O32 / SUP :op0(V47 / 𝑒) :op1(U22 / times :op0(V48 / 𝑖) :op0(V49 / 𝑡))))) :op1(O33 / in :op0(V50 / 𝑡) :op1(O34 / interval$C-C$$ :op0(O35 / minus :op0(O36 / divide :op0(V51 / 𝜋) :op1(N8 / 2))) :op1(O37 / divide :op0(V52 / 𝜋) :op1(N9 / 2))))))
                        :arg2 (f5 / function-01))
                  :arg0-of (c3 / cause-01
                        :arg1 (e6 / equal-01
                              :polarity -
                              :arg1 (ii3 / integral
                                    :location p))))))"
B.18	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (k / know-01
                  :arg0 (ii / i)
                  :arg1 (q / question-01
                        :quant (m2 / many)
                        :arg1-of (r / resemble-01
                              :arg2 (t / this))))
            :arg2 (w / want-01
                  :arg0 ii
                  :arg1 (s / solve-01
                        :arg0 ii
                        :arg1 q
                        :manner (a / and
                              :op1 (u / use-01
                                    :arg0 ii
                                    :arg1 (m3 / method
                                          :name (n / name
                                                :op1 ""cesáro-stolz"")))
                              :op2 (u2 / use-01
                                    :polarity -
                                    :arg0 ii
                                    :arg1 m3
                                    :mod (o / other))))))
      :snt2 (a2 / and
            :op1 (t2 / take-01
                  :arg0 (ii2 / i)
                  :arg1 (l / log))
            :op2 (a3 / apply-02
                  :arg0 ii2
                  :arg1 m3)
            :subevent-of (g / get-01
                  :arg0 ii2
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U1 / plus :op0(F1 / log :op0(N1 / 2)) :op0(U2 / times :op0(V1 / 𝑛) :op0(F2 / log :op0(U3 / times :op0(T1 / \cfrac) :op0(V2 / 𝑛) :op0(V3 / 𝑛)))) :op0(N2 / 1))
                        :arg2-of (a4 / answer-01
                              :arg1 ii2)
                        :arg0-of (g2 / give-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (O1 / divide :op0(N3 / 2) :op1(V4 / 𝑒))
                                    :arg2-of (a5 / answer-01)))))
            :snt3 (c2 / contrast-01
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (O2 / divide :op0(N4 / 4) :op1(V5 / 𝑒))
                        :arg2-of (a6 / answer-01)))))"
B.20	"(m / multi-sentence
      :snt1 (l / look-01
            :arg0 (ii / i)
            :arg1 (t / thing
                  :name (n / name
                        :op1 MATH 
 :math (O1 / in :op0(V1 / 𝑛) :op1(U1 / times :op0(T1 / \Bbb) :op0(V2 / 𝑁))))
                  :purpose (t2 / thing
                        :name (n2 / name
                              :op1 MATH 
 :math (U2 / eq :op0(U3 / times :op0(V3 / italic-ϕ) :op0(V4 / 𝑛)) :op0(N1 / 40)))
                        :arg1-of (e / equal-01
                              :arg2 (t3 / thing
                                    :name (n3 / name
                                          :op1 MATH 
 :math (V5 / italic-ϕ))
                                    :arg2-of (f / function-01
                                          :mod (e2 / equilibrium)))))))
      :snt2 (f2 / find-01
            :arg0 (ii2 / i)
            :arg1 (t4 / thing
                  :quant 1
                  :arg1-of (e3 / equal-01
                        :arg2 (t5 / thing
                              :name (n4 / name
                                    :op1 MATH 
 :math (U4 / eq :op0(V6 / 𝑛) :op0(N2 / 41))))))
            :time (a / already))
      :snt3 (c / calculate-01
            :arg0 (a2 / amr-unknown)
            :arg1 (t6 / thing
                  :name (n5 / name
                        :op1 MATH 
 :math (U5 / times :op0(O2 / SUP :op0(V7 / 𝑛) :op1(V8 / ′)) :op0(V9 / 𝑠))))))"
B.21	"(m / multi-sentence
      :snt1 (a / and
            :op1 (c / continue-01
                  :arg0 (ii / i)
                  :arg1 (j / journey-01
                        :arg0 ii)
                  :manner (l / learn-01
                        :arg0 ii
                        :arg1 (a2 / arithmetic
                              :mod (m2 / modular))))
            :op2 (c2 / confuse-01
                  :arg1 ii
                  :arg2 (q / question-01
                        :arg1 (f / find-01
                              :mode imperative
                              :arg0 (y / you)
                              :arg1 (d / digit
                                    :quant 2
                                    :mod (l2 / last)
                                    :part-of (s / string-entity
                                          :value MATH 
 :math (O1 / SUP :op0(N1 / 9) :op1(O2 / SUP :op0(N2 / 9) :op1(O3 / SUP :op0(N3 / 9) :op1(E1 /  :op0(O4 / fragments) :op1(T1 / â¦) :op2(N4 / 9))))))
                                    :arg1-of (m3 / mean-01
                                          :arg2 (n / numerical-quantity
                                                :quant 9
                                                :unit d))))
                        :condition-of (k / know-01
                              :arg0 (w / we)
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V1 / 𝑎) :op0(U2 / times :op0(T2 / \text) :op0(V2 / 𝑚) :op0(V3 / 𝑜) :op0(V4 / 𝑑) :op0(V5 / italic-ϕ) :op0(N5 / 100))))))))
      :snt2 (a3 / and
            :op1 (s3 / suppose-02
                  :arg1 (f2 / function
                        :name (n2 / name
                              :op1 ""phi""))
                  :arg2 (u / use-01
                        :arg1 f2
                        :arg2 (p / problem
                              :mod (t / this))))
            :op2 (h / have-03
                  :arg0 (ii2 / i)
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U3 / times :op0(O5 / SUP :op0(N6 / 9) :op1(O6 / SUP :op0(N7 / 9) :op1(O7 / SUP :op0(N8 / 9) :op1(E2 /  :op0(O8 / fragments) :op1(T3 / â¦) :op2(N9 / 9))))) :op0(V6 / italic-â) :op0(V7 / ) :op0(V8 / ¡) :op0(V9 / 𝑥) :op0(U4 / times :op0(T4 / \text) :op0(V10 / 𝑚) :op0(V11 / 𝑜) :op0(V12 / 𝑑) :op0(N10 / 100)))
                        :arg1-of (e / equal-01
                              :arg2 (s5 / string-entity
                                    :value MATH 
 :math (U5 / times :op0(N11 / 0) :op0(V13 / italic-â) :op0(V14 / ) :op0(V15 / ¤) :op0(V16 / 𝑥) :op0(V17 / italic-â) :op0(V18 / ) :op0(V19 / ¤) :op0(N12 / 100))))
                        :arg1-of (e2 / equal-01
                              :arg2 (s6 / string-entity
                                    :value MATH 
 :math (U6 / eq :op0(U7 / times :op0(O9 / SUP :op0(N13 / 9) :op1(O10 / SUP :op0(N14 / 9) :op1(O11 / SUP :op0(N15 / 9) :op1(E3 /  :op0(O12 / fragments) :op1(T5 / â¦) :op2(N16 / 9))))) :op0(T6 / \text) :op0(U8 / times :op0(V20 / 𝑛) :op0(V21 / 𝑖) :op0(V22 / 𝑛) :op0(V23 / 𝑒) :op0(N17 / 9) :op0(V24 / 𝑠))) :op0(O13 / SUP :op0(N18 / 9) :op1(V25 / 𝑎))))))
                  :time (s7 / so-far))))"
B.24	"(p / possible-01
      :arg1 (s / solve-01
            :arg0 (w / we)
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (O1 / root :op0(O2 / minus :op0(U1 / times :op0(N1 / 2) :op0(V1 / 𝑖)) :op1(N2 / 1)) :op1(N3 / 2)))
            :arg2 (w2 / way
                  :mod (a / another)))
      :polarity (a2 / amr-unknown)
      :manner (w3 / work-out-02
            :arg0 w
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (U2 / eq :op0(O3 / minus :op0(U3 / times :op0(N4 / 2) :op0(V2 / 𝑖)) :op1(N5 / 1)) :op0(O4 / SUP :op0(U4 / plus :op0(V3 / 𝑎) :op0(U5 / times :op0(V4 / 𝑏) :op0(V5 / 𝑖))) :op1(N6 / 2)))
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (O5 / minus :op0(U6 / plus :op0(O6 / SUP :op0(V6 / 𝑎) :op1(N7 / 2)) :op0(U7 / times :op0(N8 / 2) :op0(V7 / 𝑎) :op0(V8 / 𝑏) :op0(V9 / 𝑖))) :op1(O7 / SUP :op0(V10 / 𝑏) :op1(N9 / 2))))
                  :arg3 (s5 / string-entity
                        :value MATH 
 :math (U8 / eq :op0(U9 / times :op0(N10 / 2) :op0(V11 / 𝑎) :op0(V12 / 𝑏)) :op0(N11 / 2)))
                  :arg4 (s6 / string-entity
                        :value MATH 
 :math (U10 / eq :op0(O8 / SUP :op0(V13 / 𝑎) :op1(N12 / 2)) :op0(O9 / SUP :op0(V14 / 𝑏) :op1(O10 / minus :op0(N13 / 2)))))
                  :arg5 (s7 / string-entity
                        :value MATH 
 :math (U11 / eq :op0(O11 / minus :op0(O12 / SUP :op0(V15 / 𝑏) :op1(O13 / minus :op0(N14 / 2) :op1(O14 / SUP :op0(V16 / 𝑏) :op1(N15 / 2))))) :op0(O15 / minus :op0(N16 / 1))))
                  :arg6 (s8 / string-entity
                        :value MATH 
 :math (U12 / eq :op0(U13 / plus :op0(O16 / minus :op0(O17 / SUP :op0(V17 / 𝑏) :op1(N17 / 4))) :op0(N18 / 1)) :op0(O18 / minus :op0(N19 / 1))))
                  :arg7 (s9 / string-entity
                        :value MATH 
 :math (U14 / eq :op0(O19 / SUP :op0(V18 / 𝑏) :op1(N20 / 4)) :op0(N21 / 2)))
                  :arg8 (s10 / string-entity
                        :value MATH 
 :math (U15 / eq :op0(V19 / 𝑏) :op0(O20 / root :op0(N22 / 2) :op1(N23 / 4)))))))"
B.25	"(m / multi-sentence
      :snt1 (h / have-condition-91
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑃) :op0(N1 / 0)) :op0(N2 / 2))))
            :arg2 (e2 / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U3 / eq :op0(U4 / times :op0(V2 / 𝑃) :op0(V3 / 𝑥)) :op0(U5 / plus :op0(O1 / SUP :op0(U6 / plus :op0(O2 / SUP :op0(V4 / 𝑥) :op1(N3 / 2)) :op0(N4 / 1)) :op1(N5 / 2)) :op0(N6 / 1)))))
            :arg1-of (c / cause-01
                  :arg0 (r / reason
                        :arg1-of (s3 / same-01))))
      :snt2 (c2 / contrast-01
            :arg2 (h2 / have-03
                  :arg0 (w / we)
                  :arg1 (c3 / converge-01
                        :polarity -
                        :arg0 (s4 / string-entity
                              :value MATH 
 :math (O3 / limit :op0(O4 / SUB :op0(O5 / limit) :op1(U7 / times :op0(V5 / 𝑥) :op0(V6 / italic-â) :op0(V7 / ) :op0(V8 / ) :op0(V9 / italic-â) :op0(V10 / ) :op0(V11 / ))) :op1(U8 / times :op0(F1 / log :op0(O6 / SUB :op0(F2 / log) :op1(V12 / 𝑥)) :op1(V13 / 𝑃)) :op0(V14 / 𝑥))))
                        :arg1 (ii / integer))
                  :time (s5 / string-entity
                        :value MATH 
 :math (U9 / eq :op0(U10 / times :op0(V15 / 𝑃) :op0(N7 / 0)) :op0(N8 / 3)))))
      :snt3 (c4 / cause-01
            :arg1 (t / think-01
                  :arg0 (ii2 / i)
                  :arg1 (p / possible-01
                        :polarity -
                        :arg1 (p2 / polynomial
                              :domain (s6 / string-entity
                                    :value MATH 
 :math (U11 / times :op0(V16 / 𝑃) :op0(V17 / 𝑥))))))))"
B.26	"(m / multi-sentence
      :snt1 (t / try-01
            :arg0 (ii / i)
            :arg1 (s / show-01
                  :arg0 ii
                  :arg1 (c / contrast-01
                        :arg1 (c2 / converge-01
                              :arg1 (t2 / thing
                                    :arg1-of (ii2 / integral-02)
                                    :arg1-of (f / follow-04)))
                        :arg2 (a / absolute
                              :polarity -))))
      :snt2 (a2 / attempt-01
            :arg0 (ii3 / i)
            :arg1 (o / obtain-01
                  :arg0 ii3
                  :arg1 (s2 / series
                        :name (n / name
                              :op1 ""taylor"")
                        :consist-of (s3 / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(V1 / 𝑥)) :op1(U1 / times :op0(O5 / divide :op0(U2 / times :op0(V2 / 𝑠) :op0(V3 / 𝑖) :op0(V4 / 𝑛) :op0(V5 / 𝑥)) :op1(V6 / 𝑥)) :op0(F1 / d :op0(V7 / 𝑥)))))
                        :arg1-of f
                        :arg2 (s4 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(U4 / plus :op0(O6 / minus :op0(U5 / plus :op0(O7 / minus :op0(V8 / 𝑥) :op1(O8 / divide :op0(O9 / SUP :op0(V9 / 𝑥) :op1(N2 / 3)) :op1(U6 / times :op0(N3 / 3) :op0(O10 / factorial :op0(N4 / 3))))) :op0(O11 / divide :op0(O12 / SUP :op0(V10 / 𝑥) :op1(N5 / 5)) :op1(U7 / times :op0(N6 / 5) :op0(O13 / factorial :op0(N7 / 5))))) :op1(O14 / divide :op0(O15 / SUP :op0(V11 / 𝑥) :op1(N8 / 7)) :op1(U8 / times :op0(N9 / 7) :op0(O16 / factorial :op0(N10 / 7))))) :op0(V12 / ⋯)) :op0(O17 / SUB :op0(O18 / SUP :op0(O19 / SUB :op0(O20 / sum) :op1(U9 / eq :op0(V13 / 𝑛) :op0(N11 / 0))) :op1(C1 / infinity)) :op1(U10 / times :op0(O21 / SUP :op0(O22 / minus :op0(N12 / 1)) :op1(V14 / 𝑛)) :op0(O23 / divide :op0(O24 / SUP :op0(V15 / 𝑥) :op1(U11 / plus :op0(U12 / times :op0(N13 / 2) :op0(V16 / 𝑛)) :op0(N14 / 1))) :op1(U13 / times :op0(U14 / plus :op0(U15 / times :op0(N15 / 2) :op0(V17 / 𝑛)) :op0(N16 / 1)) :op0(O25 / factorial :op0(U16 / plus :op0(U17 / times :op0(N17 / 2) :op0(V18 / 𝑛)) :op0(N18 / 1))))))))
                              :time (n2 / now))))
            :ord (o2 / ordinal-entity
                  :value 1))
      :snt3 (a3 / and
            :op1 (s5 / string-entity
                  :value MATH 
 :math (U18 / eq :op0(O26 / SUB :op0(O27 / SUP :op0(O28 / SUB :op0(O29 / int) :op1(N19 / 0)) :op1(C2 / infinity)) :op1(U19 / times :op0(O30 / divide :op0(F2 / sin :op0(V19 / 𝑥)) :op1(V20 / 𝑥)) :op0(F3 / d :op0(V21 / 𝑥)))) :op0(O31 / limit :op0(O32 / SUB :op0(O33 / limit) :op1(F4 / → :op0(V22 / 𝑥) :op1(C3 / infinity))) :op1(O34 / SUB :op0(O35 / SUP :op0(O36 / SUB :op0(O37 / sum) :op1(U20 / eq :op0(V23 / 𝑛) :op0(N20 / 0))) :op1(C4 / infinity)) :op1(U21 / times :op0(O38 / SUP :op0(O39 / minus :op0(N21 / 1)) :op1(V24 / 𝑛)) :op0(O40 / divide :op0(O41 / SUP :op0(V25 / 𝑥) :op1(U22 / plus :op0(U23 / times :op0(N22 / 2) :op0(V26 / 𝑛)) :op0(N23 / 1))) :op1(U24 / times :op0(U25 / plus :op0(U26 / times :op0(N24 / 2) :op0(V27 / 𝑛)) :op0(N25 / 1)) :op0(O42 / factorial :op0(U27 / plus :op0(U28 / times :op0(N26 / 2) :op0(V28 / 𝑛)) :op0(N27 / 1))))))))))
            :op2 (g / get-03
                  :arg1 ii3
                  :arg2 (s6 / stick-01
                        :arg1 ii3
                        :arg2 (h / here))))
      :snt4 (s7 / step-01
            :mod (n3 / next)
            :polarity (a4 / amr-unknown)))"
B.27	"(v / value-01
      :arg1 (s / string-entity
            :value MATH 
 :math (O1 / SUP :op0(V1 / 𝑒) :op1(O2 / divide :op0(U1 / times :op0(N1 / 3) :op0(V2 / 𝑖) :op0(V3 / 𝜋)) :op1(N2 / 2))))
      :arg2 (a / amr-unknown))"
B.28	"(a / amr-unknown
      :condition (s / string-entity
            :value MATH 
 :math (U1 / eq :op0(F1 / sin :op0(O1 / SUP :op0(N1 / 18) :op1(O2 / compose))) :op0(O3 / divide :op0(U2 / plus :op0(V1 / 𝑎) :op0(O4 / root :op0(V2 / 𝑏) :op1(N2 / 2))) :op1(V3 / 𝑐))))
      :domain (s2 / string-entity
            :value MATH 
 :math (U3 / plus :op0(V4 / 𝑎) :op0(V5 / 𝑏) :op0(V6 / 𝑐))))"
B.29	"(m / multi-sentence
      :snt1 (a / and
            :op1 (s / stump-01
                  :arg0 (t / this)
                  :arg1 (t2 / they)
                  :arg1-of (c / complete-02))
            :op2 (p / possible-01
                  :polarity -
                  :arg1 (g / get-01
                        :arg0 (ii / i)
                        :arg1 (a2 / answer-01
                              :arg0 ii))))
      :snt2 (c2 / calculate-01
            :arg0 (ii2 / i)
            :arg1 (n / number
                  :mod (c3 / complex)
                  :example (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V1 / 𝑖) :op0(O1 / root :op0(O2 / minus :op0(N1 / 1)) :op1(N2 / 2))))
                  :time (s3 / since
                        :op1 (s4 / string-entity
                              :value ""eqx240eqx"")))
            :time (a3 / after
                  :op1 (c4 / calculate-01
                        :mod (s5 / some)
                        :mod (t3 / theory)))
            :manner (u / use-01
                  :arg0 ii2
                  :arg1 (p2 / property
                        :arg1-of (u2 / utilize-01
                              :arg0 (n2 / number
                                    :arg1-of (r / real-04)))
                        :arg0-of (s6 / state-01
                              :arg1 (s7 / since
                                    :op1 (s8 / string-entity
                                          :value MATH 
 :math (U2 / eq :op0(O3 / divide :op0(U3 / times :op0(N3 / 5) :op0(V2 / 𝑥)) :op1(C1 / infinity)) :op0(N4 / 0)))
                                    :op2 (s9 / string-entity
                                          :value ""eqx242eqx""))))))
      :snt3 (a4 / amr-choice
            :op1 (c5 / correct-02
                  :arg1 (c6 / calculate-01
                        :mod (t4 / this)
                        :mod t3))
            :op2 (m2 / more-than
                  :op1 (t5 / this)
                  :domain (c7 / concept))))"
B.30	"(m / multi-sentence
      :snt1 (f / find-01
            :mode imperative
            :polite +
            :arg0 (y / you)
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / minus :op0(U1 / plus :op0(O2 / SUP :op0(V1 / 𝑎) :op1(N1 / 3)) :op0(O3 / SUP :op0(V2 / 𝑏) :op1(N2 / 3)) :op0(O4 / SUP :op0(V3 / 𝑐) :op1(N3 / 3))) :op1(U2 / times :op0(N4 / 3) :op0(V4 / 𝑎) :op0(V5 / 𝑏) :op0(V6 / 𝑐)))
                  :arg2-of (ii / include-91
                        :arg1 (a / and
                              :op1 (s2 / string-entity
                                    :value MATH 
 :math (U3 / times :op0(V7 / 𝑎) :op0(N5 / 1)))
                              :op2 (s3 / string-entity
                                    :value MATH 
 :math (U4 / times :op0(V8 / 𝑏) :op0(N6 / 0)))
                              :op3 (s4 / string-entity
                                    :value MATH 
 :math (O5 / minus :op0(V9 / 𝑐) :op1(N7 / 1)))
                              :op4 (s5 / string-entity
                                    :value MATH 
 :math (O6 / minus :op0(V10 / 𝑑) :op1(N8 / 2))))))
            :snt2 (h / help-01
                  :mode imperative
                  :polite +
                  :arg0 y)
            :arg1 (s6 / solve-01
                  :arg0 (ii2 / i)
                  :arg1 (t / thing
                        :arg1-of (q / question-01)
                        :mod (t2 / this)))
            :arg2 ii2))"
B.32	"(m / multi-sentence
      :snt1 (b / be-temporally-at-91
            :arg1 (ii / introduce-02
                  :arg0 (w / we)
                  :arg1 (t / thing
                        :arg2-of (d / define-01))
                  :arg2 (s / system
                        :mod (l / logic)
                        :mod (o / order
                              :ord (o2 / ordinal-entity
                                    :value 1))))
            :arg2 (e / exemplify-01
                  :arg0 (s2 / say-01
                        :arg0 (w2 / we)
                        :arg1 (d2 / define-01
                              :arg0 w2
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(T1 / empty) :op2(E2 /  :op0(O2 / fragments) :op1(V1 / $) :op2(V2 / x) :op3(V3 / $$) :op3(U1 / iff) :op4(O3 / not-exists) :op5(V4 / y) :op6(E3 /  :op0(O4 / fragments) :op1(V5 / $) :op2(V6 / y) :op3(O5 / in) :op4(V7 / x) :op5(V8 / $$)))))))
                  :arg1 (c / call-01
                        :mode imperative
                        :arg0 (y / you)
                        :arg1 d2
                        :arg2 (t2 / thing
                              :arg1-of (d3 / define-01))
                        :polarity (a / amr-unknown))))
      :snt2 (a2 / ask-01
            :arg0 (ii2 / i)
            :arg1 (t3 / this)
            :arg1-of (c2 / cause-01
                  :arg0 (n / new-01
                        :arg1 (t4 / thing
                              :name (n2 / name
                                    :op1 ""empty""
                                    :op2 ""()"")
                              :arg1-of (p / predicate-01)
                              :mod (p2 / place
                                    :quant 1))
                        :arg1-of (a3 / actual-02)
                        :arg1-of (ii3 / include-91
                              :polarity -
                              :arg2 (p3 / primitive
                                    :arg1-of (l2 / list-01)
                                    :example (c3 / city
                                          :name (n3 / name
                                                :op1 ""zermelo"")
                                          :arg0-of (h / have-03
                                                :arg1 (a4 / and
                                                      :op1 (ii4 / identity)
                                                      :op2 (m2 / membership)
                                                      :mod (o3 / only)
                                                      :prep-as (t5 / thing
                                                            :arg1-of (s4 / symbolize-01)
                                                            :mod (p4 / primitive)))))))))))"
B.33	"(m / mean-01
      :arg1 (d / derivative
            :ord (o / ordinal-entity
                  :value 3)
            :mod (s / string-entity
                  :value MATH 
 :math (V1 / 𝑓))
            :mod (s2 / string-entity
                  :value MATH 
 :math (O1 / divide :op0(O2 / partialdiff :op0(O3 / SUP :op0(O4 / partialdiff) :op1(N1 / 3)) :op1(V2 / 𝑓)) :op1(O5 / partialdiff :op0(O6 / SUP :op0(V3 / 𝑡) :op1(N2 / 3)))))
            :mod (s3 / string-entity
                  :value MATH 
 :math (O7 / divide :op0(O8 / partialdiff :op0(O9 / SUP :op0(O10 / partialdiff) :op1(N3 / 3)) :op1(V4 / 𝑓)) :op1(O11 / partialdiff :op0(O12 / SUP :op0(V5 / 𝑥) :op1(N4 / 3))))))
      :arg2 (a / amr-unknown)
      :arg1-of (a2 / actual-02)
      :condition (e / exist-01
            :arg1 (q / quantity
                  :mod (p / physical)
                  :arg1-of (r / represent-01
                        :arg0 (f / function
                              :mod (s4 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V6 / 𝑓) :op0(O13 / interval$O-O$$ :op0(V7 / 𝑡) :op1(V8 / 𝑥)))))))))"
B.34	"(m / multi-sentence
      :snt1 (m2 / modify-01
            :arg0 (ii / i)
            :arg1 (q / question-01)
            :manner (a / accordingly))
      :snt2 (d / define-01
            :arg0 (e / extend-01)
            :arg1 (s / string-entity
                  :value MATH 
 :math (V1 / ↑ :op0(O1 / SUP :op0(V2 / ↑) :op1(V3 / 𝑛)) :op1(V4 / 𝑎) :op2(V5 / 𝑏))
                  :arg0-of (s2 / satisfy-01
                        :arg1 (d2 / define-01
                              :arg1 (n / notation)
                              :arg1-of (r / recur-01)))
                  :mod (e2 / each)))
      :snt3 (t / turn-out-11
            :arg1 (c / correct-02
                  :polarity -
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (E1 /  :op0(O2 / fragments) :op1(V6 / a) :op2(V7 / ↓) :op3(V8 / ↓) :op4(V9 / b) :op5(U1 / eq) :op6(V10 / b) :op7(U2 / plus) :op8(N1 / 1)))
                  :mod (e3 / either))
            :arg1-of (c2 / cause-01
                  :arg0 (ii2 / imply-01
                        :arg0 (t2 / this)
                        :arg1 (s4 / string-entity
                              :value ""eqx281eqx""))))
      :snt4 (e4 / edit-01
            :ord (o / ordinal-entity
                  :value 2)))"
B.35	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (k / know-01
                  :arg0 (ii / i)
                  :arg1 (p / possible-01
                        :arg1 (s / sound-01
                              :arg1 (q / question-01
                                    :mod (t / this))
                              :arg2 (n / naive))))
            :arg2 (c2 / cause-01
                  :arg0 (a / amr-unknown)
                  :arg1 (w / write-01
                        :arg0 (w2 / we)
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (O1 / int :op0(U1 / times :op0(O2 / SUP :op0(V1 / 𝑒) :op1(O3 / SUP :op0(V2 / 𝑥) :op1(N1 / 2))) :op0(F1 / d :op0(V3 / 𝑥))) :op1(W1 / ) :op2(W2 / ))
                              :arg1-of (r / resemble-01
                                    :arg2 (s3 / string-entity
                                          :value MATH 
 :math (O4 / int :op0(U2 / times :op0(O5 / SUP :op0(V4 / 𝑒) :op1(U3 / times :op0(N2 / 2) :op0(V5 / 𝑥) :op0(F2 / d :op0(V6 / 𝑥))))) :op1(W3 / ) :op2(W4 / ))))))))
      :snt2 c
      :arg1 (h / have-03
            :polarity -
            :arg0 (f / former)
            :arg1 (t2 / thing
                  :arg0-of (ii2 / incentivize-01
                        :polarity -)))
      :arg2 (h2 / have-03
            :arg0 (l / latter)
            :arg1 t2))"
B.36	"(m / multi-sentence
      :snt1 (a / arrive-01
            :arg1 (w / we)
            :arg4 (s / string-entity
                  :value MATH 
 :math (U1 / times :op0(V1 / 𝑡) :op0(V2 / 𝑟) :op0(V3 / 𝑢) :op0(V4 / 𝑒)))
            :condition (a2 / assume-02
                  :arg0 w
                  :arg1 (h / hold-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U2 / times :op0(O1 / not) :op0(V5 / 𝑃)))))
            :manner (u / use-01
                  :arg0 w
                  :arg1 (l / list-01
                        :arg1 (s3 / state-01
                              :arg1-of (p / prove-01
                                    :arg0 w
                                    :time (b / before
                                          :op1 (p2 / prove-01
                                                :arg0 w
                                                :arg1 s3))))
                        :arg2 (o / or
                              :op1 (h2 / hold-01
                                    :arg1 s)
                              :op2 (d / derive-01
                                    :arg0 w
                                    :arg1 s)))))
      :snt2 (p3 / possible-01
            :arg1 (a3 / add-02
                  :arg0 (w2 / we)
                  :arg1 (s4 / string-entity
                        :value ""p"")
                  :arg2 l
                  :arg1 (s5 / state-01
                        :arg0 w2
                        :arg1-of (p4 / prove-01)))
            :arg1-of (c / cause-01
                  :arg0 (d2 / derive-01
                        :arg1 s4)))
      :arg1-of (c2 / cause-01
            :arg0 (c3 / contain-01
                  :arg0 (t / thing
                        :arg1-of (c4 / contradict-01)
                        :arg1-of (o2 / obtain-01))
                  :arg1 (s6 / something
                        :arg1-of (r / resemble-01
                              :arg2 (p5 / prove-01
                                    :arg0 t
                                    :arg1 (w3 / wrong-04
                                          :arg1 a2
                                          :arg0 w2
                                          :arg1 (s7 / string-entity
                                                :value MATH 
 :math (U3 / times :op0(O2 / not) :op0(V6 / 𝑃)))
                                          :mod (ii / initial))
                                    :arg0-of (c5 / cause-01
                                          :arg1 (h3 / hold-01
                                                :arg1 s7)))))))
      :quant (m2 / most)
      :arg1-of (ii2 / include-91
            :arg2 (p6 / prove-01)))"
B.37	"(m / multi-sentence
      :snt1 (h / have-concession-91
            :arg1 (f / function
                  :arg1-of (v / value-01
                        :arg1-of (r / real-04))
                  :domain (a / and
                        :op1 (s / string-entity
                              :value MATH 
 :math (V1 / 𝑓))
                        :op2 (s2 / string-entity
                              :value MATH 
 :math (V2 / 𝑔)))
                  :arg0-of (ii / interchange-01
                        :polarity -
                        :arg1 (a2 / and
                              :op1 (ii2 / identity)
                              :op2 (l / linear))))
            :arg2 (e / exhibit-01
                  :arg0 a
                  :arg1 (b / behave-01
                        :arg0 (s3 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / compose :op0(V3 / 𝑓) :op1(V4 / 𝑔)) :op0(U2 / times :op0(O2 / compose :op0(V5 / 𝑔) :op1(V6 / 𝑓)) :op0(V7 / &quest;))))))
            :polarity (a3 / amr-unknown))
      :snt2 (t / trivial
            :domain (e2 / example
                  :example (a4 / and
                        :op1 (s4 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(U4 / times :op0(V8 / 𝑓) :op0(V9 / 𝑥)) :op0(U5 / times :op0(N1 / 2) :op0(V10 / 𝑥))))
                        :op2 (s5 / string-entity
                              :value MATH 
 :math (U6 / eq :op0(U7 / times :op0(V11 / 𝑔) :op0(V12 / 𝑥)) :op0(U8 / times :op0(N2 / 3) :op0(V13 / 𝑥))))))
            :mod (s6 / sense
                  :mod (t2 / this)))
      :snt3 (a5 / and
            :op2 (p / possible-01
                  :arg1 (g / go-06
                        :arg0 (o / one)
                        :arg1 (o2 / obtain-01
                              :arg0 o
                              :arg1 (e3 / exemplify-01
                                    :arg1 (f2 / function
                                          :arg1-of (c / commute-02
                                                :arg2 (s7 / string-entity
                                                      :value MATH 
 :math (V14 / 𝑓)))))))
                  :condition (f3 / function
                        :mod (s8 / string-entity
                              :value MATH 
 :math (V15 / 𝑓))))))"
B.38	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (s / see-01
                  :arg0 (ii / i)
                  :arg1 (t / theorem
                        :name (n / name
                              :op1 ""zfc""
                              :op2 ""axioms""))
                  :time (b / before
                        :op1 (n2 / now)
                        :quant (s2 / some
                              :op1 (t2 / temporal-quantity
                                    :quant 1
                                    :unit (y / year))))
                  :ord (o / ordinal-entity
                        :value 1))
            :arg2 (h / have-concession-91
                  :arg1 (u / use-01
                        :arg0 (w / we)
                        :arg1 t
                        :frequency (t3 / time
                              :mod (a / all))
                        :location (m2 / module
                              :mod (e / every))
                        :concession (e2 / even-if
                              :op1 (k / know-01
                                    :polarity -
                                    :arg0 w
                                    :arg1 t
                                    :manner (n3 / name-01
                                          :arg1 t)
                                    :time (y2 / yet))))
                  :arg2 (a2 / and
                        :op1 (p / prove-01
                              :arg1 (e3 / exist-01
                                    :arg1 (e4 / equal-01
                                          :arg1 (s3 / string-entity
                                                :value MATH 
 :math (F1 / $##$ :op0(M1 / L-2 :op0(V1 / 𝑞) :op1(V2 / 𝑟)) :op1(U1 / eq :op0(V3 / 𝑎) :op0(U2 / plus :op0(U3 / times :op0(V4 / 𝑏) :op0(V5 / 𝑞)) :op0(V6 / 𝑟))))
                                                :arg0-of (r / restrict-01
                                                      :arg1 (s4 / string-entity
                                                            :value ""r"")
                                                      :arg1-of (k2 / know-01))))
                                    :arg2 (e5 / equal-01
                                          :arg1 (s5 / string-entity
                                                :value MATH 
 :math (U4 / times :op0(V7 / 𝐶) :op0(V8 / ℎ) :op0(V9 / 𝑜) :op0(V10 / 𝑜) :op0(V11 / 𝑠) :op0(V12 / 𝑒)))
                                          :arg2 (e6 / equal-01
                                                :arg1 (s6 / string-entity
                                                      :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(V13 / q) :op2(V14 / $##$) :op3(T1 / qb&lt) :op4(V15 / ;) :op5(U5 / eq) :op6(V16 / a)))
                                                :arg2 (e7 / equal-01
                                                      :arg1 s6
                                                      :arg2 (s7 / string-entity
                                                            :value MATH 
 :math (M2 / L-2 :op0(V17 / 𝑎) :op1(V18 / 𝑏))))
                                                :arg2-of (h2 / have-degree-91
                                                      :arg1 s6
                                                      :arg3 (m3 / most))))))
                        :op2 (s8 / start-01
                              :arg1 p
                              :arg2 (r2 / resemble-01
                                    :arg2 (t4 / this))))))
      :snt2 (a3 / allow-01
            :arg0 t
            :mod (c2 / choose-01))
      :arg1 (e8 / execute-02
            :arg0 w
            :arg1 (s9 / step-01
                  :arg1-of (s10 / simple-02
                        :arg1-of c
                        :arg2 (ii2 / important-01
                              :arg1 s9
                              :degree (s11 / so))))
            :mod (t5 / this))
      :polarity (a4 / amr-unknown))"
B.40	"(m / multi-sentence
      :snt1 (r / recommend-01
            :arg1 (p / power-01
                  :polarity -
                  :arg1 (v / variable
                        :name (n / name
                              :op1 ""x""))
                  :arg1-of (h / have-degree-91
                        :arg2 (h2 / high-02
                              :arg1 p)
                        :arg3 (m2 / more))
                  :arg0-of (c / cause-01
                        :arg1 (g / graph
                              :poss (f / function)
                              :arg1-of (s / straight-04
                                    :polarity -))))
            :mod (b / basic))
      :snt2 (c2 / call-01
            :arg1 (f2 / function
                  :mod (s2 / string-entity
                        :value ""f""))
            :arg2 (l / linear)
            :condition (e / equal-01
                  :arg1 (p2 / power-01
                        :arg1 (d / derivative
                              :mod (a / all)))
                  :arg2 (e2 / equal-01
                        :arg1 p2
                        :arg2 (p3 / power-01
                              :arg1 (v2 / variable
                                    :name (n2 / name
                                          :op1 MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(U3 / plus :op0(V2 / 𝑥) :op0(V3 / 𝑦))) :op0(U4 / plus :op0(U5 / times :op0(V4 / 𝑓) :op0(V5 / 𝑥)) :op0(U6 / times :op0(V6 / 𝑓) :op0(V7 / 𝑦))))))))
                  :arg1-of (r2 / resemble-01
                        :arg2 (d2 / define-01
                              :arg1 (e3 / equate-01
                                    :mod (l2 / linear))
                              :location (a2 / above))))
            :mod (a3 / also))
      :snt3 (e4 / equal-01
            :arg1 (p4 / power-01
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (U7 / eq :op0(U8 / plus :op0(U9 / times :op0(V8 / 𝑎) :op0(V9 / 𝑥) :op0(V10 / 𝑦)) :op0(U10 / times :op0(V11 / 𝑏) :op0(V12 / 𝑥) :op0(O1 / SUP :op0(V13 / 𝑦) :op1(V14 / ′))) :op0(U11 / times :op0(V15 / 𝑐) :op0(V16 / 𝑥) :op0(V17 / 𝑦) :op0(V18 / "")) :op0(U12 / times :op0(V19 / 𝑑) :op0(V20 / 𝑥) :op0(O2 / SUP :op0(V21 / 𝑦) :op1(V22 / ′′′))) :op0(V23 / …) :op0(U13 / times :op0(V24 / 𝑞) :op0(V25 / 𝑥))) :op0(N1 / 0))))
            :arg2 (p5 / power-01
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U14 / eq :op0(U15 / times :op0(V26 / 𝑓) :op0(U16 / times :op0(V27 / 𝑐) :op0(V28 / 𝑥))) :op0(U17 / times :op0(V29 / 𝑐) :op0(V30 / 𝑓) :op0(V31 / 𝑥)))))
            :arg1-of r2
            :arg2 d2))"
B.41	"(h / have-condition-91
      :arg1 (g / give-01
            :arg1 (n / number
                  :quant-of (f / function
                        :mod (o / onto))
                  :source (s / string-entity
                        :value ""a"")
                  :destination (s2 / string-entity
                        :value ""b""))
            :location (b / book))
      :arg2 (h2 / have-condition-91
            :arg1 (s3 / set
                  :quant 2
                  :mod (f2 / finite)
                  :domain (a / and
                        :op1 s
                        :op2 s2)
                  :arg0-of (c / contain-01
                        :arg1 (e / element
                              :mod (s4 / string-entity
                                    :value MATH 
 :math (V1 / 𝑚)))))
            :arg2 (a2 / and
                  :op1 (p / possible-01
                        :polarity -
                        :arg1 (u / understand-01
                              :arg0 (ii / i)
                              :arg1 (ii2 / it)))
                  :op2 (r / realize-01
                        :arg0 ii
                        :arg1 (c2 / combine-01)))))"
B.43	"(m / multi-sentence
      :snt1 (t / try-01
            :arg0 (ii / i)
            :arg1 (p / prove-01
                  :arg0 ii
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / sum :op0(O2 / SUB :op0(O3 / sum) :op1(O4 / geq :op0(V1 / 𝑛) :op1(N1 / 1))) :op1(O5 / divide :op0(N2 / 1) :op1(U2 / plus :op0(O6 / SUP :op0(V2 / 𝑛) :op1(N3 / 2)) :op0(N4 / 1)))) :op0(O7 / divide :op0(O8 / minus :op0(U3 / times :op0(V3 / 𝜋) :op0(F1 / coth :op0(V4 / 𝜋))) :op1(N5 / 1)) :op1(N6 / 2))))))
      :snt2 (l / let-01
            :arg0 (w / we)
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (U4 / eq :op0(V5 / 𝑆) :op0(O9 / sum :op0(O10 / SUB :op0(O11 / sum) :op1(O12 / geq :op0(V6 / 𝑛) :op1(N7 / 1))) :op1(O13 / divide :op0(N8 / 1) :op1(U5 / plus :op0(O14 / SUP :op0(V7 / 𝑛) :op1(N9 / 2)) :op0(N10 / 1)))))))
      :snt3 (r / recall-02
            :arg0 w
            :arg1 (s3 / series
                  :name (n / name
                        :op1 ""fourier"")
                  :topic (f / function-01
                        :arg1 (e / exponential)
                        :arg2 (s4 / string-entity
                              :value MATH 
 :math (U6 / eq :op0(O15 / SUP :op0(V8 / 𝑒) :op1(V9 / 𝑥)) :op0(U7 / plus :op0(O16 / divide :op0(F2 / sinh :op0(V10 / 𝜋)) :op1(V11 / 𝜋)) :op0(U8 / times :op0(O17 / divide :op0(U9 / times :op0(N11 / 2) :op0(F3 / sinh :op0(V12 / 𝜋))) :op1(V13 / 𝜋)) :op0(O18 / sum :op0(O19 / SUB :op0(O20 / sum) :op1(O21 / geq :op0(V14 / 𝑛) :op1(N12 / 1))) :op1(U10 / times :op0(O22 / divide :op0(O23 / SUP :op0(O24 / minus :op0(N13 / 1)) :op1(V15 / 𝑛)) :op1(U11 / plus :op0(O25 / SUP :op0(V16 / 𝑛) :op1(N14 / 2)) :op0(N15 / 1))) :op0(O26 / minus :op0(F4 / cos :op0(U12 / times :op0(V17 / 𝑛) :op0(V18 / 𝑥))) :op1(U13 / times :op0(V19 / 𝑛) :op0(F5 / sin :op0(U14 / times :op0(V20 / 𝑛) :op0(V21 / 𝑥)))))))))))))
            :concession (p2 / plug-in-03
                  :arg0 w
                  :arg1 (a / and
                        :op1 (s5 / string-entity
                              :value MATH 
 :math (U15 / eq :op0(V22 / 𝑥) :op0(V23 / 𝜋)))
                        :op2 (s6 / string-entity
                              :value MATH 
 :math (U16 / eq :op0(O27 / SUP :op0(V24 / 𝑒) :op1(V25 / 𝜋)) :op0(U17 / plus :op0(O28 / divide :op0(F6 / sinh :op0(V26 / 𝜋)) :op1(V27 / 𝜋)) :op0(U18 / times :op0(O29 / divide :op0(U19 / times :op0(N16 / 2) :op0(F7 / sinh :op0(V28 / 𝜋))) :op1(V29 / 𝜋)) :op0(O30 / sum :op0(O31 / SUB :op0(O32 / sum) :op1(O33 / geq :op0(V30 / 𝑛) :op1(N17 / 1))) :op1(U20 / times :op0(O34 / divide :op0(O35 / SUP :op0(O36 / minus :op0(N18 / 1)) :op1(V31 / 𝑛)) :op1(U21 / plus :op0(O37 / SUP :op0(V32 / 𝑛) :op1(N19 / 2)) :op0(N20 / 1))) :op0(O38 / minus :op0(F8 / cos :op0(U22 / times :op0(V33 / 𝑛) :op0(V34 / 𝜋))) :op1(U23 / times :op0(V35 / 𝑛) :op0(F9 / sin :op0(U24 / times :op0(V36 / 𝑛) :op0(V37 / 𝜋)))))))))))
                        :op3 (s7 / string-entity
                              :value MATH 
 :math (U25 / eq :op0(O39 / SUP :op0(V38 / 𝑒) :op1(V39 / 𝜋)) :op0(U26 / plus :op0(O40 / divide :op0(F10 / sinh :op0(V40 / 𝜋)) :op1(V41 / 𝜋)) :op0(U27 / times :op0(O41 / divide :op0(U28 / times :op0(N21 / 2) :op0(F11 / sinh :op0(V42 / 𝜋))) :op1(V43 / 𝜋)) :op0(O42 / sum :op0(O43 / SUB :op0(O44 / sum) :op1(O45 / geq :op0(V44 / 𝑛) :op1(N22 / 1))) :op1(U29 / times :op0(O46 / divide :op0(O47 / SUP :op0(O48 / minus :op0(N23 / 1)) :op1(V45 / 𝑛)) :op1(U30 / plus :op0(O49 / SUP :op0(V46 / 𝑛) :op1(N24 / 2)) :op0(N25 / 1))) :op0(O50 / minus :op0(O51 / SUP :op0(O52 / minus :op0(N26 / 1)) :op1(V47 / 𝑛)) :op1(F12 / ⋅ :op0(V48 / 𝑛) :op1(N27 / 0)))))))))
                        :op4 (s8 / string-entity
                              :value MATH 
 :math (U31 / eq :op0(O53 / SUP :op0(V49 / 𝑒) :op1(V50 / 𝜋)) :op0(U32 / plus :op0(O54 / divide :op0(F13 / sinh :op0(V51 / 𝜋)) :op1(V52 / 𝜋)) :op0(U33 / times :op0(O55 / divide :op0(U34 / times :op0(N28 / 2) :op0(F14 / sinh :op0(V53 / 𝜋))) :op1(V54 / 𝜋)) :op0(V55 / 𝑆)))))
                        :op5 (s9 / string-entity
                              :value MATH 
 :math (U35 / eq :op0(V56 / 𝑆) :op0(O56 / minus :op0(O57 / divide :op0(U36 / times :op0(V57 / 𝜋) :op0(O58 / SUP :op0(V58 / 𝑒) :op1(V59 / 𝜋))) :op1(U37 / times :op0(N29 / 2) :op0(F15 / sinh :op0(V60 / 𝜋)))) :op1(O59 / divide :op0(N30 / 1) :op1(N31 / 2))))))))
      :snt4 (c / contrast-01
            :arg2 (c2 / correct-02
                  :arg1 (t2 / that)
                  :degree (n2 / near
                        :polarity -))))"
B.44	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (g / group-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (O1 / interval$O-O$$ :op0(U1 / times :op0(O2 / SUB :op0(V1 / ℳ) :op1(U2 / times :op0(N1 / 2) :op0(N2 / 2) :op0(U3 / times :op0(T1 / \mathbb) :op0(V2 / 𝑄))))) :op1(U4 / times)))
                  :arg2 (m2 / matrix
                        :mod (n / nonsingular))))
      :snt2 (a / and
            :op1 (l2 / let-01
                  :arg1 (o / order-03
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U5 / eq :op0(V3 / 𝐴) :op0(M1 / L-3 :op0(U6 / times :op0(M2 / M-1x1 :op0(M3 / R :op0(N3 / 0))) :op0(V4 / &) :op0(V5 / 𝑎) :op0(V6 / 𝑚) :op0(V7 / 𝑝)) :op1(O3 / minus :op0(U7 / times :op0(N4 / 1) :op0(N5 / 1) :op0(V8 / &) :op0(V9 / 𝑎) :op0(V10 / 𝑚) :op0(V11 / 𝑝))) :op2(N6 / 0))))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (V12 / 𝐴))))
            :op2 (l3 / let-01
                  :arg1 (o2 / order-03
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (U8 / eq :op0(V13 / 𝐵) :op0(M4 / L-3 :op0(U9 / times :op0(M5 / M-1x1 :op0(M6 / R :op0(N7 / 0))) :op0(V14 / &) :op0(V15 / 𝑎) :op0(V16 / 𝑚) :op0(V17 / 𝑝)) :op1(O4 / minus :op0(N8 / 1) :op1(U10 / times :op0(N9 / 1) :op0(V18 / &) :op0(V19 / 𝑎) :op0(V20 / 𝑚) :op0(V21 / 𝑝))) :op2(O5 / minus :op0(N10 / 1)))))
                        :arg2 (s5 / string-entity
                              :value MATH 
 :math (V22 / 𝐵))))))"
B.45	"(p / prove-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (d / depend-01
            :polarity -
            :arg0 (s / string-entity
                  :value MATH 
 :math (M1 / L-5 :op0(F1 / sin :op0(V1 / 𝑥)) :op1(F2 / sin :op0(U1 / times :op0(N1 / 2) :op0(V2 / 𝑥))) :op2(F3 / sin :op0(U2 / times :op0(N2 / 3) :op0(V3 / 𝑥))) :op3(V4 / …) :op4(F4 / sin :op0(U3 / times :op0(V5 / 𝑛) :op0(V6 / 𝑥))))))
      :location (t / try-02
            :arg1 (ii / i))
      :arg1-of (c / cause-01
            :arg0 (k / know-01
                  :arg0 (w / we)
                  :arg1 (r / recommend-01
                        :polarity -
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (N3 / 0)
                              :domain (p2 / person
                                    :mod (c2 / country
                                          :name (n / name
                                                :op1 ""wronsekia"")))
                              :purpose (g / get-01
                                    :arg0 p2
                                    :arg1 (s3 / solution
                                          :mod (t2 / trivial))))
                        :arg0-of (c3 / cause-01
                              :arg1 (d2 / depend-01
                                    :polarity -
                                    :arg0 p2))))))"
B.46	"(a / and
      :op1 (s / suppose-01
            :arg0 (y / you)
            :arg1 (f / function-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝑓))
                  :arg2-of (s3 / satisfy-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / int :op0(U2 / times :op0(O2 / SUP :op0(V2 / 𝑥) :op1(V3 / 𝑘)) :op0(V4 / 𝑓) :op0(V5 / 𝑥) :op0(F1 / d :op0(V6 / 𝑥))) :op1(W1 / ) :op2(W2 / )) :op0(N1 / 0))))
                  :arg1-of (ii / integrate-01
                        :arg1-of (p / possible-01)
                        :mod (t / thing
                              :name (n / name
                                    :op1 ""lebesgue"")))))
      :op2 (p2 / prove-01
            :arg0 y
            :arg1 (s5 / string-entity
                  :value MATH 
 :math (O3 / form-seq :op0(U3 / eq :op0(V7 / 𝑓) :op0(U4 / times :op0(N2 / 0) :op0(T1 / \text) :op0(V8 / 𝑎))) :op1(V9 / 𝑒)))))"
B.47	"(p / prove-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / exist-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (V1 / 𝑞)
                  :arg0-of (c / cause-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U1 / equivalent :op0(U2 / times :op0(V2 / 𝑟) :op0(V3 / 𝑞)) :op0(O1 / rem :op0(N1 / 1) :op1(V4 / 𝑝))))))
            :prep-for (a / and
                  :op1 (s3 / string-entity
                        :value MATH 
 :math (V5 / 𝑝)
                        :mod (p2 / prime)
                        :arg1-of (g / give-14))
                  :op2 (s4 / string-entity
                        :value ""eqx400eqx""
                        :mod (e2 / each)))))"
B.48	"(m / multi-sentence
      :snt1 (t / try-01
            :arg0 (ii / i)
            :arg1 (s / show-01
                  :arg0 ii
                  :arg1 (t2 / thing
                        :arg1-of (f / follow-04
                              :arg2 (h / have-condition-91
                                    :arg1 (s2 / string-entity
                                          :value MATH 
 :math (O1 / geq :op0(O2 / SUP :op0(U1 / plus :op0(V1 / 𝑥) :op0(V2 / 𝑦)) :op1(V3 / 𝑘)) :op1(U2 / plus :op0(O3 / SUP :op0(V4 / 𝑥) :op1(V5 / 𝑘)) :op0(O4 / SUP :op0(V6 / 𝑦) :op1(V7 / 𝑘)))))
                                    :arg2 (s3 / string-entity
                                          :value MATH 
 :math (O5 / in :op0(V8 / 𝑘) :op1(U3 / times :op0(T1 / \mathbb) :op0(O6 / SUB :op0(V9 / 𝑅) :op1(O7 / geq :op0(W1 / ) :op1(N1 / 1)))))
                                          :mod (a / all))))))
            :snt2 (c / cause-01
                  :arg1 (t3 / try-01
                        :arg0 (ii2 / i)
                        :arg1 (t4 / thing
                              :quant (f2 / few))
                        :time (s4 / so)
                        :concession-of (s5 / seem-01
                              :arg1 (s6 / stick-01
                                    :arg1 (n / nothing)))))))"
B.50	"(s / series
      :mod (t / thing
            :name (n / name
                  :op1 MATH 
 :math (O1 / sum :op0(O2 / divide :op0(N1 / 1) :op1(O3 / SUP :op0(V1 / 𝑛) :op1(U1 / plus :op0(N2 / 2) :op0(F1 / cos :op0(V2 / 𝑛))))))))
      :arg1-of (d / differ-02))"
B.51	"(m / multi-sentence
      :snt1 (p / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑟) :op0(N1 / 0))) :op1(V2 / 𝑛)) :op1(U3 / times :op0(O5 / binomial :op0(U4 / plus :op0(V3 / 𝑛) :op0(V4 / 𝑟)) :op1(V5 / 𝑟)) :op0(O6 / divide :op0(N2 / 1) :op1(O7 / SUP :op0(N3 / 2) :op1(V6 / 𝑟))))) :op0(O8 / SUP :op0(N4 / 2) :op1(V7 / 𝑛))))
                  :arg2 (c / coefficient
                        :mod (e2 / equal-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U5 / plus :op0(U6 / times :op0(T1 / \binom) :op0(V8 / 𝑛) :op0(V9 / 𝑛)) :op0(U7 / times :op0(T2 / \binom) :op0(V10 / 𝑛)) :op0(U8 / times :op0(N5 / 1) :op0(V11 / 𝑛) :op0(O9 / divide :op0(N6 / 1) :op1(N7 / 2))) :op0(U9 / times :op0(T3 / \binom) :op0(V12 / 𝑛)) :op0(U10 / times :op0(N8 / 2) :op0(V13 / 𝑛) :op0(O10 / divide :op0(N9 / 1) :op1(O11 / SUP :op0(N10 / 2) :op1(N11 / 2)))) :op0(U11 / times :op0(T4 / \binom) :op0(V14 / 𝑛)) :op0(U12 / times :op0(N12 / 3) :op0(V15 / 𝑛) :op0(O12 / divide :op0(N13 / 1) :op1(O13 / SUP :op0(N14 / 2) :op1(N15 / 3)))) :op0(V16 / ⋯) :op0(U13 / times :op0(T5 / \binom) :op0(V17 / 𝑛)) :op0(U14 / times :op0(V18 / 𝑛) :op0(V19 / 𝑛) :op0(O14 / divide :op0(N16 / 1) :op1(O15 / SUP :op0(N17 / 2) :op1(V20 / 𝑛))))))
                              :arg2 (c2 / coefficient
                                    :mod (e3 / equal-01
                                          :arg1 (s3 / string-entity
                                                :value MATH 
 :math (O16 / SUP :op0(V21 / 𝑥) :op1(V22 / 𝑛)))))))))
      :snt2 (h / help-01
            :mode imperative
            :arg0 (y2 / you)
            :arg1 (s4 / solve-01
                  :arg0 (ii / i)
                  :arg1 (ii2 / it)
                  :arg2 (a / amr-unknown))
            :arg2 (ii3 / i)))"
B.52	"(m / multi-sentence
      :snt1 (h / have-trouble-04
            :arg0 (ii / i)
            :arg1 (s / start-01
                  :arg0 ii
                  :arg1 (p / part
                        :quant 2)))
      :snt2 (p2 / prove-01
            :li ""a""
            :arg1 (e / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O1 / in :op0(M1 / L-4 :op0(O2 / SUB :op0(V1 / 𝑛) :op1(N1 / 1)) :op1(O3 / SUB :op0(V2 / 𝑛) :op1(N2 / 2)) :op2(V3 / …) :op3(O4 / SUB :op0(V4 / 𝑛) :op1(V5 / 𝑘))) :op1(U1 / times :op0(T1 / \mathbb) :op0(V6 / 𝑁))))
                  :arg2 (a / at-least
                        :op1 (s3 / string-entity
                              :value MATH 
 :math (N3 / 2)))
                  :arg1-of (c / cause-01
                        :arg0 (e2 / equal-01
                              :polarity -
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(V7 / 𝑛) :op0(U3 / plus :op0(U4 / times :op0(O5 / SUB :op0(V8 / 𝑛) :op1(N4 / 1)) :op0(O6 / SUB :op0(V9 / 𝑛) :op1(N5 / 2)) :op0(V10 / …) :op0(O7 / SUB :op0(V11 / 𝑛) :op1(V12 / 𝑘))) :op0(N6 / 1))))
                              :arg2 (n / number
                                    :mod (a2 / any)
                                    :domain (s5 / string-entity
                                          :value MATH 
 :math (M2 / L-4 :op0(O8 / SUB :op0(V13 / 𝑛) :op1(N7 / 1)) :op1(O9 / SUB :op0(V14 / 𝑛) :op1(N8 / 2)) :op2(V15 / …) :op3(O10 / SUB :op0(V16 / 𝑛) :op1(V17 / 𝑘)))))))))
      :snt3 (p3 / prove-01
            :li ""b""
            :arg1 (l / lead-03
                  :arg0 (t / true-01
                        :arg1 (n2 / negative-03))
                  :arg2 (c2 / contradict-01))))"
B.53	"(m / multi-sentence
      :snt1 (t / this
            :condition (h / have-mod-91
                  :polarity -
                  :arg1 (a / and
                        :op1 (s / string-entity
                              :value MATH 
 :math (V1 / 𝐴))
                        :op2 (s2 / string-entity
                              :value MATH 
 :math (V2 / 𝐵)))
                  :arg2 (m2 / matrix
                        :mod (s3 / square))
                  :arg1-of (c / contrast-01
                        :arg2 (h2 / have-condition-91
                              :arg2 (r / restrict-01
                                    :arg0 (w / we)
                                    :arg1 (s4 / string-entity
                                          :value ""eqx501eqx""))))))
      :snt2 (p / prove-01
            :arg1 (t2 / this)
            :arg1-of (s5 / simple-02)
            :arg0-of (a2 / avoid-01
                  :arg1 (c2 / chase-01
                        :arg1 (e / entry)))
            :arg0-of (u / use-01
                  :arg1 (s6 / structure
                        :mod (s7 / space
                              :mod (v / vector))
                        :poss (t3 / transform-01
                              :arg1-of (l / linear-02)))
                  :arg1-of (s8 / simple-02))))"
B.54	"(m / multi-sentence
      :snt1 (o / or
            :op1 (t / tip-05
                  :arg2 (o2 / one
                        :mod (t2 / this))
                  :mod (a / amr-unknown))
            :op2 (s / solve-01
                  :arg2 o2
                  :mod (a2 / amr-unknown)))
      :snt2 (s2 / show-01
            :arg1 (p / possible-01
                  :polarity -
                  :arg1 (c / count-01
                        :arg1 (p2 / powerset
                              :mod (s3 / string-entity
                                    :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(V1 / p) :op2(E2 /  :op0(O2 / fragments) :op1(V2 / $) :op2(V3 / n) :op3(V4 / $$) :op3(U1 / eq) :op4(E3 /  :op0(O3 / fragments) :op1(V5 / $) :op2(V6 / s) :op3(V7 / |) :op4(T1 / sân) :op5(V8 / $$))))))))
            :manner (u / use-01
                  :arg1 (a3 / argument
                        :mod (d / diagonal)))))"
B.55	"(s / string-entity
      :value MATH 
 :math (U1 / eq :op0(O1 / divide :op0(N1 / 1) :op1(O2 / root :op0(O3 / minus :op0(N2 / 1)) :op1(N3 / 2))) :op0(O4 / root :op0(O5 / minus :op0(N4 / 1)) :op1(N5 / 2)))
      :polarity (a / amr-unknown))"
B.56	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (s / set
                  :consist-of (n / number
                        :arg1-of (n2 / natural-03))
                  :arg1-of (e / empty-02
                        :polarity -)
                  :domain (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝑆))))
      :snt2 (a / amr-choice
            :op1 (t / true-01
                  :arg1 (f / formula
                        :arg1-of (f2 / follow-04
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(O2 / exists) :op2(V2 / p) :op3(E2 /  :op0(O3 / fragments) :op1(V3 / $) :op2(T1 / \textpisprime) :op3(V4 / →) :op4(O4 / forall) :op5(V5 / x) :op6(T2 / \text) :op7(E3 /  :op0(O5 / fragments) :op1(V6 / $) :op2(T3 / xisprime) :op3(V7 / $$) :op8(V8 / $$)))))))
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (V9 / 𝑆)))
            :op2 (f3 / false
                  :domain f))
      :snt3 (c / contrast-01
            :arg1 (k / know-01
                  :arg0 (ii / i)
                  :arg1 (a2 / answer-01
                        :arg1 (q / question-01
                              :mod (t2 / this))))
            :arg2 (w / way
                  :manner-of (a3 / arrive-01
                        :arg4 (c2 / conclude-01)
                        :manner (u / use-01
                              :arg1 (s5 / system
                                    :mod (d / deduct-01)
                                    :mod (s6 / some))))
                  :arg1-of (h / have-degree-91
                        :arg2 (s7 / short-07
                              :arg1 w)
                        :arg3 (m2 / most)))))"
B.57	"(k / know-01
      :arg0 (ii / i)
      :arg1 (c / continue-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / SUP :op0(V1 / 𝑓) :op1(O2 / minus :op0(N1 / 1))))
            :location (s2 / string-entity
                  :value MATH 
 :math (U1 / times :op0(V2 / 𝑓) :op0(V3 / 𝐵))))
      :arg1-of (c2 / cause-01
            :arg0 (a / and
                  :op1 (e / equal-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (V4 / 𝐵)
                              :arg2-of (s4 / subset-01
                                    :arg1 (s5 / string-entity
                                          :value MATH 
 :math (U2 / times :op0(T1 / \mathbb) :op0(O3 / SUP :op0(V5 / 𝑅) :op1(V6 / 𝑛))))
                                    :arg1-of (c3 / compact-01))))
                  :op2 (e2 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (F1 / $##$ :op0(V7 / 𝑓) :op1(F2 / → :op0(V8 / 𝐵) :op1(U3 / times :op0(T2 / \mathbb) :op0(O4 / SUP :op0(V9 / 𝑅) :op1(V10 / 𝑚)))))
                              :arg2-of (f / function-01
                                    :arg1 (ii2 / inject-01
                                          :arg1-of (c4 / continue-01)
                                          :manner (e3 / equal-01
                                                :arg2 (o / one)))))
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math F1 ))))
      :arg1-of (t / true-01))"
B.58	"(m / multi-sentence
      :snt1 (e / exercise-01
            :ord (o / ordinal-entity
                  :value 1))
      :snt2 (p / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t / that))
      :snt3 (t2 / thank-01
            :arg0 (ii / i)
            :arg1 y))"
B.59	"(m / multi-sentence
      :snt1 (l / look-01
            :arg0 (ii / i)
            :arg1 (p / prove-01
                  :arg1 (t / thing
                        :arg1-of (s / state-01)
                        :mod (t2 / that))
                  :quant (m2 / multiple)))
      :snt2 (d / denote-01
            :arg0 (s2 / string-entity
                  :value MATH 
 :math (U1 / times :op0(V1 / italic-ϕ) :op0(V2 / 𝑛)))
            :arg1 (t3 / theorem
                  :mod (f / factorize-01
                        :arg1-of (u / unique-01))
                  :consist-of (a / and
                        :op1 (s3 / string-entity
                              :value MATH 
 :math (U2 / eq :op0(V3 / 𝑛) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / product) :op1(U3 / eq :op0(V4 / 𝑘) :op0(N1 / 1))) :op1(V5 / 𝑚)) :op1(O5 / SUP :op0(O6 / SUB :op0(V6 / 𝑝) :op1(V7 / 𝑘)) :op1(O7 / SUB :op0(V8 / 𝛼) :op1(V9 / 𝑘))))))
                        :op2 (s4 / string-entity
                              :value MATH 
 :math (U4 / eq :op0(V10 / 𝑑) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / product) :op1(U5 / eq :op0(V11 / 𝑘) :op0(N2 / 1))) :op1(V12 / 𝑚)) :op1(O12 / SUP :op0(O13 / SUB :op0(V13 / 𝑝) :op1(V14 / 𝑘)) :op1(O14 / SUB :op0(V15 / 𝛽) :op1(V16 / 𝑘))))))
                        :arg2-of (e / equal-01
                              :arg1 (s5 / string-entity
                                    :value ""eqx531eqx""))))
            :location (h / here))
      :snt3 (e2 / equal-01
            :arg1 (s6 / string-entity
                  :value ""eqx532eqx"")
            :arg2 (s7 / string-entity
                  :value ""eqx532eqx"")
            :location (h2 / here)))"
B.60	"(m / multi-sentence
      :snt1 (l / let-01
            :li ""q""
            :arg1 (a / and
                  :op1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(V1 / 𝑎) :op1(V2 / 𝑛)) :op0(U2 / times :op0(O2 / minus :op0(N1 / 1) :op1(O3 / divide :op0(N2 / 1) :op1(O4 / root :op0(N3 / 2) :op1(N4 / 2)))) :op0(V3 / …) :op0(O5 / minus :op0(N5 / 1) :op1(O6 / divide :op0(N6 / 1) :op1(O7 / root :op0(U3 / plus :op0(V4 / 𝑛) :op0(N7 / 1)) :op1(N8 / 2)))))))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (O8 / geq :op0(V5 / 𝑛) :op1(N9 / 1))))
                  :op2 (e2 / equal-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (O9 / limit :op0(O10 / SUB :op0(O11 / limit) :op1(F1 / → :op0(V6 / 𝑛) :op1(C1 / infinity))) :op1(O12 / SUB :op0(V7 / 𝑎) :op1(V8 / 𝑛))))
                        :arg2 (s4 / string-entity
                              :value MATH 
 :math (N10 / 1))))
            :snt2 (a2 / and
                  :op1 (e3 / exist-01
                        :polarity -
                        :arg1 (s5 / string-entity
                              :value MATH 
 :math (U4 / times :op0(U5 / times :op0(U6 / times :op0(O13 / minus :op0(N11 / 1) :op1(O14 / divide :op0(N12 / 1) :op1(O15 / root :op0(U7 / plus :op0(N13 / 1) :op0(N14 / 1)) :op1(N15 / 2)))) :op0(O16 / minus :op0(N16 / 1) :op1(O17 / divide :op0(N17 / 1) :op1(O18 / root :op0(U8 / plus :op0(N18 / 2) :op0(N19 / 1)) :op1(N20 / 2)))) :op0(O19 / minus :op0(N21 / 1) :op1(O20 / divide :op0(N22 / 1) :op1(O21 / root :op0(U9 / plus :op0(N23 / 3) :op0(N24 / 1)) :op1(N25 / 2)))) :op0(O22 / minus :op0(N26 / 1) :op1(O23 / divide :op0(N27 / 1) :op1(O24 / root :op0(U10 / plus :op0(N28 / 4) :op0(N29 / 1)) :op1(N30 / 2)))) :op0(O25 / minus :op0(N31 / 1) :op1(O26 / divide :op0(N32 / 1) :op1(O27 / root :op0(U11 / plus :op0(N33 / 5) :op0(N34 / 1)) :op1(N35 / 2)))) :op0(O28 / minus :op0(N36 / 1) :op1(O29 / divide :op0(N37 / 1) :op1(O30 / root :op0(U12 / plus :op0(N38 / 6) :op0(N39 / 1)) :op1(N40 / 2)))) :op0(O31 / minus :op0(N41 / 1) :op1(O32 / divide :op0(N42 / 1) :op1(O33 / root :op0(U13 / plus :op0(N43 / 7) :op0(N44 / 1)) :op1(N45 / 2)))) :op0(O34 / minus :op0(N46 / 1) :op1(O35 / divide :op0(N47 / 1) :op1(O36 / root :op0(U14 / plus :op0(N48 / 8) :op0(N49 / 1)) :op1(N50 / 2)))) :op0(V9 / …) :op0(V10 / …) :op0(V11 / …) :op0(O37 / minus :op0(N51 / 1) :op1(O38 / divide :op0(N52 / 1) :op1(O39 / root :op0(U15 / plus :op0(V12 / 𝑛) :op0(N53 / 1)) :op1(N54 / 2)))))))))
                  :op2 (e4 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (O40 / divide :op0(N55 / 1) :op1(O41 / root :op0(V13 / 𝜋) :op1(N56 / 2))))
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (N57 / 0)))
                  :op3 (e5 / equal-01
                        :arg1 (s8 / string-entity
                              :value MATH 
 :math (U16 / times :op0(N58 / 0.293) :op0(N59 / 0.423) :op0(N60 / 0.5) :op0(N61 / 0.553) :op0(N62 / 0.622) :op0(N63 / 0.647) :op0(N64 / 0.667) :op0(V14 / …)))
                        :arg2 (s9 / string-entity
                              :value ""0.009"")))
            :snt3 (a3 / approach-02
                  :arg0 (ii / i)
                  :arg1 (g / get-01
                        :polarity -
                        :arg0 ii
                        :arg1 (o / or
                              :op1 (d / direction
                                    :mod (p / particular))
                              :op2 (p2 / procedure
                                    :mod (a4 / any)))
                        :purpose (a5 / and
                              :op1 (s10 / simplify-01
                                    :arg0 ii
                                    :arg1 (s11 / string-entity
                                          :value MATH 
 :math (O42 / SUB :op0(V15 / 𝑎) :op1(V16 / 𝑛))))
                              :op2 (f / find-01
                                    :arg0 ii
                                    :arg1 (v / value
                                          :poss s11)))
                        :time (t / tend-01
                              :arg1 (v2 / variable
                                    :name (n / name
                                          :op1 ""n""))
                              :arg2 infinity)))))"
B.62	"(m / multi-sentence
      :snt1 (q / question-01
            :arg1 (a / and
                  :op1 (l / let-01
                        :arg1 (d / denote-01
                              :arg0 (s / string-entity
                                    :value MATH 
 :math (U1 / times :op0(T1 / \mathbb) :op0(V1 / 𝑄)))
                              :arg1 (s2 / set
                                    :consist-of (n / number
                                          :arg1-of (r / rational-02)))))
                  :op2 l
                  :arg1 (d2 / denote-01
                        :arg0 (s3 / string-entity
                              :value MATH 
 :math (U2 / times :op0(T2 / \mathbb) :op0(V2 / 𝑍)))
                        :arg1 (s4 / set
                              :consist-of (ii / integer)))))
      :mod (f / full)
      :location (h / here)
      :snt2 (p / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s5 / string-entity
                  :value MATH 
 :math (U3 / eq :op0(F1 / abs :op0(U4 / times :op0(T3 / \mathbb) :op0(V3 / 𝑄))) :op0(F2 / abs :op0(U5 / times :op0(T4 / \mathbb) :op0(V4 / 𝑍))))))
      :snt3 (t / think-01
            :arg0 (ii2 / i)
            :arg1 (p2 / possible-01
                  :arg1 (w / write-01
                        :arg1 (e / element
                              :mod (e2 / every)
                              :part-of (s6 / string-entity
                                    :value MATH 
 :math (U6 / times :op0(T5 / \mathbb) :op0(V5 / 𝑄))))
                        :arg3 (e3 / element
                              :mod (s7 / some)
                              :part-of (s8 / string-entity
                                    :value MATH 
 :math (U7 / times :op0(U8 / times :op0(U9 / times :op0(T6 / \mathbb) :op0(V6 / 𝑍) :op0(T7 / \mathbb) :op0(V7 / 𝑍))))))))
            :concession-of (k / know-01
                  :polarity -
                  :arg0 ii2
                  :arg1 (o / or
                        :op1 (p3 / prove-01
                              :arg0 ii2
                              :arg1 (b / bijection
                                    :domain s6))
                        :op2 (p4 / prove-01
                              :arg0 ii2
                              :arg1 s8
                              :mod (e4 / even)))
                  :mod (s9 / still))))"
B.63	"(m / multi-sentence
      :snt1 (g / give-01
            :arg1 (e / equal-01
                  :arg1 (e2 / equal-01
                        :arg1 (v / variable
                              :name (n / name
                                    :op1 MATH 
 :math (M1 / L-2 :op0(O1 / SUB :op0(V1 / 𝑛) :op1(N1 / 1)) :op1(O2 / SUB :op0(V2 / 𝑛) :op1(N2 / 2)))
                                    :op2 ""eqx"")
                              :mod (a / any)
                              :mod (p / positive))
                        :arg2 (d / divisor
                              :arg1-of (s / share-01
                                    :arg0 (t / they)
                                    :arg1-of (h / have-degree-91
                                          :arg2 (g2 / great)
                                          :arg3 (m2 / most)))))
                  :arg2 (e3 / equal-01
                        :arg1 (e4 / equal-01
                              :arg1 (e5 / equal-01
                                    :arg1 (v2 / variable
                                          :name (n2 / name
                                                :op1 MATH 
 :math (V3 / 𝑟)
                                                :op2 ""eqx"")
                                          :mod (p2 / positive))
                                    :arg2 (m3 / multiple
                                          :arg1-of (s2 / share-01
                                                :arg0 t
                                                :arg1-of (h2 / have-degree-91
                                                      :arg2 (c / common)
                                                      :arg3 (l / least)))))))
                  :arg2 e2
                  :condition (h3 / have-03
                        :arg0 (ii / i)
                        :arg1 (s3 / set
                              :consist-of (e6 / equal-01
                                    :arg1 (e7 / equal-01
                                          :arg1 (v3 / variable
                                                :name (n3 / name
                                                      :op1 MATH 
 :math (M2 / L-5 :op0(O3 / SUB :op0(V4 / 𝑛) :op1(N3 / 1)) :op1(O4 / SUB :op0(V5 / 𝑛) :op1(N4 / 2)) :op2(O5 / SUB :op0(V6 / 𝑛) :op1(N5 / 3)) :op3(V7 / …) :op4(O6 / SUB :op0(V8 / 𝑛) :op1(V9 / 𝑟)))
                                                      :op2 ""eqx""))
                                          :arg2 m3))))))
      :snt2 (t2 / truth-value
            :polarity-of (t3 / true-01
                  :arg1 (e8 / equal-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(T1 / \text) :op0(V10 / 𝑙) :op0(V11 / 𝑐) :op0(V12 / 𝑚) :op0(M3 / V-5 :op0(O7 / SUB :op0(V13 / 𝑛) :op1(N6 / 1)) :op1(O8 / SUB :op0(V14 / 𝑛) :op1(N7 / 2)) :op2(O9 / SUB :op0(V15 / 𝑛) :op1(N8 / 3)) :op3(V16 / …) :op4(O10 / SUB :op0(V17 / 𝑛) :op1(V18 / 𝑟)))) :op0(O11 / divide :op0(O12 / SUB :op0(O13 / SUP :op0(O14 / SUB :op0(O15 / product) :op1(U3 / eq :op0(V19 / 𝑖) :op0(N9 / 1))) :op1(V20 / 𝑟)) :op1(O16 / SUB :op0(V21 / 𝑛) :op1(V22 / 𝑖))) :op1(U4 / times :op0(V23 / 𝑔) :op0(V24 / 𝑐) :op0(V25 / 𝑑) :op0(M4 / V-5 :op0(O17 / SUB :op0(V26 / 𝑛) :op1(N10 / 1)) :op1(U5 / times :op0(V27 / 𝑛) :op0(N11 / 2)) :op2(O18 / SUB :op0(V28 / 𝑛) :op1(N12 / 3)) :op3(V29 / …) :op4(O19 / SUB :op0(V30 / 𝑛) :op1(V31 / 𝑟)))))))))
            :arg1-of (f / feel-02
                  :arg0 ii
                  :arg1-of (c2 / contrast-01
                        :arg2 (s5 / struggle-02
                              :arg0 ii
                              :arg1 (g3 / get-04
                                    :arg0 ii
                                    :arg1 (h4 / handle-01
                                          :arg0 ii
                                          :arg1 (r / relation-03))))))))"
B.64	"(m / multi-sentence
      :snt1 (s / suppose-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (c / continue-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (F1 / $##$ :op0(V1 / 𝑓) :op1(F2 / → :op0(O1 / interval$C-C$$ :op0(V2 / 𝑎) :op1(V3 / 𝑏)) :op1(U1 / times :op0(T1 / \mathbb) :op0(V4 / 𝑅))))))
                  :op2 (e / equal-01
                        :arg2 MATH 
 :math (O2 / subset :op0(U2 / times :op0(V5 / 𝑓) :op0(O3 / interval$C-C$$ :op0(V6 / 𝑎) :op1(V7 / 𝑏))) :op1(O4 / interval$C-C$$ :op0(V8 / 𝑎) :op1(V9 / 𝑏))))))
      :snt2 (p / prove-01
            :mode imperative
            :arg0 (y2 / you)
            :arg1 (e2 / exist-01
                  :arg1 (p2 / point
                        :name (n / name
                              :op1 MATH 
 :math (O5 / in :op0(V10 / 𝑐) :op1(O6 / interval$C-C$$ :op0(V11 / 𝑎) :op1(V12 / 𝑏))))
                        :arg0-of (s3 / satisfy-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(U4 / times :op0(V13 / 𝑓) :op0(V14 / 𝑐)) :op0(V15 / 𝑐))))))))"
B.65	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (s / show-01
                  :arg0 (w / we)
                  :arg1 (e / equal-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (O1 / leq :op0(U1 / times :op0(O2 / SUP :op0(V1 / 𝑒) :op1(O3 / minus :op0(U2 / times :op0(N1 / 2) :op0(V2 / 𝜆) :op0(V3 / 𝑡) :op0(O4 / SUP :op0(V4 / 𝜆) :op1(N2 / 2)))))) :op1(U3 / times :op0(O5 / divide :op0(N3 / 1) :op1(U4 / times :op0(O6 / SUP :op0(V5 / 𝑒) :op1(N4 / 2)) :op0(O7 / SUP :op0(V6 / 𝑡) :op1(N5 / 2)) :op0(T1 / \tag) :op0(N6 / 1))))))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (O8 / geq :op0(M1 / L-2 :op0(V7 / 𝜆) :op1(V8 / 𝑡)) :op1(N7 / 0))
                              :mod (a / all)))
                  :manner (a2 / amr-unknown)))
      :snt2 (y / yield-01
            :arg0 (a3 / apply-02
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (F1 / ln))
                  :arg2 (s5 / side
                        :mod (b / both)))
            :arg1 (r / recommend-01
                  :arg1 (e2 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (N8 / 1))
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (O9 / leq :op0(U5 / times :op0(V9 / 𝑡) :op0(V10 / 𝜆)) :op1(U6 / times :op0(O10 / SUP :op0(V11 / 𝑒) :op1(O11 / minus :op0(U7 / times :op0(V12 / 𝑡) :op0(V13 / 𝜆)) :op1(N9 / 1))) :op0(T2 / \tag) :op0(N10 / 2)))))))
      :snt3 (ii / infer-01
            :arg1 (h / have-condition-91
                  :arg1 (s8 / suffice-01
                        :arg0 (m2 / mistake-02
                              :polarity -
                              :arg0 (ii2 / i))
                        :arg1 (s9 / show-01
                              :arg0 ii2
                              :arg1 (s10 / string-entity
                                    :value MATH 
 :math (O12 / leq :op0(V14 / 𝑥) :op1(O13 / SUP :op0(V15 / 𝑒) :op1(O14 / minus :op0(V16 / 𝑥) :op1(N11 / 1))))
                                    :mod (a4 / all))))
                  :arg2 m2)))"
B.66	"(p / possible-01
      :arg1 (j / justify-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(U2 / times :op0(O2 / SUP :op0(V1 / 𝑥) :op1(V2 / 𝑇)) :op0(V3 / 𝐴) :op0(V4 / ℎ)) :op1(V5 / 𝑇)) :op0(U3 / times :op0(O3 / SUP :op0(V6 / ℎ) :op1(V7 / 𝑇)) :op0(O4 / SUP :op0(V8 / 𝐴) :op1(V9 / 𝑇)) :op0(V10 / 𝑥)))))
      :polarity (a / amr-unknown)
      :condition (a2 / and
            :op1 (s2 / string-entity
                  :value MATH 
 :math (O5 / in :op0(M1 / L-2 :op0(V11 / 𝑥) :op1(V12 / ℎ)) :op1(U4 / times :op0(T1 / \mathbb) :op0(O6 / SUP :op0(V13 / 𝑅) :op1(V14 / 𝑑)))))
            :op2 (s3 / string-entity
                  :value MATH 
 :math (O7 / in :op0(V15 / 𝐴) :op1(U5 / times :op0(T2 / \mathbb) :op0(O8 / SUP :op0(V16 / 𝑅) :op1(U6 / times :op0(V17 / 𝑑) :op0(V18 / 𝑑))))))))"
B.67	"(m / multi-sentence
      :snt1 (p / prove-01
            :arg0 (a / and
                  :op1 (m2 / matrix
                        :mod (s / string-entity
                              :value MATH 
 :math (U1 / times :op0(V1 / 𝑘) :op0(V2 / 𝑘))))
                  :op2 (m3 / matrix
                        :mod (s2 / string-entity
                              :value MATH 
 :math (U2 / times :op0(V3 / 𝑘) :op0(V4 / 𝑙))))
                  :op3 (m4 / matrix
                        :mod (s3 / string-entity
                              :value MATH 
 :math (U3 / times :op0(V5 / 𝑙) :op0(V6 / 𝑙)))))
            :arg1 (e / equal-01
                  :arg1 (m5 / matrix
                        :name (n / name
                              :op1 MATH 
 :math (U4 / eq :op0(M1 / L-3 :op0(F1 / det :op0(U5 / times :op0(T1 / {bmatrix}) :op0(V7 / 𝐴) :op0(V8 / &) :op0(V9 / 𝑎) :op0(V10 / 𝑚) :op0(V11 / 𝑝))) :op1(U6 / times :op0(V12 / 𝐵) :op0(V13 / 𝑂) :op0(V14 / &) :op0(V15 / 𝑎) :op0(V16 / 𝑚) :op0(V17 / 𝑝)) :op2(V18 / 𝐶)) :op0(F2 / det :op0(U7 / times :op0(V19 / 𝐴) :op0(F3 / det :op0(V20 / 𝐶)))))
                              :op2 ""o""))
                  :arg2 (e2 / element
                        :mod (a2 / all))
                  :arg3 (z / zero))
            :condition a)
      :snt2 (c / contrast-01
            :arg1 (k / know-01
                  :arg0 (ii / i)
                  :arg1 (r / rule
                        :quant (s4 / some)
                        :purpose (c2 / calculate-01
                              :arg1 (t / thing
                                    :arg0-of (d / determine-01)))))
            :arg2 (k2 / know-01
                  :polarity -
                  :arg0 ii
                  :arg1 t
                  :manner-of (b / begin-01
                        :arg0 ii
                        :arg1 (q / question-01
                              :mod (t2 / this))))))"
B.68	"(m / multi-sentence
      :snt1 (p / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (p2 / possible-01
                  :arg1 (d / divide-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (U1 / plus :op0(O1 / SUP :op0(V1 / 𝑎) :op1(V2 / 𝑛)) :op0(N1 / 1)))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (U2 / plus :op0(V3 / 𝑎) :op0(N2 / 1))))
                  :condition (o / odd
                        :domain (s3 / string-entity
                              :value MATH 
 :math (V4 / 𝑛)))))
      :snt2 (k / know-01
            :arg0 (w / we)
            :arg1 (p3 / possible-01
                  :polarity -
                  :arg1 (a / and
                        :op1 (e / equal-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (V5 / 𝑎))
                              :arg2 (s5 / string-entity
                                    :value MATH 
 :math (O2 / minus :op0(N3 / 1))))
                        :op2 (e2 / equal-01
                              :arg1 (s6 / string-entity
                                    :value MATH 
 :math (O3 / in :op0(V6 / 𝑛) :op1(U3 / times :op0(T1 / \mathbb) :op0(V7 / 𝑁))))
                              :arg2 (s7 / string-entity
                                    :value MATH 
 :math (U4 / plus :op0(U5 / times :op0(N4 / 2) :op0(V8 / 𝑘)) :op0(N5 / 1))))))
            :arg1-of (c / cause-01
                  :arg0 (o2 / obligate-01
                        :arg1 (o3 / odd
                              :domain (s8 / string-entity
                                    :value MATH 
 :math (V9 / 𝑛)))))))"
B.69	"(m / multi-sentence
      :snt1 (a / assign-01
            :arg1 (p / problem
                  :mod (h / homework)
                  :mod (t / this)
                  :example (a2 / and
                        :op1 (s / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / binomial :op0(V1 / 𝑠) :op1(V2 / 𝑠)) :op0(O2 / binomial :op0(U3 / plus :op0(V3 / 𝑠) :op0(N1 / 1)) :op1(V4 / 𝑠)) :op0(V5 / …) :op0(O3 / binomial :op0(V6 / 𝑛) :op1(V7 / 𝑠))) :op0(O4 / binomial :op0(U4 / plus :op0(V8 / 𝑛) :op0(N2 / 1)) :op1(U5 / plus :op0(V9 / 𝑠) :op0(N3 / 1)))))
                        :op2 (s2 / string-entity
                              :value MATH 
 :math (O5 / geq :op0(V10 / 𝑛) :op1(V11 / 𝑠)))
                        :mod (a3 / all)))
            :arg2 (ii / i))
      :snt2 (a4 / and
            :op1 (t2 / try-01
                  :arg0 (ii2 / i)
                  :arg1 (e / email-01
                        :arg0 ii2
                        :arg2 (a5 / and
                              :op1 (p2 / person
                                    :arg0-of (h2 / have-rel-role-91
                                          :arg1 ii2
                                          :arg2 (p3 / professor)))
                              :op2 (p4 / person
                                    :arg0-of (h3 / have-rel-role-91
                                          :arg1 ii2
                                          :arg2 (t3 / ta))))))
            :op2 (s3 / seem-01
                  :arg1 (c / contradict-01
                        :arg0 (e2 / explain-01
                              :arg0 a5))))
      :snt3 (r / respond-01
            :arg0 (p5 / person
                  :arg0-of (h4 / have-rel-role-91
                        :arg1 ii2
                        :arg2 (p6 / professor)))
            :arg2 (s4 / say-01
                  :arg0 p5
                  :arg1 (s5 / state-01
                        :arg1 (c2 / correct-02
                              :arg1 (f / formula)
                              :arg1-of (p7 / prove-01
                                    :arg0 ii2
                                    :arg1-of (n / need-01
                                          :arg0 ii2))
                              :beneficiary (s6 / string-entity
                                    :value ""eqx639eqx""))))))"
B.70	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (s / string-entity
                        :value MATH 
 :math (O1 / in :op0(V1 / 𝑙) :op1(U1 / times :op0(T1 / \mathbb) :op0(V2 / 𝑍))))
                  :op2 (s2 / string-entity
                        :value MATH 
 :math (O2 / in :op0(V3 / 𝑁) :op1(U2 / times :op0(T2 / \mathbb) :op0(V4 / 𝑁))))))
      :snt2 (n / need-01
            :arg0 (ii / i)
            :arg1 (p / prove-01
                  :arg0 ii
                  :arg1 (t / thing
                        :arg1-of (f / follow-04)
                        :consist-of (a2 / and
                              :op1 (t2 / try-01
                                    :arg0 (ii2 / i)
                                    :arg1 (u / use-01
                                          :arg0 ii2
                                          :arg1 (f2 / formula
                                                :mod (p2 / person
                                                      :name (n2 / name
                                                            :op1 ""euler"")))))
                              :op2 (s3 / sum-01
                                    :arg0 ii2
                                    :arg1 (t3 / term
                                          :ord (o / ordinal-entity
                                                :value 1)
                                          :mod (s4 / string-entity
                                                :value MATH 
 :math (V5 / 𝑁))
                                          :part-of (t4 / theorem
                                                :mod (g / geometry)
                                                :arg1-of (g2 / get-02
                                                      :arg0 ii2)))
                                    :time (t5 / then))
                              :concession-of (w / work-09
                                    :polarity -
                                    :arg1 f2)))))
      :snt3 (ii3 / idea
            :polarity (a3 / amr-unknown)
            :mod (a4 / any)))"
B.71	"(m / multi-sentence
      :snt1 (s / show-01
            :arg0 (ii / i)
            :arg1 (e / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O1 / form-seq :op0(U1 / plus :op0(O2 / SUP :op0(N1 / 1) :op1(N2 / 2)) :op0(O3 / SUP :op0(N3 / 2) :op1(N4 / 2)) :op0(V1 / …)) :op1(U2 / eq :op0(U3 / plus :op0(O4 / SUP :op0(V2 / 𝑛) :op1(N5 / 2))) :op0(O5 / divide :op0(U4 / times :op0(V3 / 𝑛) :op0(U5 / plus :op0(V4 / 𝑛) :op0(N6 / 1)) :op0(U6 / plus :op0(U7 / times :op0(N7 / 2) :op0(V5 / 𝑛)) :op0(N8 / 1))) :op1(N9 / 6)))))
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (U8 / eq :op0(U9 / times :op0(V6 / 𝑅) :op0(V7 / 𝐻) :op0(O6 / SUB :op0(V8 / 𝑆) :op1(U10 / plus :op0(V9 / 𝑝) :op0(N10 / 1)))) :op0(U11 / plus :op0(U12 / times :op0(V10 / 𝑅) :op0(V11 / 𝐻) :op0(O7 / SUB :op0(V12 / 𝑆) :op1(V13 / 𝑝))) :op0(O8 / SUP :op0(U13 / plus :op0(V14 / 𝑝) :op0(N11 / 1)) :op1(N12 / 2)))))
                  :arg1-of (c / cause-01
                        :arg0 (n / need-01
                              :arg0 ii
                              :arg1 (r / rewrite-01
                                    :arg0 ii
                                    :arg1 (s4 / string-entity
                                          :value MATH 
 :math (U14 / eq :op0(U15 / times :op0(V15 / 𝑅) :op0(V16 / 𝐻) :op0(O9 / SUB :op0(V17 / 𝑆) :op1(U16 / plus :op0(V18 / 𝑝) :op0(N13 / 1)))) :op0(O10 / divide :op0(U17 / times :op0(U18 / plus :op0(V19 / 𝑝) :op0(N14 / 1)) :op0(U19 / plus :op0(U20 / plus :op0(V20 / 𝑝) :op0(N15 / 1) :op0(N16 / 1))) :op0(U21 / plus :op0(U22 / times :op0(N17 / 2) :op0(U23 / plus :op0(V21 / 𝑝) :op0(N18 / 1) :op0(N19 / 1))))) :op1(N20 / 6))))
                                    :purpose (e2 / equal-01
                                          :arg1 s4
                                          :arg2 (s5 / string-entity
                                                :value MATH 
 :math (U24 / plus :op0(O11 / divide :op0(U25 / times :op0(V22 / 𝑝) :op0(U26 / plus :op0(V23 / 𝑝) :op0(N21 / 1)) :op0(U27 / plus :op0(U28 / times :op0(N22 / 2) :op0(V24 / 𝑝)) :op0(N23 / 1))) :op1(N24 / 6)) :op0(O12 / SUP :op0(U29 / plus :op0(V25 / 𝑝) :op0(N25 / 1)) :op1(N26 / 2)))))))))
            :instrument (ii2 / induct-02
                  :arg0 ii)
            :arg1-of (a / attempt-01
                  :arg0 ii)
            :arg1-of (m2 / mean-01
                  :arg2 (c2 / case-04
                        :arg1 (e3 / equal-01
                              :arg1 (n2 / n)
                              :arg2 (a2 / and
                                    :op1 (s6 / string-entity
                                          :value MATH 
 :math (U30 / eq :op0(U31 / times :op0(V26 / 𝐿) :op0(V27 / 𝐻) :op0(O13 / SUB :op0(V28 / 𝑆) :op1(V29 / 𝑝))) :op0(U32 / plus :op0(O14 / SUP :op0(N27 / 1) :op1(N28 / 2)) :op0(O15 / SUP :op0(N29 / 2) :op1(N30 / 2)) :op0(V30 / …) :op0(O16 / SUP :op0(V31 / 𝑝) :op1(N31 / 2)))))
                                    :op2 (s7 / string-entity
                                          :value MATH 
 :math (U33 / eq :op0(U34 / times :op0(V32 / 𝑅) :op0(V33 / 𝐻) :op0(O17 / SUB :op0(V34 / 𝑆) :op1(V35 / 𝑝))) :op0(O18 / divide :op0(U35 / times :op0(V36 / 𝑝) :op0(U36 / plus :op0(V37 / 𝑝) :op0(N32 / 1)) :op0(U37 / plus :op0(U38 / times :op0(N33 / 2) :op0(V38 / 𝑝)) :op0(N34 / 1))) :op1(N35 / 6))))))
                        :arg1-of (m3 / mean-01
                              :arg2 (c3 / case-04
                                    :arg1 (e4 / equal-01
                                          :arg1 n2)
                                    :arg2 (a3 / and
                                          :op1 (s8 / string-entity
                                                :value MATH 
 :math (O19 / form-seq :op0(U39 / eq :op0(U40 / times :op0(V39 / 𝐿) :op0(V40 / 𝐻) :op0(O20 / SUB :op0(V41 / 𝑆) :op1(U41 / plus :op0(V42 / 𝑝) :op0(N36 / 1)))) :op0(U42 / plus :op0(O21 / SUP :op0(N37 / 1) :op1(N38 / 2)) :op0(O22 / SUP :op0(N39 / 2) :op1(N40 / 2)) :op0(V43 / …))) :op1(U43 / plus :op0(U44 / plus :op0(O23 / SUP :op0(V44 / 𝑝) :op1(N41 / 2)) :op0(O24 / SUP :op0(U45 / plus :op0(V45 / 𝑝) :op0(N42 / 1)) :op1(N43 / 2))))))
                                          :op2 (s9 / string-entity
                                                :value MATH 
 :math (U46 / eq :op0(U47 / times :op0(V46 / 𝑅) :op0(V47 / 𝐻) :op0(O25 / SUB :op0(V48 / 𝑆) :op1(U48 / plus :op0(V49 / 𝑝) :op0(N44 / 1)))) :op0(O26 / divide :op0(U49 / times :op0(U50 / plus :op0(V50 / 𝑝) :op0(N45 / 1)) :op0(U51 / plus :op0(U52 / plus :op0(V51 / 𝑝) :op0(N46 / 1) :op0(N47 / 1))) :op0(U53 / plus :op0(U54 / times :op0(N48 / 2) :op0(U55 / plus :op0(V52 / 𝑝) :op0(N49 / 1) :op0(N50 / 1))))) :op1(N51 / 6)))))))
                        :arg1-of (m4 / mean-01
                              :arg2 (c4 / case-04
                                    :arg1 (e5 / equal-01
                                          :arg1 n2
                                          :arg2 s8)))
                        :arg1-of (m5 / mean-01
                              :arg2 (c5 / case-04
                                    :arg1 e5
                                    :arg1 n2
                                    :arg2 s9))))))"
B.73	"(m / multi-sentence
      :snt1 (d / doubt-01
            :arg0 (ii / i)
            :arg1 (t / this)
            :topic (d2 / demonstrate-01)
            :arg1-of (c / clarify-10
                  :arg0 (s / someone)
                  :arg1-of (p / possible-01)
                  :arg1-of (h / hope-01
                        :arg0 ii)))
      :snt2 (p2 / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (e / equal-01
                  :arg1-of (f / follow-01)))
      :snt3 (a / and
            :op1 (u / use-01
                  :arg0 (w / we)
                  :arg1 e)
            :op2 (c2 / call-01
                  :arg0 w
                  :arg1 e
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝑃))))
      :snt4 (s3 / string-entity
            :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(O1 / SUP :op0(U3 / plus :op0(N1 / 1) :op0(V2 / 𝑥)) :op1(V3 / 𝑛)) :op0(O2 / SUP :op0(U4 / plus :op0(N2 / 1) :op0(V4 / 𝑥)) :op1(V5 / 𝑛))) :op0(O3 / SUP :op0(U5 / plus :op0(N3 / 1) :op0(V6 / 𝑥)) :op1(U6 / times :op0(N4 / 2) :op0(V7 / 𝑛))))
            :polarity (a2 / amr-unknown)))"
B.74	"(m / multi-sentence
      :snt1 (s / show-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (e / equal-01
                  :arg1 (c / contrast-01
                        :arg1 (e2 / equal-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (F1 / $##$ :op0(V1 / 𝑓) :op1(F2 / → :op0(O1 / interval$O-O$$ :op0(N1 / 0) :op1(C1 / infinity)) :op1(U1 / times :op0(T1 / \mathbb) :op0(V2 / 𝑅)))))
                              :arg2 (ii / interval
                                    :mod (s3 / string-entity
                                          :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V3 / 𝑓) :op0(V4 / 𝑥)) :op0(U4 / plus :op0(V5 / 𝑥) :op0(U5 / times :op0(T2 / \dfrac) :op0(N2 / 1) :op0(V6 / 𝑥)))))))
                        :arg2 (ii2 / interval
                              :mod (s4 / string-entity
                                    :value MATH 
 :math (O2 / interval$C-O$$ :op0(N3 / 2) :op1(C2 / infinity)))))))
      :snt2 (e3 / equal-01
            :arg1 (s5 / string-entity
                  :value MATH 
 :math (U6 / eq :op0(V7 / 𝑥) :op0(N4 / 1)))
            :arg2 (ii3 / interval
                  :mod (s6 / string-entity
                        :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(V8 / 𝑓) :op0(N5 / 1)) :op0(N6 / 2))))
            :condition (s7 / string-entity
                  :value MATH 
 :math U7 )))"
B.75	"(m / multi-sentence
      :snt1 (k / know-01
            :polarity -
            :arg0 (ii / i)
            :arg1 (t / thing
                  :manner-of (s / show-01
                        :arg0 ii
                        :arg1 (e / equal-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (V1 / 𝑚))
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V2 / 𝑢) :op1(C1 / infinity))) :op1(O4 / divide :op0(O5 / SUP :op0(V3 / 𝑢) :op1(V4 / 𝑚)) :op1(O6 / SUP :op0(V5 / 𝑒) :op1(V6 / 𝑢)))) :op0(N1 / 0)))
                              :arg1-of (e2 / equal-01
                                    :arg2 (a / and
                                          :op1 (s4 / string-entity
                                                :value MATH 
 :math (O7 / SUP :op0(V7 / 𝑒) :op1(V8 / 𝑢)))
                                          :op2 (s5 / string-entity
                                                :value MATH 
 :math (U2 / times :op0(V9 / &) :op0(V10 / 𝑔) :op0(V11 / 𝑡)))
                                          :op3 (s6 / string-entity
                                                :value MATH 
 :math (O8 / divide :op0(O9 / SUP :op0(V12 / 𝑢) :op1(U3 / plus :op0(V13 / 𝑚) :op0(N2 / 1))) :op1(O10 / factorial :op0(U4 / plus :op0(V14 / 𝑚) :op0(N3 / 1))))))
                                    :mod (e3 / each))))))
      :snt2 (c / contrast-01
            :arg1 (s7 / start-01
                  :arg0 (ii2 / i)
                  :arg2 (s8 / string-entity
                        :value MATH 
 :math V1 )
                  :condition (l / look-01
                        :arg0 ii2
                        :arg1 (t2 / thing
                              :arg2-of (s9 / solve-01))))
            :arg2 (s10 / sure-02
                  :polarity -
                  :arg0 ii2
                  :arg1 (t3 / thing
                        :manner-of (s11 / step-01
                              :arg4 (t4 / this)
                              :mod (l2 / logical))))))"
B.76	"(m / multi-sentence
      :snt1 (p / problem
            :arg1-of (f / follow-04)
            :consist-of (l / let-01
                  :mode imperative
                  :arg0 (y / you)
                  :arg1 (s / string-entity
                        :value ""eqx703eqx""
                        :arg2-of (ii / include-91
                              :arg1 (a / and
                                    :op1 (s2 / string-entity
                                          :value MATH 
 :math (O1 / in :op0(V1 / 𝑎) :op1(U1 / times :op0(T1 / \mathbb) :op0(V2 / 𝑍))))
                                    :op2 (s3 / string-entity
                                          :value MATH 
 :math (O2 / in :op0(V3 / 𝑏) :op1(O3 / minus :op0(U2 / times :op0(T2 / \mathbb) :op0(V4 / 𝑍)) :op1(M1 / S-1 :op0(N1 / 0))))))))))
      :snt2 (h / have-concession-91
            :arg1 (a2 / attempt-01
                  :arg0 (ii2 / i)
                  :arg1 (s4 / something
                        :example (l2 / let-01
                              :mode imperative
                              :arg0 (y2 / you)
                              :arg1 (c / consist-01
                                    :arg1 (s5 / string-entity
                                          :value MATH 
 :math (U3 / eq :op0(M2 / S-1 :op0(O4 / SUB :op0(V5 / 𝑝) :op1(V6 / 𝑘))) :op0(M3 / S-4 :op0(N2 / 2) :op1(N3 / 3) :op2(N4 / 5) :op3(V7 / …))))
                                    :arg2 (s6 / set
                                          :consist-of (p2 / prime))))))
            :arg2 (h2 / have-03
                  :arg0 (w / we)
                  :arg1 (c2 / collect-01
                        :arg1 s6
                        :mod (s7 / such)
                        :arg2-of (ii3 / include-91
                              :arg1 (a3 / and
                                    :op1 (s8 / string-entity
                                          :value MATH 
 :math (O5 / conditional-set :op0(U4 / plus :op0(O6 / SUB :op0(V8 / 𝑎) :op1(V9 / 𝑖)) :op0(U5 / times :op0(O7 / SUB :op0(V10 / 𝑏) :op1(V11 / 𝑖)) :op0(T3 / \mathbb) :op0(V12 / 𝑍))) :op1(O8 / in :op0(V13 / 𝑖) :op1(U6 / times :op0(T4 / \mathbb) :op0(V14 / 𝑁)))))
                                    :op2 (s9 / string-entity
                                          :value MATH 
 :math (U7 / eq :op0(U8 / union :op0(O9 / SUB :op0(U9 / union) :op1(O10 / in :op0(V15 / 𝑖) :op1(U10 / times :op0(T5 / \mathbb) :op0(V16 / 𝑁)))) :op1(U11 / plus :op0(O11 / SUB :op0(V17 / 𝑎) :op1(V18 / 𝑖)) :op0(U12 / times :op0(O12 / SUB :op0(V19 / 𝑏) :op1(V20 / 𝑖)) :op0(T6 / \mathbb) :op0(V21 / 𝑍)))) :op0(U13 / times :op0(T7 / \mathbb) :op0(V22 / 𝑍)))))))))
      :snt3 (s10 / show-01
            :mode imperative
            :arg0 (y3 / you)
            :arg1 (t / truth-value
                  :polarity-of (p3 / possible-01
                        :arg1 (e / extract-01
                              :arg1 (s11 / string-entity
                                    :value MATH 
 :math (O13 / subset :op0(V23 / 𝐼) :op1(U14 / times :op0(T8 / \mathbb) :op0(V24 / 𝑁)))
                                    :arg2-of (s12 / satisfy-01))
                              :time (a4 / always)))))
      :snt4 (s13 / seem-01
            :arg1 (f2 / forget-01
                  :arg0 (ii4 / i)
                  :arg1 (t2 / thing
                        :quant (l3 / lot)
                        :arg1-of (ii5 / include-91
                              :arg2 (a5 / algebra
                                    :poss ii4
                                    :mod (e2 / elementary))))
                  :arg2-of (f3 / fortunate-01
                        :polarity -))))"
B.77	"(m / multi-sentence
      :snt1 (s / show-01
            :arg1 (c / consequence-03
                  :arg1 (l / law
                        :mod (d / distributive))
                  :arg2 (r / relation-03
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(O1 / minus :op0(N1 / 1)) :op0(O2 / minus :op0(N2 / 1))) :op0(N3 / 1))))))
      :snt2 (p / problem
            :ord (o / ordinal-entity
                  :value 1)
            :domain (q / question-01
                  :mod (t / this))
            :source (p2 / publication-91
                  :arg0 (p3 / person
                        :name (n / name
                              :op1 ""andre""
                              :op2 ""weil""))
                  :arg1 (b / book
                        :name n
                        :op1 ""number""
                        :op2 ""theory""
                        :op3 ""for""
                        :op4 ""beginners""))))"
B.79	"(m / multi-sentence
      :snt1 (u / use-01
            :arg0 (p / person
                  :name (n / name
                        :op1 ""rudin"")
                  :location (p2 / publication
                        :name (n2 / name
                              :op1 ""real""
                              :op2 ""and""
                              :op3 ""complex""
                              :op4 ""analysis"")))
            :arg1 (t / this)
            :arg2 (p3 / prove-01
                  :arg0 p
                  :arg1 (s / string-entity
                        :value MATH 
 :math (O1 / leq :op0(F1 / abs :op0(O2 / divide :op0(O3 / minus :op0(O4 / SUP :op0(V1 / 𝑒) :op1(O5 / minus :op0(U1 / times :op0(V2 / 𝑖) :op0(V3 / 𝑥) :op0(V4 / 𝑢)) :op1(N1 / 1)))) :op1(V5 / 𝑢))) :op1(F2 / abs :op0(V6 / 𝑥)))
                        :prep-for (s2 / string-entity
                              :value MATH 
 :math (U2 / neq :op0(V7 / 𝑢) :op0(N2 / 0))
                              :mod (a / all)
                              :arg1-of (r / real-04)))
                  :arg1-of (n3 / near-02
                        :arg2 (b / begin-01
                              :arg1 (c / chapter
                                    :mod 9)))))
      :snt2 (c2 / cause-01
            :arg0 (a2 / amr-unknown)
            :arg1 (t2 / true-01
                  :arg1 (t3 / this)))
      :snt3 (b2 / believe-01
            :arg0 (ii / i)
            :arg1 (r2 / real-04
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (V8 / 𝑥))))
      :arg1-of (e / edit-01))"
B.80	"(m / multi-sentence
      :snt1 (s / start-out-05
            :arg0 (y / you)
            :mod (j / just)
            :manner (e / element
                  :arg1-of (h / have-quant-91
                        :arg3 (l / least))))
      :snt2 (a / and
            :op1 (c / come-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (M1 / L-10 :op0(C1 / emptyset) :op1(M2 / S-1 :op0(N1 / 1)) :op2(M3 / S-1 :op0(N2 / 2)) :op3(M4 / S-2 :op0(N3 / 1) :op1(N4 / 2)) :op4(M5 / S-1 :op0(N5 / 3)) :op5(M6 / S-2 :op0(N6 / 1) :op1(N7 / 3)) :op6(M7 / S-2 :op0(N8 / 2) :op1(N9 / 3)) :op7(M8 / S-3 :op0(N10 / 1) :op1(N11 / 2) :op2(N12 / 3)) :op8(M9 / S-1 :op0(N13 / 4)) :op9(V1 / …)))
                  :ord (o / ordinal-entity
                        :value 1))
            :op2 (c2 / come-01
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (M10 / S-1 :op0(N14 / 1)))
                  :time (t / then))
            :arg1-of (w / word-01
                  :mod (o2 / other))))"
B.81	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (s / set
                  :mod (ii / infinite)
                  :domain (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝑀))))
      :snt2 (l2 / law
            :name (n / name
                  :op1 ""proposition""
                  :op2 1))
      :snt3 (e / exist-01
            :arg1 (ii2 / inject-01
                  :source (s3 / string-entity
                        :value MATH 
 :math (M1 / S-3 :op0(N1 / 1) :op1(V2 / ⋯) :op2(V3 / 𝑛)))
                  :destination (s4 / string-entity
                        :value MATH 
 :math (V4 / 𝑀)))
            :condition (s5 / string-entity
                  :value MATH 
 :math (O1 / in :op0(V5 / 𝑛) :op1(U1 / times :op0(T1 / \mathbb) :op0(V6 / 𝑁)))
                  :mod (a / any)))
      :snt4 (e2 / exist-01
            :li 1
            :arg1 (s6 / string-entity
                  :value MATH 
 :math (O2 / in :op0(V7 / 𝑥) :op1(V8 / 𝑀)))
            :time (s7 / since
                  :op1 (s8 / string-entity
                        :value MATH 
 :math (U2 / neq :op0(V9 / 𝑀) :op0(C1 / emptyset))))))"
B.82	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (a / area
                  :location (u / under
                        :op1 (c / curve))
                  :domain (s / string-entity
                        :value MATH 
 :math (U1 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)))
                  :location (ii / interval
                        :mod (s2 / string-entity
                              :value MATH 
 :math (O1 / interval$C-C$$ :op0(N1 / 0) :op1(U2 / times :op0(N2 / 2) :op0(V3 / 𝜋)))))))
      :snt2 (o / obligate-01
            :arg2 (e / exist-01
                  :arg1 (f / function-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (U3 / times :op0(V4 / 𝑔) :op0(V5 / 𝑥))
                              :arg0-of (c2 / cause-01
                                    :arg1 (a2 / and
                                          :op1 (b / become-01
                                                :arg1 (s4 / string-entity
                                                      :value MATH 
 :math (U4 / eq :op0(V6 / 𝑡) :op0(F1 / sin :op0(V7 / 𝑥))))
                                                :arg2 (s5 / string-entity
                                                      :value MATH 
 :math (U5 / eq :op0(F2 / sin :op0(N3 / 0)) :op0(N4 / 0))))
                                          :op2 (b2 / become-01
                                                :arg1 (s6 / string-entity
                                                      :value MATH 
 :math (U6 / times :op0(N5 / 2) :op0(V8 / 𝜋)))
                                                :arg2 (s7 / string-entity
                                                      :value MATH 
 :math (U7 / eq :op0(F3 / sin :op0(U8 / times :op0(N6 / 2) :op0(V9 / 𝜋))) :op0(N7 / 0))))
                                          :op3 (s8 / substitute-01
                                                :arg1 s4
                                                :arg2 (s9 / string-entity
                                                      :value MATH 
 :math (U9 / eq :op0(V10 / 𝐴) :op0(O2 / SUB :op0(O3 / SUP :op0(O4 / SUB :op0(O5 / int) :op1(N8 / 0)) :op1(N9 / 0)) :op1(U10 / times :op0(V11 / 𝑔) :op0(F4 / arcsin :op0(V12 / 𝑡)) :op0(F5 / d :op0(V13 / 𝑡)))))))
                                          :op4 (c3 / contrast-01
                                                :arg1 (e2 / equal-01
                                                      :arg1 (s10 / string-entity
                                                            :value MATH 
 :math (N10 / 0))
                                                      :arg2 (s11 / string-entity
                                                            :value MATH 
 :math (U11 / eq :op0(V14 / 𝐴) :op0(N11 / 0))))
                                                :arg2 (e3 / equal-01
                                                      :polarity -
                                                      :arg1 s10
                                                      :arg2 s11)))))))
            :time (n / now))
      :snt3 (u2 / use-01
            :arg1 (t / thing
                  :name (n2 / name
                        :op1 ""t"")
                  :arg2-of (s12 / substitute-01))))"
B.83	"(m / multi-sentence
      :snt1 (g / give-01
            :arg0 (h / he)
            :arg1 (s / sequence
                  :arg1-of (c / chew-01
                        :arg0 (w / we)
                        :time (b / before
                              :op1 (l / learn-01
                                    :arg0 w
                                    :arg1 (m2 / more
                                          :topic (b2 / bind-01))))))
            :arg2 w
            :arg1-of (h2 / have-in-mind-13
                  :arg2 (t / that)))
      :snt2 (s2 / sequence
            :mod (t2 / that)
            :consist-of (s3 / string-entity
                  :value MATH 
 :math (M1 / L-5 :op0(N1 / 1) :op1(U1 / plus :op0(N2 / 1) :op0(O1 / divide :op0(N3 / 1) :op1(N4 / 2))) :op2(U2 / plus :op0(N5 / 1) :op0(O2 / divide :op0(N6 / 1) :op1(N7 / 2)) :op0(O3 / divide :op0(N8 / 1) :op1(N9 / 3))) :op3(U3 / plus :op0(N10 / 1) :op0(O4 / divide :op0(N11 / 1) :op1(N12 / 2)) :op0(O5 / divide :op0(N13 / 1) :op1(N14 / 3)) :op0(O6 / divide :op0(N15 / 1) :op1(N16 / 4))) :op4(V1 / …))))
      :snt3 (k / know-01
            :arg0 (ii / i)
            :arg1 (b3 / bind-01
                  :arg1 (s4 / sequence)
                  :location (a / above)
                  :condition (e / exist-01
                        :arg1 (s5 / string-entity
                              :value MATH 
 :math (V2 / 𝑀)
                              :arg0-of (c2 / cause-01
                                    :arg1 (s6 / string-entity
                                          :value MATH 
 :math (O7 / leq :op0(O8 / SUB :op0(V3 / 𝑎) :op1(V4 / 𝑛)) :op1(V5 / 𝑀))
                                          :prep-for (s7 / string-entity
                                                :value MATH 
 :math (V6 / 𝑛)
                                                :mod (a2 / all)))))))))"
B.84	"(m / multi-sentence
      :snt1 (s / say-01
            :arg0 (ii / i)
            :arg1 (ii2 / ideal
                  :polarity -
                  :mod (p / principal)
                  :domain (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V1 / 𝐼) :op0(M1 / L-3 :op0(U2 / times :op0(V2 / &) :op0(V3 / 𝑙) :op0(V4 / 𝑡)) :op1(V5 / 𝑝) :op2(U3 / times :op0(V6 / 𝑥) :op0(V7 / &) :op0(V8 / 𝑔) :op0(V9 / 𝑡)))))
                  :location (s3 / string-entity
                        :value MATH 
 :math (U4 / times :op0(V10 / 𝑍) :op0(M2 / D-lsqb;&rsqb; :op0(V11 / 𝑥)))
                        :location-of (ii3 / ideal
                              :mod (p2 / principal)
                              :domain (t / thing
                                    :name (n / name
                                          :op1 ""p""))))))
      :snt2 (q / question-01
            :arg0 (ii4 / i)
            :arg1 (ii5 / ideal
                  :mod (p3 / principal)
                  :domain (s4 / string-entity
                        :value MATH 
 :math (U5 / eq :op0(V12 / 𝐼) :op0(M3 / L-3 :op0(U6 / times :op0(V13 / &) :op0(V14 / 𝑙) :op0(V15 / 𝑡)) :op1(V16 / 𝑝) :op2(U7 / times :op0(V17 / 𝑥) :op0(V18 / &) :op0(V19 / 𝑔) :op0(V20 / 𝑡))))
                        :location (s5 / string-entity
                              :value MATH 
 :math (U8 / times :op0(V21 / 𝑍) :op0(M4 / D-lsqb;&rsqb; :op0(V22 / 𝑥)))
                              :location-of (ii6 / ideal
                                    :mod (p4 / prime
                                          :polarity -)
                                    :domain t)))
                  :polarity (a / amr-unknown))))"
B.85	"(m / multi-sentence
      :snt1 (t / try-01
            :arg0 (ii / i)
            :arg1 (f / find-01
                  :arg0 ii
                  :arg1 (p / possible-01
                        :arg1 (r / reach-01
                              :arg0 (b / bug
                                    :mod (t2 / this))
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (V1 / 𝑁)))
                        :arg1-of (c / cause-01
                              :arg0 (g / go-01
                                    :arg1 (n / number
                                          :quant-of (s2 / step-01))
                                    :arg4 infinity))))
            :ord (o / ordinal-entity
                  :value 1))
      :snt2 (f2 / find-01
            :arg0 (ii2 / i)
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(V2 / 𝑝) :op1(V3 / 𝑛)) :op0(U2 / times :op0(O2 / divide :op0(N1 / 1) :op1(N2 / 2)) :op0(O3 / SUB :op0(V4 / 𝑝) :op1(O4 / minus :op0(V5 / 𝑛) :op1(N3 / 1)))))
                  :arg2-of (e / equal-01
                        :arg1 (p2 / possible-01
                              :arg1 (r2 / reach-01
                                    :arg0 (b2 / bug
                                          :arg0-of (s4 / start-01
                                                :location (p3 / position
                                                      :mod (s5 / string-entity
                                                            :value MATH 
 :math (V6 / 𝑛)))))
                                    :arg1 (s6 / string-entity
                                          :value MATH 
 :math (V7 / 𝑁)))))))
      :snt3 (h / have-03
            :arg0 (w / we)
            :arg1 (c2 / condition
                  :mod (b3 / boundary)
                  :mod (s7 / string-entity
                        :value MATH 
 :math (U3 / eq :op0(O5 / SUB :op0(V8 / 𝑝) :op1(V9 / 𝑁)) :op0(N4 / 1))))
            :mod (a / also)))"
B.86	"(m / multi-sentence
      :snt1 (p / problem
            :topic (t / true-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑘) :op0(N1 / 0))) :op1(V2 / 𝑛)) :op1(F1 / ⋅ :op0(V3 / 𝑘) :op1(M1 / M-2x1 :op0(M2 / R :op0(V4 / 𝑛)) :op1(M3 / R :op0(V5 / 𝑘))))) :op0(U3 / times :op0(V6 / 𝑂) :op0(O5 / SUP :op0(N2 / 2) :op1(U4 / times :op0(V7 / 𝑛) :op0(F2 / log :op0(O6 / SUB :op0(F3 / log) :op1(N3 / 3)) :op1(V8 / 𝑛)) :op0(V9 / &quest;)))))
                        :arg2-of (s2 / start-01
                              :arg0 (ii / i)
                              :arg1 (s3 / solve-01
                                    :arg0 ii)))
                  :polarity (a / amr-unknown)))
      :snt2 (a2 / and
            :op1 (t2 / think-01
                  :arg0 (ii2 / i)
                  :arg1 (h / have-degree-91
                        :arg1 (t3 / thing
                              :arg2-of (b / bind-01)
                              :mod (u / upper)
                              :mod (t4 / this))
                        :arg2 (l / large)
                        :arg3 (t5 / too
                              :mod (w / way))))
            :op2 (s4 / seem-01
                  :arg1 (p2 / possible-01
                        :polarity -
                        :arg1 (f / find-01
                              :arg0 ii2
                              :arg1 t3
                              :arg2-of (s5 / solve-01))))))"
B.87	"(m / multi-sentence
      :snt1 (t / true-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (F1 / $##$ :op0(O1 / in :op0(O2 / forall :op0(V1 / 𝑛)) :op1(U1 / times :op0(T1 / \Bbb) :op0(V2 / 𝑁))) :op1(O3 / geq :op0(U2 / times :op0(O4 / SUB :op0(O5 / SUP :op0(O6 / SUB :op0(O7 / sum) :op1(U3 / eq :op0(V3 / 𝑖) :op0(N1 / 1))) :op1(V4 / 𝑛)) :op1(O8 / SUB :op0(V5 / 𝑎) :op1(V6 / 𝑖))) :op0(O9 / SUB :op0(O10 / SUP :op0(O11 / SUB :op0(O12 / sum) :op1(U4 / eq :op0(V7 / 𝑖) :op0(N2 / 1))) :op1(V8 / 𝑛)) :op1(O13 / divide :op0(N3 / 1) :op1(O14 / SUB :op0(V9 / 𝑎) :op1(V10 / 𝑖))))) :op1(O15 / SUP :op0(V11 / 𝑛) :op1(N4 / 2)))))
            :polarity (a / amr-unknown)
            :condition (s2 / string-entity
                  :value MATH 
 :math (F2 / $##$ :op0(O16 / in :op0(O17 / forall :op0(V12 / 𝑖)) :op1(U5 / times :op0(T2 / \Bbb) :op0(V13 / 𝑁))) :op1(O18 / in :op0(O19 / SUB :op0(V14 / 𝑎) :op1(V15 / 𝑖)) :op1(U6 / times :op0(T3 / \Bbb) :op0(O20 / SUP :op0(V16 / 𝑅) :op1(U7 / plus)))))))
      :snt2 (p / possible-01
            :arg1 (p2 / prove-01
                  :arg0 (ii / i)
                  :arg1 (h / hold-01
                        :arg1 (t2 / this)
                        :beneficiary (a2 / and
                              :op1 (s3 / string-entity
                                    :value MATH 
 :math (U8 / eq :op0(V17 / 𝑛) :op0(N5 / 1)))
                              :op2 (s4 / string-entity
                                    :value MATH 
 :math (U9 / eq :op0(V18 / 𝑛) :op0(N6 / 2)))
                              :op3 (s5 / string-entity
                                    :value MATH 
 :math (U10 / eq :op0(V19 / 𝑛) :op0(N7 / 3)))))
                  :manner (u / use-01
                        :arg0 ii
                        :arg1 (l / lemma
                              :arg1-of (f / follow-04))))))"
B.88	"(p / possible-01
      :arg1 (r / reduce-01
            :arg1 (p2 / polynomial
                  :mod (s / string-entity
                        :value MATH 
 :math (U1 / plus :op0(O1 / SUP :op0(V1 / 𝑥) :op1(N1 / 4)) :op0(U2 / times :op0(N2 / 10) :op0(O2 / SUP :op0(V2 / 𝑥) :op1(N3 / 2))) :op0(N4 / 1))))
            :arg4 (p3 / polynomial
                  :mod (s2 / string-entity
                        :value MATH 
 :math (U3 / times :op0(T1 / \mathbb) :op0(V3 / 𝑍) :op0(M1 / D-lsqb;&rsqb; :op0(V4 / 𝑥))))))
      :polarity (a / amr-unknown))"
B.89	"(e / exist-01
      :arg1 (p / parametrizate-00
            :arg1 (e2 / equation
                  :mod (p2 / product-of
                        :op1 MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / SUP :op0(V1 / 𝐴) :op1(N1 / 2)) :op0(O2 / SUP :op0(V2 / 𝐵) :op1(N2 / 2))) :op0(U3 / plus :op0(O3 / SUP :op0(V3 / 𝐶) :op1(N3 / 2)) :op0(O4 / SUP :op0(V4 / 𝐷) :op1(N4 / 2))))
                        :op2 ""eqx""))
            :arg1-of (c / complete-02)
            :arg1-of (k / know-01)
            :location-of (o / or
                  :op1 (n / number
                        :arg1-of (r / rational-02)
                        :arg1-of (m / mean-01
                              :arg2 (p3 / positive))
                        :domain (s / string-entity
                              :value MATH 
 :math (M1 / L-4 :op0(V5 / 𝐴) :op1(V6 / 𝐵) :op2(V7 / 𝐶) :op3(V8 / 𝐷))))
                  :op2 (ii / integer
                        :arg1-of (e3 / equal-01
                              :arg2 s))))
      :polarity (a / amr-unknown))"
B.90	"(m / multi-sentence
      :snt1 (h / have-condition-91
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / 𝐴))
                  :arg2 (m2 / matrix
                        :name (n / name
                              :op1 MATH 
 :math (U1 / times :op0(V2 / 𝑛) :op0(V3 / 𝑛)))))
            :arg2 (e2 / equal-01
                  :arg1 (t / thing
                        :arg2-of (ii / inverse-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (V4 / 𝐴))))
                  :arg2 (m3 / matrix
                        :name (n2 / name
                              :op1 MATH 
 :math (U2 / times :op0(V5 / 𝑛) :op0(V6 / 𝑛)))
                        :arg0-of (h2 / have-03
                              :arg1 (p / property
                                    :mod (s3 / string-entity
                                          :value MATH 
 :math (O1 / form-seq :op0(U3 / eq :op0(U4 / times :op0(O2 / SUP :op0(V7 / 𝐴) :op1(O3 / minus :op0(N1 / 1))) :op0(V8 / 𝐴)) :op0(M1 / L-2 :op0(U5 / times :op0(T1 / \mathbb) :op0(O4 / SUB :op0(V9 / 𝐼) :op1(V10 / 𝑛))) :op1(U6 / and))) :op1(U7 / eq :op0(U8 / times :op0(V11 / 𝐴) :op0(O5 / SUP :op0(V12 / 𝐴) :op1(O6 / minus :op0(N2 / 1)))) :op0(M2 / L-2 :op0(U9 / times :op0(T2 / \mathbb) :op0(O7 / SUB :op0(V13 / 𝐼) :op1(V14 / 𝑛))) :op1(N3 / 1)))))))))
            :arg1-of (d / define-01))
      :snt2 (c / case-04
            :arg1 (c2 / contrast-01
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U10 / eq :op0(U11 / times :op0(O8 / SUP :op0(V15 / 𝐴) :op1(O9 / minus :op0(N4 / 1))) :op0(V16 / 𝐴)) :op0(U12 / times :op0(T3 / \mathbb) :op0(O10 / SUB :op0(V17 / 𝐼) :op1(V18 / 𝑛)))))
                  :arg2 (o / or
                        :op1 (s5 / string-entity
                              :value MATH 
 :math (U13 / neq :op0(U14 / times :op0(V19 / 𝐴) :op0(O11 / SUP :op0(V20 / 𝐴) :op1(O12 / minus :op0(N5 / 1)))) :op0(U15 / times :op0(T4 / \mathbb) :op0(O13 / SUB :op0(V21 / 𝐼) :op1(V22 / 𝑛)))))
                        :op2 (w / way
                              :mod (a / around)
                              :mod (o2 / other)))
                  :arg0-of (c3 / cause-01
                        :arg1 (m4 / make-01
                              :li 1
                              :arg1 (t2 / thing
                                    :arg1-of (s6 / state-01)
                                    :mod (f / false)))))
            :polarity (a2 / amr-unknown)))"
B.92	"(m / multi-sentence
      :snt1 (a / all
            :arg1-of (ii / infer-01
                  :arg0 (ii2 / i)
                  :arg1-of (p / possible-01)
                  :mod (s / so-far))
            :domain (t / this))
      :snt2 (c / contrast-01
            :arg1 (t2 / try-01
                  :arg0 (ii3 / i)
                  :arg1 (l / look-01
                        :arg0 ii3
                        :arg1 (o / or
                              :op1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑃) :op0(O1 / interval$O-O$$ :op0(V2 / 𝑋) :op1(V3 / 𝑌))) :op0(O2 / minus :op0(U3 / times :op0(O3 / minus :op0(O4 / SUP :op0(V4 / 𝑋) :op1(O5 / minus :op0(V5 / 𝑝) :op1(N1 / 1) :op1(N2 / 1)))) :op0(V6 / 𝑋) :op0(V7 / 𝑌)) :op1(N3 / 1))))
                              :op2 (s3 / string-entity
                                    :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V8 / 𝑃) :op0(O6 / interval$O-O$$ :op0(V9 / 𝑋) :op1(V10 / 𝑌))) :op0(O7 / minus :op0(U6 / times :op0(O8 / minus :op0(O9 / SUP :op0(V11 / 𝑋) :op1(O10 / minus :op0(V12 / 𝑝) :op1(N4 / 1) :op1(N5 / 1)))) :op0(V13 / 𝑋) :op0(V14 / 𝑌)) :op1(V15 / 𝑋) :op2(N6 / 1)))))
                        :location (s4 / string-entity
                              :value MATH 
 :math (U7 / times :op0(T1 / \mathbb) :op0(O11 / SUB :op0(V16 / 𝐹) :op1(V17 / 𝑝)) :op0(O12 / interval$C-C$$ :op0(V18 / 𝑋) :op1(V19 / 𝑌))))
                        :purpose (n / number
                              :mod (p2 / prime)
                              :mod (s5 / some)
                              :mod (s6 / string-entity
                                    :value MATH 
 :math (V20 / 𝑝)))))
            :arg2 (h / have-trouble-04
                  :arg0 ii3
                  :arg1 (d / determine-01
                        :arg0 ii3
                        :arg1 (t3 / truth-value
                              :polarity-of (f / field
                                    :domain (q / quotient)))))
            :topic (a2 / above)))"
B.93	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (m2 / matrix
                  :mod (s / string-entity
                        :value MATH 
 :math (M1 / L-2 :op0(V1 / 𝐴) :op1(V2 / 𝐵)))
                  :prep-on (s2 / size
                        :mod (s3 / string-entity
                              :value MATH 
 :math (U1 / times :op0(T1 / \mathbb) :op0(V3 / 𝑅))))))
      :snt2 (p / possible-01
            :arg1 (p2 / prove-01
                  :arg0 (ii / i)
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V4 / 𝑑) :op0(V5 / 𝑒) :op0(V6 / 𝑡) :op0(O1 / minus :op0(U4 / times :op0(V7 / 𝑥) :op0(V8 / 𝐼)) :op1(U5 / times :op0(V9 / 𝐴) :op0(V10 / 𝐵)))) :op0(U6 / times :op0(V11 / 𝑑) :op0(V12 / 𝑒) :op0(V13 / 𝑡) :op0(O2 / minus :op0(U7 / times :op0(V14 / 𝑥) :op0(V15 / 𝐼)) :op1(U8 / times :op0(V16 / 𝐵) :op0(V17 / 𝐴))))))
                  :condition (m3 / matrix
                        :mod (s5 / singular)
                        :domain (a / and
                              :op1 (s6 / string-entity
                                    :value MATH 
 :math (V18 / 𝐴))
                              :op2 (s7 / string-entity
                                    :value MATH 
 :math (V19 / 𝐵)))))
            :manner (a2 / amr-unknown)))"
B.94	"(m / multi-sentence
      :snt1 (q / question-01
            :arg1 (e / exist-01
                  :arg1 (s / set
                        :consist-of (n / number
                              :arg1-of (n2 / natural-03))
                        :arg0-of (c / cause-01
                              :arg1 (ii / intersect-01
                                    :arg0 (t / thing
                                          :quant 2
                                          :mod (e2 / each))
                                    :mod (f / finite)))
                        :mod (s2 / string-entity
                              :value MATH 
 :math (O1 / SUP :op0(N1 / 2) :op1(O2 / SUB :op0(V1 / ℵ) :op1(N2 / 0)))))
                  :polarity (a / amr-unknown)))
      :snt2 (n3 / need-01
            :arg0 (ii2 / i)
            :arg1 (ii3 / ignore-01
                  :arg0 ii2
                  :arg1 (p / person
                        :mod (t2 / that)
                        :arg0-of (h / have-03
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (V2 / 𝑃)))))
            :source (t3 / thing
                  :arg1-of (r / read-01
                        :arg0 ii2
                        :topic (f2 / family
                              :mod (ii4 / infinite))))))"
B.95	"(m / multi-sentence
      :snt1 (p / problem
            :topic (p2 / prove-01
                  :arg1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (F1 / sin :op0(V1 / 𝑥)))
                        :arg2 (l / leg
                              :part-of (t / triangle
                                    :arg1-of (r / right-04))
                              :consist-of (a / and
                                    :op1 (s2 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V2 / ∠) :op0(V3 / 𝐵)) :op0(V4 / 𝑥)))
                                    :op2 (h / hypotenuse
                                          :value MATH 
 :math (N1 / 1)))))))
      :snt2 (s3 / see-01
            :arg0 (ii / i)
            :arg1 (p3 / prove-01
                  :arg1 (b / base-02
                        :arg1 (ii2 / it)
                        :arg2 (f / fact
                              :topic (o / or
                                    :op1 (s4 / satisfy-02
                                          :arg0 (l2 / long-03
                                                :arg1 (a2 / arc
                                                      :consist-of (s5 / string-entity
                                                            :value MATH 
 :math (V5 / 𝑥))))
                                          :arg1 (s6 / string-entity
                                                :value MATH 
 :math (M1 / L-3 :op0(F2 / sin :op0(U3 / times :op0(V6 / 𝑥) :op0(V7 / &) :op0(V8 / 𝑙) :op0(V9 / 𝑡))) :op1(U4 / times :op0(V10 / 𝑥) :op0(V11 / &) :op0(V12 / 𝑙) :op0(V13 / 𝑡)) :op2(F3 / tan :op0(V14 / 𝑥)))))
                                    :op2 (s7 / satisfy-02
                                          :arg0 l2
                                          :arg1 (s8 / string-entity
                                                :value MATH 
 :math (M2 / L-3 :op0(F4 / sin :op0(U5 / times :op0(V15 / 𝑥) :op0(V16 / &) :op0(V17 / 𝑙) :op0(V18 / 𝑡))) :op1(U6 / times :op0(V19 / 𝑥) :op0(V20 / &) :op0(V21 / 𝑙) :op0(V22 / 𝑡)) :op2(O1 / minus :op0(U7 / plus :op0(F5 / sin :op0(V23 / 𝑥)) :op0(N2 / 1)) :op1(F6 / cos :op0(V24 / 𝑥)))))
                                          :frequency (s9 / sometimes))))))
            :frequency (m2 / many))
      :snt3 (c / cause-01
            :arg0 (a3 / and
                  :op1 (e2 / equal-01
                        :arg1 (s10 / string-entity
                              :value MATH 
 :math (F7 / sin :op0(V25 / 𝑥)))
                        :arg2 (l3 / long-03
                              :arg1 (s11 / segment
                                    :arg1-of (s12 / straight-04))))
                  :op2 (e3 / equal-01
                        :arg1 (s13 / string-entity
                              :value MATH 
 :math (V26 / 𝑥))
                        :arg2 (l4 / long-03
                              :arg1 (s14 / segment
                                    :arg1-of (c2 / curve-01)
                                    :arg0-of (h2 / have-03
                                          :arg1 (e4 / endpoint
                                                :arg1-of (s15 / same-01)))))))
            :arg1 (c3 / clear-06
                  :arg1 (b2 / bind-01
                        :arg1-of (h3 / have-degree-91
                              :arg2 (l5 / low-04
                                    :arg1 b2)
                              :arg3 (m3 / more)))))
      :snt4 (m4 / motivate-01
            :arg2 (f2 / find-01
                  :arg1 (d / derivative
                        :domain (s16 / string-entity
                              :value MATH 
 :math (F8 / sin :op0(V27 / 𝑥))))
                  :location (c4 / context
                        :mod (e5 / elementary)
                        :mod (b3 / before
                              :op1 (s17 / series))))))"
B.96	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (s / sum-of
                  :op1 (s2 / string-entity
                        :value MATH 
 :math (O1 / sum :op0(O2 / SUB :op0(O3 / sum) :op1(V1 / 𝑖)) :op1(O4 / SUB :op0(V2 / 𝑎) :op1(V3 / 𝑖))))
                  :op2 (s3 / string-entity
                        :value MATH 
 :math (O5 / SUB :op0(V4 / 𝑎) :op1(V5 / 𝑖)))
                  :arg1-of (c / converge-01)))
      :snt2 (d / diverge-01
            :arg0 (s4 / string-entity
                  :value MATH 
 :math (O6 / sum :op0(O7 / SUB :op0(O8 / sum) :op1(V6 / 𝑖)) :op1(O9 / divide :op0(O10 / SUB :op0(V7 / 𝑎) :op1(V8 / 𝑖)) :op1(U1 / plus :op0(O11 / SUB :op0(V9 / 𝑎) :op1(V10 / 𝑖)) :op0(O12 / SUB :op0(V11 / 𝑎) :op1(U2 / plus :op0(V12 / 𝑖) :op0(N1 / 1) :op0(O13 / SUB :op0(V13 / 𝑎) :op1(U3 / plus :op0(V14 / 𝑖) :op0(N2 / 2) :op0(V15 / ⋯)))))))))
            :polarity (a / amr-unknown)
            :time (a2 / always)))"
B.97	"(m / multi-sentence
      :snt1 (f / feel-02
            :arg0 (ii / i)
            :arg1 (r / recommend-01
                  :arg1 infinity
                  :domain (t / thing
                        :arg2-of (a / answer-01))))
      :arg1-of (c / cause-01
            :arg0 (h / have-condition-91
                  :arg1 (g / give-01
                        :arg0 (t2 / thing
                              :arg1-of (c2 / combine-01
                                    :arg2 (c3 / coefficient
                                          :arg1-of (n / natural-03)))
                              :mod (l / linear))
                        :arg1 (s / string-entity
                              :value MATH 
 :math (V1 / 𝑛))
                        :frequency (r2 / rate-entity-91
                              :arg1 1
                              :arg2 (n2 / number
                                    :arg1-of (r3 / real-04))))
                  :arg2 (f2 / finite
                        :domain (d / dimension))))
      :snt2 (f3 / feel-02
            :arg1 (f4 / false
                  :domain (t3 / that))
            :arg1-of (c4 / cause-01
                  :arg0 (p / prove-01
                        :arg0 (y / you)
                        :arg1 t3
                        :manner (a2 / amr-unknown))))
      :snt3 (g2 / give-01
            :arg0 (t4 / thing
                  :arg1-of (c5 / combine-01
                        :arg2 (c6 / coefficient
                              :mod (r4 / rational)))
                  :mod l))
      :arg1 (s2 / string-entity
            :value MATH 
 :math (N1 / 0)
            :arg1-of (e / equal-01
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(U3 / times :op0(O1 / divide :op0(O2 / SUB :op0(V2 / 𝑎) :op1(N2 / 1)) :op1(O3 / SUB :op0(V3 / 𝑏) :op1(N3 / 1))) :op0(O4 / SUB :op0(V4 / 𝑥) :op1(N4 / 1))) :op0(V5 / …) :op0(U4 / times :op0(O5 / divide :op0(O6 / SUB :op0(V6 / 𝑎) :op1(V7 / 𝑚)) :op1(O7 / SUB :op0(V8 / 𝑏) :op1(V9 / 𝑚))) :op0(O8 / SUB :op0(V10 / 𝑥) :op1(V11 / 𝑚)))) :op0(N5 / 0)))))
      :frequency (r5 / rate-entity-91
            :arg1 1
            :arg2 (n3 / number
                  :arg1-of (r6 / real-04)
                  :quant (e2 / every)))
      :snt4 (m2 / multiply-01
            :arg1 (s4 / string-entity
                  :value MATH 
 :math (V12 / 𝑚))
            :arg2 (s5 / string-entity
                  :value MATH 
 :math V12 )))"
B.98	"(m / multi-sentence
      :snt1 (n / need-01
            :arg0 (ii / i)
            :arg1 (p / prove-01
                  :arg0 ii
                  :arg1 (d / dense
                        :domain (s / set
                              :mod (a / all)
                              :consist-of (s2 / string-entity
                                    :value MATH 
 :math (O1 / in :op0(M1 / D-lsqb;&rsqb; :op0(V1 / 𝑥)) :op1(O2 / SUP :op0(V2 / 𝑆) :op1(N1 / 1)))))
                        :location (n2 / neighborhood
                              :mod (a2 / all)
                              :consist-of (s3 / string-entity
                                    :value MATH 
 :math (M2 / D-lsqb;&rsqb; :op0(V3 / 𝑦)))))))
      :snt2 (p2 / possible-01
            :li 1
            :arg1 (w / write-01
                  :arg0 (ii2 / i)
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (V4 / 𝑅))
                  :arg3 (s5 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V5 / 𝑅) :op0(O3 / SUP :op0(V6 / 𝑒) :op1(U3 / times :op0(N2 / 2) :op0(V7 / 𝜋) :op0(V8 / 𝑖) :op0(V9 / 𝑥)))) :op0(O4 / SUP :op0(V10 / 𝑒) :op1(U4 / times :op0(N3 / 2) :op0(V11 / 𝜋) :op0(V12 / 𝑖) :op0(U5 / plus :op0(V13 / 𝑥) :op0(V14 / 𝛼)))))))
            :arg1-of (c / cause-01
                  :arg0 (p3 / possible-01
                        :arg1 (w2 / write-01
                              :arg0 ii2
                              :arg1 (s6 / string-entity
                                    :value MATH 
 :math (U6 / times :op0(O5 / SUP :op0(V15 / 𝑅) :op1(V16 / 𝑛)) :op0(V17 / 𝑥))
                                    :arg3 (s7 / string-entity
                                          :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(O6 / SUP :op0(V18 / 𝑅) :op1(V19 / 𝑛)) :op0(O7 / SUP :op0(V20 / 𝑒) :op1(U9 / times :op0(N4 / 2) :op0(V21 / 𝜋) :op0(V22 / 𝑖) :op0(V23 / 𝑥)))) :op0(O8 / SUP :op0(V24 / 𝑒) :op1(U10 / times :op0(N5 / 2) :op0(V25 / 𝜋) :op0(V26 / 𝑖) :op0(U11 / plus :op0(V27 / 𝑥) :op0(U12 / times :op0(V28 / 𝑛) :op0(V29 / 𝛼))))))))
                              :arg3 (s8 / string-entity
                                    :value ""eqx1015eqx"")))))
      :snt3 c
      :arg1 (p4 / possible-01
            :arg1 (w3 / write-01
                  :arg0 (ii3 / i)
                  :arg1 (s9 / string-entity
                        :value MATH 
 :math (U13 / eq :op0(M3 / D-lsqb;&rsqb; :op0(O9 / SUB :op0(V30 / 𝑧) :op1(V31 / 𝑦))) :op0(U14 / times :op0(O10 / SUP :op0(V32 / 𝑅) :op1(V33 / 𝑛)) :op0(M4 / D-lsqb;&rsqb; :op0(V34 / 𝑥))))
                        :arg3 (s10 / string-entity
                              :value ""eqx1011020eqx"")))))"
B.201	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (s / see-01
                  :arg0 ii
                  :arg1 (t / truth-value
                        :polarity-of (h / have-manner-91
                              :arg1 (p / prove-01
                                    :arg1 (a / assert-03
                                          :topic (m2 / matrix
                                                :location (r / ring
                                                      :arg1-of (d / divide-02)))
                                          :arg1-of (f / follow-04)))
                              :arg2 (w2 / way
                                    :mod (e / elementary)
                                    :example (u / use-01
                                          :polarity -
                                          :arg1 (o / or
                                                :op1 (t2 / theory
                                                      :poss (p2 / person
                                                            :name (n / name
                                                                  :op1 ""wedderburn"")))
                                                :op2 (t3 / technique
                                                      :mod (t4 / tensoring))))))))
            :snt2 (h2 / have-condition-91
                  :arg1 (h3 / have-03
                        :arg0 (m3 / matrix
                              :mod (s2 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V1 / 𝑛) :op0(V2 / 𝑛)))
                              :location (r2 / ring
                                    :arg1-of (d2 / divide-02)))
                        :arg1 (ii2 / inverse
                              :arg1-of (r3 / right-04)))
                  :arg2 (h4 / have-03
                        :arg0 m3
                        :arg1 (ii3 / inverse
                              :arg1-of (l / left-20))
                        :mod (a2 / also)))
            :snt3 (c / contrast-01
                  :arg1 (h5 / have-03
                        :arg0 (a3 / assert-03)
                        :arg1 (p3 / prove-01
                              :arg1 (m4 / matrix
                                    :location (f2 / field))
                              :mod (e2 / elementary)))
                  :arg2 (c2 / consider-02
                        :arg0 (ii4 / i)
                        :arg1 (p4 / prove-01
                              :arg1 (m5 / matrix
                                    :location (r4 / ring
                                          :arg1-of (d3 / divide-02))))))))"
B.202	"(m / multi-sentence
      :snt1 (a / and
            :op1 (b / background)
            :op2 (m2 / motivate-01)
            :mod (s / some))
      :snt2 (c / contrast-01
            :arg2 (s2 / show-01
                  :arg1 (f / field
                        :domain (d / domain
                              :mod (ii / integral)
                              :example (a2 / and
                                    :op1 (f2 / field
                                          :name (n / name
                                                :op1 MATH 
 :math (V1 / 𝐷)))
                                    :op2 (f3 / field
                                          :name (n2 / name
                                                :op1 MATH 
 :math (U1 / and :op0(O1 / subset :op0(V2 / 𝐹) :op1(V3 / 𝐷)) :op0(O2 / subset :op0(V4 / 𝐸)))))
                                    :op3 (f4 / field
                                          :name (n3 / name
                                                :op1 MATH 
 :math (V5 / 𝐸)))
                                    :op4 (f5 / field
                                          :name (n4 / name
                                                :op1 MATH 
 :math (V6 / 𝐹)))
                                    :arg1-of (f6 / finite-00))))
                  :subevent-of (q / question-01
                        :mod (t / this))
                  :condition (r / ring
                        :domain (s3 / string-entity
                              :value MATH 
 :math (V7 / 𝑅))
                        :arg0-of (c2 / cause-01
                              :arg1 (s4 / show-01
                                    :arg0 (s5 / string-entity
                                          :value MATH 
 :math (V8 / 𝑅))
                                    :arg1 (f7 / field
                                          :mod (ii2 / in-fact)
                                          :domain (s6 / string-entity
                                                :value MATH 
 :math (O3 / subset :op0(V9 / 𝐹) :op1(V10 / 𝐸))))))))
            :snt3 (a3 / and
                  :op1 (h / hold-01
                        :arg1 (r2 / result
                              :arg1-of (h2 / have-degree-91
                                    :arg2 (g / general-02
                                          :arg1 r2)
                                    :arg3 (m3 / more
                                          :quant (s7 / significant)))))
                  :op2 (s8 / seem-01
                        :arg1 (d2 / deserve-01
                              :arg0 r2
                              :arg1 (a4 / address-02
                                    :arg1-of (d3 / depend-01
                                          :polarity -)))))))"
B.203	"(c / cause-01
      :arg0 (a / amr-unknown)
      :arg1 (g / go-02
            :arg0 (t / thing
                  :arg1-of (s / symbolize-01
                        :arg2 (t2 / thing
                              :arg3-of (a2 / add-02))))
            :direction (a3 / away)
            :arg1-of (e / equal-01
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / minus :op0(O2 / minus :op0(V1 / 𝑥))) :op0(V2 / 𝑥))))))"
B.204	"(m / multi-sentence
      :snt1 (k / know-01
            :arg0 (ii / i)
            :arg1 (d / define-01
                  :arg1 (c / correlate-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (V1 / 𝑋))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (V2 / 𝑍))
                        :arg3 (a / agree-01
                              :arg0 (m2 / morphism
                                    :quant 2)
                              :arg1 (f / field
                                    :mod (r / residue))))
                  :arg3 (p / property
                        :mod (u / universal)
                        :arg1-of (l / local-02))))
      :snt2 (p2 / possible-01
            :arg1 (d2 / define-01
                  :arg0 (ii2 / i)
                  :arg1 (ii3 / it)
                  :arg2 (p3 / product-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (F1 / $##$ :op0(V3 / 𝛿) :op1(F2 / → :op0(V4 / 𝑌) :op1(U1 / times :op0(O1 / SUB :op0(U2 / times) :op1(V5 / 𝑍)) :op1(V6 / 𝑌) :op2(V7 / 𝑌))))
                              :arg2 (s4 / string-entity
                                    :value MATH 
 :math (F3 / $##$ :op0(O2 / interval$O-O$$ :op0(V8 / 𝜋) :op1(O3 / SUP :op0(V9 / 𝜋) :op1(V10 / ′))) :op1(F4 / → :op0(V11 / 𝑋) :op1(U3 / times :op0(O4 / SUB :op0(U4 / times) :op1(V12 / 𝑍)) :op1(V13 / 𝑌) :op2(V14 / 𝑌))))))
                        :arg2 (f2 / fiber))
                  :mod (a2 / also))
            :snt3 (q / question-01
                  :arg0 (ii4 / i)
                  :arg1 (t / thing
                        :manner-of (p4 / prove-01
                              :arg1 (s5 / same-01
                                    :arg1 (s6 / set
                                          :arg0-of (u2 / underlie-01
                                                :arg1 (s7 / subscheme
                                                      :arg1-of (c2 / close-01
                                                            :arg1-of p2))
                                                :location-of (a3 / agree-01
                                                      :arg0 (m3 / morphism
                                                            :quant 2)
                                                      :arg1 f))))
                              :arg2 (s8 / set
                                    :consist-of (p5 / point))))))
      :snt4 (c3 / contrast-01
            :arg1 (p6 / probable
                  :domain (c4 / clear-06
                        :arg1 (c5 / contain-01
                              :arg0 (f3 / former)
                              :arg1 (l2 / latter))))
            :arg2 (c6 / cause-01
                  :arg0 (a4 / amr-unknown)
                  :arg1 (a5 / all
                        :domain (t2 / they)))))"
B.205	"(m / multi-sentence
      :snt1 (e / equal-01
            :arg1 (v / variable
                  :name (n / name
                        :op1 ""n""))
            :arg2 (v2 / variable
                  :name (n2 / name
                        :op1 ""i""))
            :location (h / here))
      :snt2 (c / contrast-01
            :arg1 (r / remain-01
                  :arg1 (s / solve-01
                        :quant 1)
                  :arg3 (e2 / equal-01
                        :arg1 (v3 / variable
                              :name (n3 / name
                                    :op1 ""x=n""))
                        :arg2 v3))
            :arg2 (w / want-01
                  :arg0 (ii / i)
                  :arg1 (f / find-01
                        :arg0 ii
                        :arg1 (t / truth-value
                              :polarity-of (p / possible-01
                                    :arg1 (e3 / exist-01
                                          :arg1 (s2 / solve-01
                                                :quant (m2 / more
                                                      :mod (a / any))))))))))"
B.206	"(c / confuse-01
      :arg1 (ii / i)
      :arg2 (t / thing
            :arg2-of (l / limit-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (O1 / SUP :op0(U1 / plus :op0(N1 / 1) :op0(O2 / divide :op0(N2 / 1) :op1(V1 / 𝑛))) :op1(V2 / 𝑛))))))"
B.207	"(m / multi-sentence
      :snt1 (w / work-01
            :arg0 (ii / i)
            :arg1 (p / problem
                  :mod (t / this))
            :arg2 (f / find-01
                  :arg0 ii
                  :arg1 (f2 / function
                        :mod (s / string-entity
                              :value MATH 
 :math (U1 / times :op0(V1 / 𝑓) :op0(V2 / 𝑁)))
                        :mod (s2 / string-entity
                              :value MATH 
 :math (U2 / similar-to :op0(U3 / times :op0(V3 / 𝑓) :op0(V4 / 𝑁)) :op0(U4 / plus :op0(N1 / 1) :op0(O1 / divide :op0(N2 / 1) :op1(V5 / 𝑁)) :op0(O2 / divide :op0(N3 / 1) :op1(U5 / times :op0(N4 / 2) :op0(O3 / SUP :op0(V6 / 𝑁) :op1(N5 / 2)))) :op0(O4 / divide :op0(N6 / 1) :op1(U6 / times :op0(N7 / 6) :op0(O5 / SUP :op0(V7 / 𝑁) :op1(N8 / 3)))) :op0(U7 / times :op0(V8 / 𝑂) :op0(O6 / divide :op0(N9 / 1) :op1(O7 / SUP :op0(V9 / 𝑁) :op1(N10 / 4)))))))
                        :arg1-of (f3 / follow-04))))
      :snt2 (c / contrast-01
            :arg1 (h / have-03
                  :arg0 (w2 / we)
                  :arg1 (f4 / function
                        :mod (s3 / string-entity
                              :value MATH 
 :math (U8 / similar-to :op0(U9 / times :op0(V10 / 𝑓) :op0(V11 / 𝑁)) :op0(O8 / sum :op0(O9 / SUB :op0(O10 / sum) :op1(O11 / geq :op0(V12 / 𝑘) :op1(N11 / 0))) :op1(O12 / divide :op0(O13 / factorial :op0(V13 / 𝑘)) :op1(O14 / SUP :op0(V14 / 𝑁) :op1(V15 / 𝑘)))))
                              :arg1-of (m2 / mean-01
                                    :arg2 (h2 / have-03
                                          :arg0 w2
                                          :arg1 (a / and
                                                :op1 (f5 / function
                                                      :mod (s4 / string-entity
                                                            :value MATH 
 :math (V16 / 𝑓)))
                                                :op2 (f6 / function
                                                      :mod (s5 / string-entity
                                                            :value MATH 
 :math (V17 / 𝑔)))
                                                :arg1-of (g / give-01
                                                      :arg2 w2))))))
                  :arg2 (h3 / have-degree-91
                        :arg1 f4
                        :arg2 (c2 / close-10
                              :arg1 f4)
                        :arg3 (m3 / most)
                        :arg5 (t2 / thing
                              :arg1-of (t3 / think-01
                                    :arg0 ii
                                    :arg1-of (p2 / possible-01)))))
            :arg2 (e / equal-01
                  :polarity -
                  :arg1 f4
                  :arg2 (e2 / equation
                        :ord (o / ordinal-entity
                              :value 1)
                        :location (a2 / above))
                  :arg1-of (r / real-04))
            :arg0-of (e3 / exemplify-01
                  :arg1 (h4 / have-03
                        :arg0 w2
                        :arg1 (f7 / function
                              :mod (s6 / string-entity
                                    :value MATH 
 :math (V18 / 𝑁))
                              :arg1-of g
                              :arg2 (s7 / side
                                    :part-of (e4 / equation
                                          :location (a3 / above)
                                          :mod (h5 / hand
                                                :arg1-of (r2 / right-04)))))
                        :mod (ii2 / input)))))"
B.208	"(m / multi-sentence
      :snt1 (g / give-01
            :arg0 (a / answer-01
                  :arg0 (p / person
                        :name (n / name
                              :op1 ""claude""
                              :op2 ""leibovici""))
                  :arg1 (q / question-01
                        :arg0 (p2 / publication
                              :name (n2 / name
                                    :op1 ""math""
                                    :op2 ""stack""
                                    :op3 ""exchange""))
                        :mod (t / this))
                  :arg1-of (m2 / mean-01
                        :arg2 (a2 / answer-01
                              :ord (o / ordinal-entity
                                    :value 2))))
            :arg1 (a3 / asymptote
                  :topic (n3 / number
                        :mod (h / harmony)
                        :arg1-of (g2 / generalize-01)
                        :arg1-of (e / equal-01
                              :arg2 (n4 / number
                                    :mod (s / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(O2 / SUB :op0(V1 / 𝐻) :op1(V2 / 𝑛)) :op1(V3 / 𝑘)) :op0(O3 / SUB :op0(O4 / SUP :op0(O5 / SUB :op0(O6 / sum) :op1(U2 / eq :op0(V4 / 𝑖) :op0(N1 / 1))) :op1(V5 / 𝑛)) :op1(O7 / divide :op0(N2 / 1) :op1(O8 / SUP :op0(V6 / 𝑖) :op1(V7 / 𝑘)))))))))))
      :snt2 (c / contrast-01
            :arg2 (p3 / possible-01
                  :arg1 (t2 / tell-01
                        :polite +
                        :arg0 (s2 / someone)
                        :arg1 (a4 / and
                              :op1 (t3 / truth-value
                                    :polarity-of (p4 / publish-01
                                          :arg1 (r / result
                                                :mod (t4 / this))))
                              :op2 (t5 / thing
                                    :manner-of (d / derive-01
                                          :arg1 r
                                          :arg1-of (ii / important-01
                                                :arg2-of (h2 / have-degree-91
                                                      :arg1 t5
                                                      :arg3 (m3 / more))))))
                        :arg2 (ii2 / i))))
      :snt3 (f / fit-06
            :arg1 (t6 / this)
            :arg1-of (e2 / excellent-02)
            :mod (p5 / psychological)))"
B.209	"(e / evaluate-01
      :arg1 (e2 / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(C1 / infinity)) :op1(U1 / times :op0(O5 / SUP :op0(V1 / 𝑒) :op1(O6 / minus :op0(U2 / times :op0(V2 / ℎ) :op0(O7 / SUP :op0(V3 / 𝑥) :op1(N2 / 2)) :op0(F1 / d :op0(V4 / 𝑥))))))))
            :arg2 (ii / integral
                  :mod (d / definite))))"
B.210	"(w / way
      :manner-of (s / show-01
            :arg1 (e / equal-01
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (O1 / leq :op0(U1 / times :op0(V1 / 𝑥) :op0(O2 / minus :op0(N1 / 1) :op1(V2 / 𝑥))) :op1(O3 / divide :op0(N2 / 1) :op1(N3 / 4))))))
      :mod (e2 / elegant)
      :domain (a / amr-unknown))"
B.211	"(s / string-entity
      :value MATH 
 :math (O1 / int :op0(U1 / times :op0(O2 / root :op0(U2 / times :op0(O3 / SUP :op0(V1 / 𝑥) :op1(N1 / 2)) :op0(O4 / root :op0(U3 / times :op0(O5 / SUP :op0(V2 / 𝑥) :op1(N2 / 3)) :op0(O6 / root :op0(U4 / times :op0(O7 / SUP :op0(V3 / 𝑥) :op1(N3 / 4)) :op0(O8 / root :op0(U5 / times :op0(O9 / SUP :op0(V4 / 𝑥) :op1(N4 / 5)) :op0(O10 / root :op0(U6 / times :op0(O11 / SUP :op0(V5 / 𝑥) :op1(N5 / 6)) :op0(O12 / root :op0(U7 / times :op0(O13 / SUP :op0(V6 / 𝑥) :op1(N6 / 7)) :op0(O14 / root :op0(U8 / times :op0(O15 / SUP :op0(V7 / 𝑥) :op1(N7 / 8)) :op0(V8 / …)) :op1(N8 / 2) :op1(N9 / 2) :op1(N10 / 2) :op1(N11 / 2) :op1(N12 / 2) :op1(N13 / 2) :op1(N14 / 2)) :op0(F1 / d :op0(V9 / 𝑥))))))))))))))) :op1(W1 / ) :op2(W2 / )))"
B.212	"(m / multi-sentence
      :snt1 (a / and
            :op1 (g / give-01
                  :arg1 (f / function
                        :mod (s / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U3 / eq :op0(V3 / 𝑛) :op0(N1 / 0))) :op1(C1 / infinity)) :op1(U4 / times :op0(U5 / plus :op0(U6 / times :op0(N2 / 2) :op0(V4 / 𝑛)) :op0(N3 / 1)) :op0(O5 / SUP :op0(U7 / times :op0(N4 / 2) :op0(V5 / 𝑥)) :op1(U8 / times :op0(N5 / 2) :op0(V6 / 𝑛))))))))
                  :arg2 (ii / i))
            :op2 (o / obligate-01
                  :arg1 ii
                  :arg2 (e / evaluate-01
                        :arg0 ii
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U9 / times :op0(V7 / 𝑓) :op0(O6 / divide :op0(N6 / 1) :op1(N7 / 4))))
                        :arg0-of (c / cause-01
                              :arg1 (f2 / find-01
                                    :arg0 ii
                                    :arg1 (v / value-01
                                          :arg1 (s3 / string-entity
                                                :value MATH 
 :math (U10 / eq :op0(U11 / times :op0(V8 / 𝑓) :op0(O7 / divide :op0(N8 / 1) :op1(N9 / 4))) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / sum) :op1(U12 / eq :op0(V9 / 𝑛) :op0(N10 / 0))) :op1(C2 / infinity)) :op1(O12 / divide :op0(U13 / plus :op0(U14 / times :op0(N11 / 2) :op0(V10 / 𝑛)) :op0(N12 / 1)) :op1(O13 / SUP :op0(N13 / 2) :op1(U15 / times :op0(N14 / 2) :op0(V11 / 𝑛)))))))))))))
      :snt2 (a2 / appreciate-02
            :arg0 (ii2 / i)
            :arg1 (h / help-01
                  :arg1 (t / this)
                  :arg2 ii2
                  :mod (a3 / any))
            :arg1-of (c2 / cause-01
                  :arg0 (l / lose-02
                        :arg1 ii2
                        :degree (p / pretty)))))"
B.213	"(c / calculate-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑥) :op0(N1 / 1))) :op1(C1 / infinity)) :op1(O5 / divide :op0(O6 / minus :op0(V2 / 𝑥) :op1(N2 / 1)) :op1(O7 / SUP :op0(N3 / 2) :op1(V3 / 𝑥))))))"
B.214	"(s / show-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(O5 / minus :op0(C1 / infinity))) :op1(C2 / infinity)) :op1(U2 / times :op0(O6 / SUP :op0(V1 / 𝑒) :op1(O7 / minus :op0(U3 / times :op0(V2 / 𝜋) :op0(O8 / SUP :op0(V3 / 𝑥) :op1(N1 / 2)) :op0(F1 / d :op0(V4 / 𝑥))))))) :op0(N2 / 1)))))"
B.215	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg0 (p / possible-01
                  :arg1 (w / write-01
                        :arg1 (s / set
                              :consist-of (d / discontinuity
                                    :poss (f / function-01
                                          :arg1-of (a / arbitrary-02))))
                        :manner (u / union-02
                              :arg1 s
                              :arg1-of (c2 / count-01
                                    :arg1-of (p2 / possible-01)))))
            :arg1 (c3 / contrast-01
                  :arg1 (s2 / suppose-01
                        :arg0 (w2 / we)
                        :arg1 (d2 / dense
                              :polarity -
                              :domain (s3 / set
                                    :name (n / name
                                          :op1 MATH 
 :math (U1 / eq :op0(V1 / 𝑛) :op0(O1 / SUB :op0(V2 / 𝑛) :op1(N1 / 0)))))
                              :location (n2 / nowhere)
                              :arg0-of (c4 / cause-01
                                    :arg1 (e / exist-01
                                          :arg1 (ii / interval
                                                :name (n3 / name
                                                      :op1 MATH 
 :math (O2 / interval$O-O$$ :op0(V3 / 𝑝) :op1(V4 / 𝑞))))
                                          :arg0-of (c5 / cause-01
                                                :arg1 (h / have-03
                                                      :arg0 w2
                                                      :arg1 (ii2 / interval
                                                            :name (n4 / name
                                                                  :op1 MATH 
 :math (V5 / 𝐼))))))))
                        :arg2 (p3 / possible-01
                              :arg1 (c6 / contradict-01
                                    :arg0 (p4 / possible-01
                                          :polarity -
                                          :arg1 (d3 / discontinuous
                                                :degree (e2 / entire)
                                                :domain (d4 / derivative
                                                      :poss (f2 / function-01
                                                            :arg1-of (d5 / differ-02)
                                                            :location (e3 / everywhere)))))))))
            :snt2 (p5 / possible-01
                  :arg1 w
                  :arg0 w2
                  :arg1 (s4 / set
                        :name (n5 / name
                              :op1 MATH 
 :math (U2 / eq :op0(V6 / 𝐴) :op0(O3 / SUB :op0(O4 / SUP :op0(O5 / SUB :op0(U3 / union) :op1(U4 / eq :op0(V7 / 𝑛) :op0(N2 / 1))) :op1(C1 / infinity)) :op1(O6 / SUB :op0(V8 / 𝐴) :op1(V9 / 𝑛)))))
                        :arg0-of (c7 / cause-01
                              :arg1 d2
                              :domain (s5 / set
                                    :name (n6 / name
                                          :op1 MATH 
 :math (O7 / SUB :op0(V10 / 𝐴) :op1(V11 / 𝑛)))
                                    :mod (a2 / all)
                                    :arg1-of (c8 / close-01)))))))"
B.216	"(c / compute-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (t / thing
            :arg2-of (l / limit-01)))"
B.217	"(m / multi-sentence
      :snt1 (q / question-01
            :arg1 (f / find-01
                  :arg1 (a / area
                        :mod (m2 / maximum)
                        :poss (t / triangle
                              :mod (ii / isosceles)
                              :arg1-of (ii2 / inscribed-01
                                    :arg2 (e / ellipse
                                          :mod (s / string-entity
                                                :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / divide :op0(O2 / SUP :op0(V1 / 𝑥) :op1(N1 / 2)) :op1(O3 / SUP :op0(V2 / 𝑎) :op1(N2 / 2))) :op0(O4 / divide :op0(O5 / SUP :op0(V3 / 𝑦) :op1(N3 / 2)) :op1(O6 / SUP :op0(V4 / 𝑏) :op1(N4 / 2)))) :op0(N5 / 1))))))))
            :location (h / here))
      :snt2 (s2 / solve-01
            :arg0 (p / person
                  :arg0-of (t2 / teach-01))
            :arg1 (ii3 / it)
            :arg2 (c / consider-01
                  :arg0 p
                  :arg1 (h2 / have-part-91
                        :arg1 t
                        :arg2 (p2 / point
                              :quant 2
                              :arg1-of (a2 / arbitrary-02)
                              :location (e2 / ellipse)
                              :arg1-of (m3 / mean-01
                                    :arg2 (a3 / and
                                          :op1 (s3 / string-entity
                                                :value MATH 
 :math (O7 / interval$O-O$$ :op0(U3 / times :op0(V5 / 𝑎) :op0(F1 / cos :op0(V6 / 𝜃))) :op1(U4 / times :op0(V7 / 𝑏) :op0(F2 / sin :op0(V8 / 𝜃)))))
                                          :op2 (s4 / string-entity
                                                :value MATH 
 :math (O8 / interval$O-O$$ :op0(U5 / times :op0(V9 / 𝑎) :op0(F3 / cos :op0(V10 / 𝜃))) :op1(O9 / minus :op0(U6 / times :op0(V11 / 𝑏) :op0(F4 / sin :op0(V12 / 𝜃)))))))))))))"
B.218	"(m / multi-sentence
      :snt1 (n / number
            :name (n2 / name
                  :op1 ""wrt""
                  :op2 ""ramsey""))
      :snt2 (a / and
            :op1 (h / have-03
                  :arg0 (ii / i)
                  :arg1 (ii2 / identity
                        :arg1-of (g / give-01
                              :arg2 ii)
                        :arg1-of (f / follow-04)
                        :consist-of (s / string-entity
                              :value MATH 
 :math (O1 / leq :op0(U1 / times :op0(V1 / 𝑅) :op0(O2 / interval$O-O$$ :op0(V2 / 𝑚) :op1(V3 / 𝑛))) :op1(U2 / plus :op0(U3 / times :op0(V4 / 𝑅) :op0(O3 / interval$O-O$$ :op0(O4 / minus :op0(V5 / 𝑚) :op1(N1 / 1)) :op1(V6 / 𝑛))) :op0(U4 / times :op0(V7 / 𝑅) :op0(O5 / interval$O-O$$ :op0(V8 / 𝑚) :op1(O6 / minus :op0(V9 / 𝑛) :op1(N2 / 1)))))))))
            :op2 (h2 / have-03
                  :arg0 ii
                  :arg1 (a2 / and
                        :op1 (s2 / string-entity
                              :value MATH 
 :math (U5 / eq :op0(U6 / times :op0(V10 / 𝑅) :op0(O7 / interval$O-O$$ :op0(V11 / 𝑚) :op1(N3 / 2))) :op0(V12 / 𝑚)))
                        :op2 (s3 / string-entity
                              :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(V13 / 𝑅) :op0(O8 / interval$O-O$$ :op0(N4 / 2) :op1(V14 / 𝑛))) :op0(V15 / 𝑛)))
                        :domain (c / case
                              :mod (b / base)
                              :arg1-of (f2 / follow-04))))))"
B.219	"(t / try-01
      :arg0 (ii / i)
      :arg1 (p / prove-01
            :arg0 ii
            :arg1 (ii2 / identity
                  :arg1-of (f / follow-04))
            :manner (u / use-01
                  :arg0 ii
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / binomial :op0(U2 / plus :op0(V1 / 𝑛) :op0(V2 / 𝑟) :op0(N1 / 1)) :op1(V3 / 𝑟)) :op0(O2 / SUB :op0(O3 / SUP :op0(O4 / SUB :op0(O5 / sum) :op1(U3 / eq :op0(V4 / 𝑘) :op0(N2 / 0))) :op1(V5 / 𝑟)) :op1(O6 / binomial :op0(U4 / plus :op0(V6 / 𝑛) :op0(V7 / 𝑘)) :op1(V8 / 𝑘))))
                        :arg1-of (a / argue-01
                              :manner (c / combinatorial))))))"
B.220	"(p / possible-01
      :arg1 (p2 / prove-01
            :arg0 (ii / i)
            :arg1 (ii2 / identity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑘) :op0(N1 / 0))) :op1(V2 / 𝑛)) :op1(O5 / binomial :op0(U3 / plus :op0(V3 / 𝑥) :op0(V4 / 𝑘)) :op1(V5 / 𝑘))) :op0(O6 / binomial :op0(U4 / plus :op0(V6 / 𝑥) :op0(V7 / 𝑛) :op0(N2 / 1)) :op1(V8 / 𝑛))))
            :manner (a / amr-unknown)))"
B.221	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (w / write-01
                  :arg0 (w2 / we)
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / 𝑛)
                        :mod (a / any)
                        :mod (p2 / positive)
                        :arg1-of (f / form-01
                              :arg2 (s2 / string-entity
                                    :value MATH 
 :math (U1 / plus :op0(O1 / SUP :op0(N1 / 2) :op1(V2 / 𝑘)) :op0(O2 / SUP :op0(V3 / 𝑛) :op1(V4 / ′)))
                                    :arg1-of (m2 / mean-01
                                          :arg2 (d / digit
                                                :arg0-of (l / lead-01
                                                      :arg2 (e / expand-01
                                                            :arg1 (s3 / string-entity
                                                                  :value MATH 
 :math (V5 / 𝑛))
                                                            :mod (b / binary)))
                                                :domain (s4 / string-entity
                                                      :value MATH 
 :math (O3 / SUP :op0(N2 / 2) :op1(V6 / 𝑘))
                                                      :mod (j / just))
                                                :arg0-of (g / give-01
                                                      :arg1 (s5 / string-entity
                                                            :value MATH 
 :math (O4 / leq :op0(U2 / times :op0(V7 / 𝑓) :op0(V8 / 𝑛)) :op1(U3 / plus :op0(U4 / times :op0(V9 / 𝑓) :op0(V10 / 𝑘)) :op0(N3 / 1) :op0(U5 / times :op0(V11 / 𝑓) :op0(O5 / SUP :op0(V12 / 𝑛) :op1(V13 / ′))))))))))))
                  :prep-as (e2 / example
                        :arg1-of (s6 / simple-02)))
            :snt2 (g2 / give-01
                  :arg0 (w3 / write-01
                        :arg0 w2
                        :arg1 (s7 / string-entity
                              :value MATH 
 :math (U6 / eq :op0(U7 / times :op0(V14 / ℓ) :op0(V15 / 𝑛)) :op0(F1 / floor :op0(F2 / log :op0(O6 / SUB :op0(F3 / log) :op1(N4 / 2)) :op1(V16 / 𝑛))))))
                  :arg1 (s8 / something
                        :arg1-of (r / resemble-01
                              :arg2 (s9 / string-entity
                                    :value MATH 
 :math (O7 / leq :op0(U8 / times :op0(V17 / 𝑔) :op0(V18 / 𝑛)) :op1(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / sum) :op1(U9 / eq :op0(V19 / 𝑘) :op0(N5 / 1))) :op1(U10 / times :op0(V20 / ℓ) :op0(V21 / 𝑛))) :op1(U11 / plus :op0(U12 / times :op0(V22 / 𝑔) :op0(V23 / 𝑘)) :op0(N6 / 1)))))))
                  :arg1-of m2
                  :arg2 (t / thing
                        :arg2-of (b2 / bind-01
                              :mod (u / upper))
                        :arg0-of (g3 / grow-01
                              :arg2 (s10 / something
                                    :arg1-of (r2 / resemble-01
                                          :arg2 (s11 / string-entity
                                                :value MATH 
 :math (U13 / times :op0(V24 / ℓ) :op0(V25 / 𝑛) :op0(O12 / SUP :op0(V26 / ℓ) :op1(N7 / 2)) :op0(V27 / 𝑛) :op0(O13 / SUP :op0(V28 / ℓ) :op1(N8 / 3)) :op0(V29 / 𝑛) :op0(V30 / …))))))
                        :arg0-of (p3 / pessimistic-02
                              :arg1-of (t2 / think-01
                                    :arg0 (ii / i)))))
            :condition w3))"
B.222	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (d / do-02
                  :arg1 (t / thing
                        :arg1-of (a / assign-01)
                        :mod (t2 / this))
                  :manner (w / way
                        :quant (a2 / amr-unknown))))
      :snt2 (k / know-01
            :arg0 (ii / i)
            :arg1 (a3 / and
                  :op1 (r / recommend-01
                        :arg1 (a4 / add-01
                              :arg0 ii
                              :arg1 (s / string-entity
                                    :value ""a"")
                              :beneficiary (s2 / section
                                    :mod (e / each)
                                    :example (a5 / and
                                          :op1 ""a""
                                          :op2 ""b""
                                          :op3 ""c""
                                          :op4 ""d""))))
                  :op2 (r2 / recommend-01
                        :arg1 (s3 / start-01
                              :arg0 (w2 / we)
                              :arg1-of (r3 / resemble-01
                                    :arg2 (s4 / string-entity
                                          :value MATH 
 :math (O1 / SUP :op0(U1 / plus :op0(V1 / 𝑥) :op0(O2 / divide :op0(O3 / SUP :op0(V2 / 𝑥) :op1(N1 / 2)) :op1(O4 / factorial :op0(N2 / 2))) :op0(O5 / divide :op0(O6 / SUP :op0(V3 / 𝑥) :op1(N3 / 3)) :op1(O7 / factorial :op0(N4 / 3))) :op0(V4 / …)) :op1(N5 / 4))
                                          :condition (l / look-01
                                                :arg0 w2
                                                :arg1 (s5 / string-entity
                                                      :value MATH 
 :math (O8 / SUP :op0(O9 / minus :op0(O10 / SUP :op0(V5 / 𝑒) :op1(V6 / 𝑥)) :op1(N6 / 1)) :op1(N7 / 4)))))))
                        :condition (a6 / as-long-as
                              :op1 (o / obligate-01
                                    :arg1 (g / get-01
                                          :arg0 (s6 / section
                                                :mod (e2 / every))
                                          :arg1 (p2 / person
                                                :arg1-of (e3 / employ-01)
                                                :arg1-of (n / new-01)))))))))"
B.223	"(p / prove-01
      :mod (c / composite)
      :mod (e / equal-01
            :arg2 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑖) :op0(N1 / 0))) :op1(V2 / 𝑛)) :op1(U3 / times :op0(O5 / binomial :op0(U4 / plus :op0(V3 / 𝑛) :op0(V4 / 𝑖)) :op1(V5 / 𝑖)) :op0(O6 / divide :op0(N2 / 1) :op1(O7 / SUP :op0(N3 / 2) :op1(V6 / 𝑖))))) :op0(O8 / SUP :op0(N4 / 2) :op1(V7 / 𝑛))))))"
B.224	"(m / multi-sentence
      :snt1 (s / say-01
            :arg0 (d / define-01
                  :arg1 (c / continuity)
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝜀)))
            :arg1 (c2 / contrast-01
                  :arg1 (d2 / define-01
                        :arg1 (p / point
                              :quant 1
                              :mod (o / only)
                              :location (n / neighborhood
                                    :mod (s3 / string-entity
                                          :value MATH 
 :math (V2 / 𝛿)))))
                  :arg2 (c3 / continue-01
                        :polarity -
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (U1 / times :op0(V3 / 𝑓) :op0(V4 / 𝑥)))
                        :location (s5 / string-entity
                              :value MATH 
 :math (U2 / eq :op0(V5 / 𝑥) :op0(N1 / 1.5)))
                        :arg1-of (o2 / obvious-01))))
      :snt2 (d3 / define-01
            :arg1 (c4 / continuity)
            :arg2 (s6 / string-entity
                  :value MATH 
 :math (V6 / 𝜀)
                  :arg1-of (e / equal-01
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (U3 / times :op0(V7 / 𝑓) :op0(V8 / 𝑥)))))
            :condition (p2 / possible-01
                  :arg1 (f / find-01
                        :arg0 (w / we)
                        :arg1 (n2 / number
                              :mod (p3 / positive)
                              :mod (e2 / every)
                              :mod (s8 / string-entity
                                    :value MATH 
 :math (V9 / 𝛿)))
                        :prep-for (v / value
                              :mod (a / all)
                              :mod (s9 / string-entity
                                    :value MATH 
 :math (V10 / 𝑥)))))
            :mod (a2 / any)
            :arg1-of (h / have-degree-91
                  :arg2 (s10 / small)
                  :arg3 (m2 / more)
                  :arg4 (n3 / number
                        :mod (p4 / positive)
                        :mod (s11 / string-entity
                              :value MATH 
 :math (N2 / 0.5)))))
      :location (b / below))"
B.225	"(m / multi-sentence
      :snt1 (a / approach-02
            :arg1 (p / problem
                  :mod (t / this))
            :arg2 (a2 / amr-unknown)
            :arg1-of (h / have-degree-91
                  :arg2 (g / good-02
                        :arg1 a)
                  :arg3 (m2 / most)))
      :snt2 (t2 / try-01
            :arg0 (ii / i)
            :arg1 (f / formula
                  :poss (p2 / person
                        :name (n / name
                              :op1 ""vieta""))
                  :arg2-of (s / sum-01
                        :arg1 (r / root
                              :quant 3
                              :domain (a3 / and
                                    :op1 (s2 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / SUB :op0(V1 / 𝛼) :op1(N1 / 1)) :op0(O2 / SUB :op0(V2 / 𝛼) :op1(N2 / 2)) :op0(O3 / SUB :op0(V3 / 𝛼) :op1(N3 / 3))) :op0(N4 / 3)))
                                    :op2 (s3 / string-entity
                                          :value MATH 
 :math (U3 / eq :op0(U4 / plus :op0(O4 / SUB :op0(V4 / 𝛽) :op1(N5 / 1)) :op0(O5 / SUB :op0(V5 / 𝛽) :op1(N6 / 2)) :op0(O6 / SUB :op0(V6 / 𝛽) :op1(N7 / 3))) :op0(N8 / 3))
                                          :arg2-of (s4 / sum-01
                                                :arg1 (a4 / and
                                                      :op1 (s5 / string-entity
                                                            :value 1)
                                                      :op2 (s6 / string-entity
                                                            :value 2))))))))
            :snt3 (c / contrast-01
                  :arg1 (b / be-done-08
                        :arg1 (w / we)
                        :condition (r2 / root
                              :quant 1
                              :domain (a5 / and
                                    :op1 s5
                                    :op2 s6)
                              :mod (o / only)))
                  :arg2 (a6 / amr-unknown
                        :condition r2))))"
B.226	"(p / parametrizate-01
      :arg1 (c / curve
            :mod (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(V1 / 𝑥) :op1(O2 / SUP :op0(V2 / 𝑥) :op1(V3 / 𝑦))) :op0(V4 / 𝑦)))))"
B.227	"(c / contrast-01
      :arg1 (c2 / contrast-01
            :arg1 (e / expert-01
                  :polarity -
                  :arg1 (ii / i)
                  :arg2 (s / subject
                        :mod (t / this))
                  :mod (b / big))
            :arg2 (k / know-01
                  :arg0 ii
                  :arg1 (h / have-to-do-with-04
                        :polarity -
                        :arg0 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(N1 / 1) :op0(N2 / 2) :op0(U3 / times :op0(N3 / 3) :op0(V1 / …))) :op0(O1 / minus :op0(O2 / divide :op0(N4 / 1) :op1(N5 / 12)))))
                        :arg1 (m / mathematics
                              :arg1-of (r / real-04))
                        :arg2 (f / function
                              :mod (z / zeta))
                        :arg1-of (c3 / contrast-01
                              :arg2 (h2 / have-to-do-with-04
                                    :arg0 s2
                                    :arg1 f
                                    :mod (a / all))))))
      :arg2 (a2 / and
            :op1 (w / watch-01
                  :arg0 ii
                  :arg1 (v / video
                        :topic (m2 / mathematics)))
            :op2 (e2 / equation
                  :domain (s3 / string-entity
                        :value MATH 
 :math (O3 / divide :op0(U4 / times :op0(V2 / 𝑥) :op0(U5 / plus :op0(V3 / 𝑥) :op0(N6 / 1))) :op1(N7 / 2)))
                  :arg1-of (p / perfect-02
                        :arg2 (s4 / series
                              :mod (s5 / string-entity
                                    :value MATH 
 :math (U6 / plus :op0(N8 / 1) :op0(N9 / 2) :op0(U7 / times :op0(N10 / 3) :op0(V4 / …)))
                                    :mod (e3 / et-cetera)))
                        :arg1-of (a3 / actual-02)))))"
B.228	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (w / we)
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(U3 / plus :op0(C1 / infinity))) :op1(U4 / times :op0(V3 / 𝑐) :op0(V4 / 𝑜) :op0(V5 / 𝑠) :op0(U5 / plus :op0(O5 / divide :op0(O6 / SUP :op0(V6 / 𝑡) :op1(N2 / 3)) :op1(N3 / 3)) :op0(U6 / times :op0(V7 / 𝑥) :op0(V8 / 𝑡) :op0(F1 / d :op0(V9 / 𝑡))))))))))
      :snt2 (f / find-01
            :mode imperative
            :arg0 w
            :arg1 (e2 / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(V10 / 𝐹) :op0(O7 / interval$O-O$$ :op0(V11 / 𝑥) :op1(V12 / 𝑦))) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / int) :op1(O12 / minus :op0(C2 / infinity))) :op1(U9 / plus :op0(C3 / infinity))) :op1(U10 / times :op0(V13 / 𝑓) :op0(U11 / plus :op0(V14 / 𝑡) :op0(V15 / 𝑥)) :op0(V16 / 𝑓) :op0(U12 / plus :op0(V17 / 𝑡) :op0(V18 / 𝑦)) :op0(F2 / d :op0(V19 / 𝑡))))))))
      :snt3 (a / and
            :op1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (e3 / explore-01
                        :arg0 ii
                        :arg1 (s3 / string-entity
                              :value ""f(x)"")))
            :op2 (t2 / take-01
                  :arg0 ii
                  :arg1 s3
                  :manner (p / part))
            :op3 (g / get-04
                  :arg0 ii
                  :arg1 (c / converge-01
                        :arg0 s3)))
      :snt4 (d / difficult
            :domain (ii2 / investigate-01
                  :arg1 (s4 / string-entity
                        :value ""f(x,y""))
            :arg1-of (c2 / cause-01
                  :arg0 (a2 / and
                        :op1 (b / be-located-at-91
                              :arg1 (p2 / product
                                    :consist-of (ii3 / integral))
                              :arg2 (t3 / there))
                        :op2 (k / know-01
                              :polarity -
                              :arg0 ii
                              :arg1 (t4 / thing
                                    :arg1-of (d2 / do-02
                                          :arg0 ii
                                          :arg2 s4)))))))"
B.229	"(m / multi-sentence
      :snt1 (ii / integral
            :domain (s / string-entity
                  :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(N2 / 1)) :op1(U1 / times :op0(M1 / S-1 :op0(O5 / divide :op0(N3 / 1) :op1(V1 / 𝑥))) :op0(M2 / S-1 :op0(O6 / divide :op0(N4 / 1) :op1(O7 / minus :op0(N5 / 1) :op1(V2 / 𝑥)))) :op0(M3 / S-1 :op0(O8 / minus :op0(N6 / 1) :op1(O9 / divide :op0(N7 / 1) :op1(V3 / 𝑥)))) :op0(F1 / d :op0(V4 / 𝑥))))
                  :arg1-of (m2 / mean-01
                        :arg2 (r / represent-01
                              :arg0 (s2 / string-entity
                                    :value MATH 
 :math (M4 / S-1 :op0(V5 / 𝑥)))
                              :arg1 (p / part
                                    :mod (f / fraction)
                                    :part-of (s3 / string-entity
                                          :value MATH 
 :math (V6 / 𝑥)))))))
      :snt2 (c / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii2 / i)
                  :arg1 (b / break-01
                        :arg0 ii2
                        :arg1 (ii3 / it)
                        :manner (u / use-01
                              :arg0 ii2
                              :arg1 (d / define-01
                                    :mod (p2 / piecewise))))
                  :ord (o / ordinal-entity
                        :value 1))
            :arg2 (p3 / possible-01
                  :polarity -
                  :arg1 (f2 / figure-out-05
                        :arg0 ii2
                        :arg1 (d2 / do-02
                              :arg0 ii2
                              :arg1 b))
                  :arg1-of (c2 / cause-01
                        :arg0 (p4 / pattern
                              :arg1-of (c3 / consistent-02)
                              :arg1-of (s4 / spot-01
                                    :arg0 ii2
                                    :arg1-of (p5 / possible-01)))))))"
B.230	"(m / multi-sentence
      :snt1 (a / and
            :op1 (g / go-through-20
                  :arg0 (ii / i)
                  :arg1 (d / define-01
                        :arg1 (s / string-entity
                              :value ""ramsey number"")))
            :op2 (h / have-03
                  :arg0 ii
                  :arg1 (q / question-01
                        :arg1 (t / thing
                              :mod (b / basic)
                              :arg1-of (d2 / define-01)))))
      :snt2 (q2 / question-01
            :arg1 (s2 / same-01
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(V1 / r) :op2(E2 /  :op0(O2 / fragments) :op1(V2 / $) :op2(O3 / SUB :op0(V3 / 𝑛) :op1(N1 / 1)) :op3(V4 / &comma;) :op4(O4 / SUB :op0(V5 / 𝑛) :op1(N2 / 2)) :op5(V6 / &comma;) :op6(V7 / .) :op7(V8 / .) :op8(O5 / SUB :op0(V9 / 𝑛) :op1(V10 / 𝑐)) :op9(V11 / $$))))
                  :arg2 (o / or
                        :op1 (s4 / string-entity
                              :value MATH 
 :math (E3 /  :op0(O6 / fragments) :op1(V12 / r) :op2(E4 /  :op0(O7 / fragments) :op1(V13 / $) :op2(O8 / SUB :op0(V14 / 𝑛) :op1(N3 / 2)) :op3(V15 / &comma;) :op4(O9 / SUB :op0(V16 / 𝑛) :op1(N4 / 1)) :op5(V17 / &comma;) :op6(V18 / .) :op7(V19 / .) :op8(O10 / SUB :op0(V20 / 𝑛) :op1(V21 / 𝑐)) :op9(V22 / $$))))
                        :op2 (p / permutation
                              :mod (o2 / other)
                              :mod (s5 / string-entity
                                    :value MATH 
 :math (E5 /  :op0(O11 / fragments) :op1(O12 / SUB :op0(V23 / 𝑛) :op1(N5 / 1)) :op2(V24 / &comma;) :op3(O13 / SUB :op0(V25 / 𝑛) :op1(N6 / 2)) :op4(V26 / &comma;) :op5(V27 / .) :op6(V28 / .) :op7(O14 / SUB :op0(V29 / 𝑛) :op1(V30 / 𝑐))))))
                  :condition (c / color-01
                        :arg1 (e / edge
                              :part-of (g2 / graph
                                    :mod (o3 / order)
                                    :arg1-of (c2 / complete-02)
                                    :consist-of (s6 / string-entity
                                          :value MATH 
 :math (U1 / times :op0(V31 / 𝑅) :op0(M1 / V-3 :op0(O15 / SUB :op0(V32 / 𝑛) :op1(N7 / 1)) :op1(V33 / …) :op2(O16 / SUB :op0(V34 / 𝑛) :op1(V35 / 𝑐)))))))
                        :arg2 (c3 / color
                              :value ""c""))))
      :snt3 (s7 / seem-01
            :arg1 (ii2 / imply-01
                  :arg0 (t2 / thing
                        :arg2-of (d3 / define-01))
                  :arg1 (r / right-06
                        :arg1 (ii3 / i)))
            :arg2 ii3
            :mod (j / just)))"
B.231	"(m / multi-sentence
      :snt1 (r / recommend-01
            :polarity -
            :arg1 (r2 / resemble-01
                  :arg1 (t / this)
                  :arg2 (c / case-04
                        :mod (t2 / this)))
            :polarity (a / amr-unknown))
      :snt2 (e / equal-01
            :polarity -
            :arg1 (a2 / and
                  :op1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑥) :op1(C1 / infinity))) :op1(O4 / divide :op0(N1 / 1) :op1(V2 / 𝑥))) :op0(N2 / 0)))
                  :op2 (s2 / string-entity
                        :value MATH 
 :math (C2 / infinity)))
            :arg2 (v / value
                  :arg1-of (s3 / same-01))
            :location (c2 / context
                  :mod (t3 / this))
            :polarity (a3 / amr-unknown))
      :snt3 (m2 / miss-02
            :arg0 (ii / i)
            :arg1 (a4 / amr-unknown)
            :location (h / here)))"
B.232	"(m / multi-sentence
      :snt1 (c / confuse-01
            :arg1 (ii / i)
            :arg2 (v / variant
                  :quant 2
                  :arg1-of (ii2 / include-91
                        :arg2 (v2 / variant
                              :quant 2
                              :arg1-of (d / define-01
                                    :arg2 (n / norm
                                          :mod (m2 / matrix)
                                          :arg1-of (ii3 / induce-01)))))))
      :snt2 (d2 / define-01
            :arg1 (n2 / norm
                  :mod (s / string-entity
                        :value MATH 
 :math (O1 / form-seq :op0(U1 / eq :op0(O2 / norm :op0(V1 / 𝐴)) :op0(M1 / L-2 :op0(F1 / max :op0(O3 / SUB :op0(F2 / max) :op1(U2 / neq :op0(V2 / 𝐯) :op0(N1 / 0))) :op1(O4 / divide :op0(O5 / norm :op0(U3 / times :op0(V3 / 𝐴) :op0(V4 / 𝐯))) :op1(O6 / norm :op0(V5 / 𝐯)))) :op1(U4 / times :op0(V6 / 𝑓) :op0(V7 / 𝑜) :op0(V8 / 𝑟)))) :op1(O7 / in :op0(V9 / 𝐴) :op1(O8 / SUP :op0(V10 / ℝ) :op1(U5 / times :op0(V11 / 𝑛) :op0(V12 / 𝑛)))))))
            :arg1-of (c2 / cause-01
                  :arg0 (n3 / norm
                        :mod (s2 / string-entity
                              :value MATH 
 :math (U6 / eq :op0(V13 / 𝐰) :op0(O9 / divide :op0(V14 / 𝐯) :op1(O10 / norm :op0(V15 / 𝐯))))
                              :arg1-of (ii4 / include-91
                                    :arg2 (n4 / norm
                                          :mod (s3 / string-entity
                                                :value MATH 
 :math (O11 / SUP :op0(V16 / ℝ) :op1(V17 / 𝑛))))))))
            :snt3 (t / try-01
                  :arg0 (ii5 / i)
                  :arg1 (d3 / deduce-01
                        :arg0 ii5
                        :arg1 (v3 / variant
                              :ord (o / ordinal-entity
                                    :value 2)
                              :arg1-of (m3 / mean-01
                                    :arg2 (s4 / string-entity
                                          :value MATH 
 :math (U7 / eq :op0(O12 / norm :op0(V18 / 𝐴)) :op0(F3 / max :op0(O13 / SUB :op0(F4 / max) :op1(U8 / eq :op0(O14 / norm :op0(V19 / 𝐰)) :op0(N2 / 1))) :op1(O15 / norm :op0(U9 / times :op0(V20 / 𝐴) :op0(V21 / 𝐰)))))
                                          :arg1-of (m4 / mean-01
                                                :arg2 (s5 / string-entity
                                                      :value MATH 
 :math (E1 /  :op0(O16 / fragments) :op1(V22 / v) :op2(U10 / eq) :op3(O17 / divide :op0(E2 /  :op0(O18 / fragments) :op1(V23 / ∥) :op2(V24 / v) :op3(V25 / ∥) :op4(V26 / v)) :op1(E3 /  :op0(O19 / fragments) :op1(V27 / ∥) :op2(V28 / v) :op3(V29 / ∥) :op4(U11 / eq) :op5(V30 / w) :op6(V31 / ∥) :op7(V32 / v) :op8(V33 / ∥))))))))))
                  :arg1-of (c3 / cause-01
                        :arg0 (k / know-01
                              :polarity -
                              :arg0 ii5
                              :arg1 (t2 / thing
                                    :manner-of (c4 / continue-01
                                          :arg0 ii5
                                          :source (h / here))))))))"
B.233	"(a / and
      :op1 (t / thing
            :arg0-of (m / motivate-01
                  :arg2 (d / define-01
                        :arg1 (t2 / thing
                              :arg2-of (v / vectors-01)
                              :mod (t3 / tangent))
                        :manner (d2 / derive-01))))
      :op2 (t4 / thing
            :arg0-of (c / cause-01
                  :arg1 (r / recommend-01
                        :arg1 (a2 / act-02
                              :arg0 (t5 / they)
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (O1 / in :op0(V1 / 𝑓) :op1(U1 / times :op0(O2 / SUP :op0(V2 / 𝐶) :op1(C1 / infinity)) :op0(V3 / 𝑀)))))))))"
B.234	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (p / polynomial
                  :domain (s / string-entity
                        :value MATH 
 :math (V1 / 𝑓))))
      :snt2 (s2 / say-01
            :arg0 (t / theorem
                  :name (n / name
                        :op1 ""sard's""
                        :op2 ""throne""))
            :arg1 (m2 / measure-01
                  :arg1 (ii / image
                        :mod (s3 / string-entity
                              :value MATH 
 :math (U1 / times :op0(V2 / 𝑓) :op0(V3 / 𝑍)))
                        :part-of (s4 / set
                              :consist-of (v / value
                                    :arg1-of (c / critical-02)
                                    :mod (s5 / string-entity
                                          :value MATH 
 :math (U2 / eq :op0(V4 / 𝑍) :op0(O1 / conditional-set :op0(O2 / in :op0(V5 / 𝑎) :op1(V6 / 𝑋)) :op1(U3 / eq :op0(U4 / times :op0(O3 / SUP :op0(V7 / 𝑓) :op1(V8 / ′)) :op0(V9 / 𝑎)) :op0(N1 / 0))))))))
                  :arg2 (z / zero)))
      :snt3 (a / amr-unknown
            :condition (w / want-01
                  :arg0 (ii2 / i)
                  :arg1 (s6 / show-01
                        :arg0 ii2
                        :arg1 (m3 / measure-01
                              :arg1 (s7 / set
                                    :mod (s8 / string-entity
                                          :value MATH 
 :math (V10 / 𝑍)))
                              :arg2 0
                              :location (d / domain
                                    :mod (s9 / string-entity
                                          :value MATH 
 :math (V11 / 𝑓))))))))"
B.235	"(m / method
      :manner-of (s / solve-01
            :arg1 (e / equation
                  :mod (p / product-of
                        :op1 MATH 
 :math (U1 / eq :op0(U2 / plus :op0(U3 / times :op0(V1 / 𝑎) :op0(O1 / SUP :op0(V2 / 𝑥) :op1(N1 / 2))) :op0(U4 / times :op0(V3 / 𝑏) :op0(V4 / 𝑥)) :op0(V5 / 𝑐)) :op0(O2 / SUP :op0(V6 / 𝑦) :op1(N2 / 2))))
                  :mod (d / diophantine))))"
B.236	"(m / multi-sentence
      :snt1 (s / say-01
            :arg0 (r / reference-04
                  :example (a / and
                        :op1 (p / publication
                              :name (n / name
                                    :op1 ""wikipedia""))
                        :op2 (e / elsewhere)))
            :arg1 (e2 / equal-01
                  :arg1 (d / distribution
                        :name (n2 / name
                              :op1 ""dirichlet"")
                        :arg2-of (p2 / parametrize-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(V1 / 𝜶) :op0(M1 / V-3 :op0(O1 / SUB :op0(V2 / 𝛼) :op1(N1 / 1)) :op1(V3 / …) :op2(O2 / SUB :op0(V4 / 𝛼) :op1(V5 / 𝐾)))))))
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V6 / 𝐷) :op0(M2 / V-3 :op0(O3 / SUB :op0(V7 / 𝑥) :op1(N2 / 1)) :op1(V8 / …) :op2(O4 / SUB :op0(V9 / 𝑥) :op1(V10 / 𝐾)))) :op0(U4 / times :op0(O5 / divide :op0(N3 / 1) :op1(U5 / times :op0(V11 / B) :op0(V12 / 𝜶) :op0(O6 / SUB :op0(O7 / SUP :op0(O8 / SUB :op0(O9 / product) :op1(U6 / eq :op0(V13 / 𝑖) :op0(N4 / 1))) :op1(V14 / 𝐾)) :op1(O10 / SUP :op0(O11 / SUB :op0(V15 / 𝑥) :op1(V16 / 𝑖)) :op1(O12 / minus :op0(O13 / SUB :op0(V17 / 𝛼) :op1(V18 / 𝑖)) :op1(N5 / 1))))))))
                        :arg1-of (e3 / equal-01
                              :arg2 (s4 / string-entity
                                    :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(V19 / B) :op0(V20 / 𝜶)) :op0(O14 / divide :op0(O15 / SUB :op0(O16 / SUP :op0(O17 / SUB :op0(O18 / product) :op1(U9 / eq :op0(V21 / 𝑖) :op0(N6 / 1))) :op1(V22 / 𝐾)) :op1(U10 / times :op0(V23 / Γ) :op0(O19 / SUB :op0(V24 / 𝛼) :op1(V25 / 𝑖)))) :op1(U11 / times :op0(V26 / Γ) :op0(O20 / SUB :op0(O21 / SUP :op0(O22 / SUB :op0(O23 / sum) :op1(U12 / eq :op0(V27 / 𝑖) :op0(N7 / 1))) :op1(V28 / 𝐾)) :op1(O24 / SUB :op0(V29 / 𝛼) :op1(V30 / 𝑖)))))))))))
      :snt2 (e4 / equal-01
            :arg1 (s5 / string-entity
                  :value MATH 
 :math (U13 / eq :op0(U14 / times :op0(V31 / 𝐷) :op0(O25 / interval$O-O$$ :op0(O26 / SUB :op0(V32 / 𝑥) :op1(N8 / 1)) :op1(O27 / SUB :op0(V33 / 𝑥) :op1(N9 / 2)))) :op0(U15 / times :op0(O28 / divide :op0(N10 / 1) :op1(V34 / B)) :op0(V35 / 𝜶))))
            :arg2 (s6 / string-entity
                  :value MATH 
 :math (U16 / and :op0(U17 / eq :op0(U18 / times :op0(V36 / B) :op0(V37 / 𝜶)) :op0(U19 / times :op0(O29 / divide :op0(U20 / times :op0(V38 / Γ) :op0(O30 / SUP :op0(N11 / 1) :op1(N12 / 2))) :op1(V39 / Γ)) :op0(N13 / 2))) :op0(U21 / eq :op0(N14 / 1))))
            :arg1-of (c / cause-01
                  :arg0 (e5 / equal-01
                        :arg1 (s7 / string-entity
                              :value MATH 
 :math (U22 / eq :op0(U23 / times :op0(V40 / 𝐷) :op0(O31 / interval$O-O$$ :op0(O32 / SUB :op0(V41 / 𝑥) :op1(N15 / 1)) :op1(O33 / SUB :op0(V42 / 𝑥) :op1(N16 / 2)))) :op0(N17 / 1)))
                        :arg2 (s8 / string-entity
                              :value MATH 
 :math (M3 / L-2 :op0(O34 / SUB :op0(V43 / 𝑥) :op1(N18 / 1)) :op1(O35 / SUB :op0(V44 / 𝑥) :op1(N19 / 2)))
                              :mod (a2 / all)))
                  :condition (a3 / and
                        :op1 (s9 / string-entity
                              :value MATH 
 :math (U24 / eq :op0(V45 / 𝐾) :op0(N20 / 2)))
                        :op2 (s10 / string-entity
                              :value MATH 
 :math (U25 / and :op0(U26 / eq :op0(O36 / SUB :op0(V46 / 𝛼) :op1(N21 / 1)) :op0(O37 / SUB :op0(V47 / 𝛼) :op1(N22 / 2))) :op0(U27 / eq :op0(N23 / 1))))))))"
B.237	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (r / rewrite-01
                  :arg0 ii
                  :arg1 (t / type
                        :mod (t2 / thing
                              :arg1-of (p / propose-01))
                        :arg1-of (f / follow-01)
                        :arg0-of (ii2 / imply-01
                              :polarity -
                              :arg1 (t3 / thing
                                    :arg1-of (s / simple-02)
                                    :arg1-of (d / double-01)))
                        :example (a / and
                              :op1 (s2 / string-entity
                                    :value MATH 
 :math (F1 / → :op0(U1 / and :op0(V1 / 𝑝) :op0(U2 / times :op0(O1 / not) :op0(V2 / 𝑞))) :op1(V3 / 𝑟)))
                              :op2 (s3 / string-entity
                                    :value MATH 
 :math (F2 / → :op0(U3 / and :op0(V4 / 𝑝) :op0(U4 / times :op0(O2 / not) :op0(V5 / 𝑞))) :op1(U5 / and :op0(V6 / 𝑟) :op0(V7 / 𝑞))))
                              :op3 (s4 / string-entity
                                    :value MATH 
 :math (E1 /  :op0(O3 / fragments) :op1(E2 /  :op0(O4 / fragments) :op1(V8 / $) :op2(V9 / p) :op3(V10 / →) :op4(V11 / r) :op5(V12 / $$) :op2(V13 / ↔) :op3(E3 /  :op0(O5 / fragments) :op1(V14 / $) :op2(V15 / q) :op3(V16 / →) :op4(V17 / r) :op5(V18 / $$)))))))))
      :snt2 (o / obligate-01
            :arg1 (w2 / we)
            :arg2 (w3 / write-01
                  :arg0 w2
                  :arg1 (t4 / thing
                        :arg1-of (p2 / propose-01)
                        :mod (t5 / this)
                        :example (o2 / or
                              :op1 (t6 / thing
                                    :arg1-of (p3 / propose-01)
                                    :ord (o3 / ordinal-entity
                                          :value 1)
                                    :arg1-of (r2 / resemble-01
                                          :arg2 (s5 / string-entity
                                                :value MATH 
 :math (U6 / and :op0(V19 / 𝑝) :op0(U7 / times :op0(O6 / not) :op0(V20 / 𝑞)) :op0(V21 / 𝑟)))))
                              :op2 (m2 / mean-01
                                    :arg1 (s6 / something
                                          :mod (e / else))
                                    :arg2 (a2 / amr-unknown))))
                  :arg0-of (ii3 / imply-01
                        :polarity -))))"
B.238	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg1 (h / have-condition-91
                  :arg1 (r / relation
                        :mod (e / equate-01)
                        :domain (s / string-entity
                              :value MATH 
 :math (V1 / 𝑅)))
                  :arg2 (a / and
                        :op1 (r2 / reflexive
                              :domain s)
                        :op2 (s2 / symmetric
                              :domain s)
                        :op3 (t / transitive
                              :domain s))))
      :snt2 (s3 / see-01
            :arg0 (w / we)
            :arg1 (a2 / and
                  :op1 (ii / imply-01
                        :li 1
                        :arg0 (s4 / string-entity
                              :value MATH 
 :math (U1 / similar-to))
                        :arg1 s2
                        :domain (s5 / string-entity
                              :value MATH 
 :math (U2 / similar-to))))
            :op2 (ii2 / imply-01
                  :li 3
                  :arg0 s4
                  :arg1 t
                  :domain (s6 / string-entity
                        :value MATH 
 :math (U3 / similar-to))))
      :condition (a3 / and
            :op1 (e2 / equal-01
                  :arg1 (s7 / string-entity
                        :value MATH 
 :math (U4 / similar-to))
                  :arg2 (s8 / string-entity
                        :value MATH 
 :math (U5 / similar-to :op0(V2 / 𝑏) :op0(V3 / 𝑐))))
            :op2 (e3 / equal-01
                  :arg1 (s9 / string-entity
                        :value MATH 
 :math (U6 / similar-to :op0(V4 / 𝑎) :op0(V5 / 𝑎)))
                  :arg2 (s10 / string-entity
                        :value MATH 
 :math (U7 / similar-to))))
      :arg1-of (c2 / cause-01
            :arg0 (k / know-01
                  :arg0 w
                  :arg1 (t2 / thing
                        :arg2-of (m2 / mean-01
                              :arg1 s9))
                  :mod (ii3 / intuitive)))
      :time (n / now)
      :manner (w2 / work-01
            :arg0 w
            :arg1 (ii4 / intuition
                  :topic (r3 / relation
                        :mod (e4 / equate-01)
                        :domain (s11 / string-entity
                              :value MATH 
 :math (U8 / similar-to))))
            :time (n2 / now))
      :arg1-of (f / follow-04))"
B.239	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (r / relation-03
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / 𝑅))
                  :mod (s2 / symmetric)
                  :mod (t / transitive)))
      :snt2 (ii / imply-01
            :arg0 (p / property
                  :mod s2)
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (O1 / in :op0(O2 / interval$O-O$$ :op0(V2 / 𝑦) :op1(V3 / 𝑥)) :op1(V4 / 𝑅)))
            :condition (s4 / string-entity
                  :value MATH 
 :math (O3 / in :op0(O4 / interval$O-O$$ :op0(V5 / 𝑥) :op1(V6 / 𝑦)) :op1(V7 / 𝑅))))
      :snt3 (p2 / possible-01
            :arg1 (c / conclude-01
                  :arg0 (w / we)
                  :arg1 (s5 / string-entity
                        :value MATH 
 :math (O5 / in :op0(O6 / interval$O-O$$ :op0(V8 / 𝑥) :op1(V9 / 𝑥)) :op1(V10 / 𝑅)))
                  :manner (u / use-01
                        :arg0 w
                        :arg1 (p3 / property
                              :mod t)
                        :arg2 (a / and
                              :op1 (s6 / string-entity
                                    :value MATH 
 :math (O7 / interval$O-O$$ :op0(V11 / 𝑥) :op1(V12 / 𝑦)))
                              :op2 (s7 / string-entity
                                    :value MATH 
 :math (O8 / interval$O-O$$ :op0(V13 / 𝑦) :op1(V14 / 𝑥))))))))"
B.240	"(m / multi-sentence
      :snt1 (a / and
            :op1 (g / get-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V1 / Δ) :op0(U2 / times :op0(O1 / SUP :op0(V2 / 𝑏) :op1(N1 / 2)) :op0(V3 / –) :op0(N2 / 4) :op0(V4 / 𝑎) :op0(V5 / 𝑐)))))
            :op2 (g2 / get-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (E1 /  :op0(O2 / fragments) :op1(V6 / x) :op2(U3 / eq) :op3(E2 /  :op0(O3 / fragments) :op1(V7 / $) :op2(T1 / –b) :op3(O4 / plus-or-minus) :op4(O5 / root :op0(V8 / Δ) :op1(N3 / 2)) :op5(V9 / $$) :op4(O6 / divide) :op5(N4 / 2) :op6(V10 / a) :op7(V11 / $$))))
                  :time (t / then))
            :manner-of (g3 / get-01
                  :arg1 (t2 / thing
                        :arg2-of (r / result-01))
                  :mod (b / bhaskar)))
      :snt2 (c / contrast-01
            :arg2 (c2 / come-01
                  :arg1 (c3 / constant
                        :mod (t3 / this))
                  :arg3 (a2 / amr-unknown))))"
B.241	"(e / equal-01
      :polarity -
      :arg1 (s / string-entity
            :value MATH 
 :math (O1 / minus :op0(U1 / plus :op0(O2 / SUP :op0(V1 / 𝑛) :op1(N1 / 3)) :op0(U2 / times :op0(N2 / 6) :op0(O3 / SUP :op0(V2 / 𝑛) :op1(N3 / 2)))) :op1(U3 / times :op0(N4 / 7) :op0(V3 / 𝑛)))))"
B.242	"(m / multi-sentence
      :snt1 (s / show-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (h / have-degree-91
                  :arg1 (n / number
                        :name (n2 / name
                              :op1 MATH 
 :math (V1 / 𝑝)
                              :op2 ""eqx""))
                  :arg2 (g / great)
                  :arg3 (m2 / more)
                  :arg4 (n3 / number
                        :name (n4 / name
                              :op1 MATH 
 :math (N1 / 3)
                              :op2 ""eqx""))))
      :snt2 (d / divide-02
            :arg0 (n5 / number
                  :name (n6 / name
                        :op1 MATH 
 :math (N2 / 24)
                        :op2 ""eqx""))
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (O1 / minus :op0(O2 / SUP :op0(V2 / 𝑝) :op1(N3 / 2)) :op1(N4 / 1)))
            :arg1-of (e / even-02)
            :arg1-of (e2 / even-02))
      :snt3 (h2 / have-03
            :arg0 (w / we)
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O3 / divide :op0(U2 / times :op0(U3 / plus :op0(V3 / 𝑝) :op0(N5 / 1)) :op0(O4 / minus :op0(V4 / 𝑝) :op1(N6 / 1))) :op1(N7 / 24)) :op0(V5 / 𝑘)))
            :time (s4 / since
                  :op1 (s5 / string-entity
                        :value MATH 
 :math (U4 / eq :op0(N8 / 24) :op0(F1 / ⋅ :op0(O5 / SUP :op0(N9 / 2) :op1(N10 / 3)) :op1(N11 / 3)))))
            :time (n7 / now)
            :arg1-of (c / cause-01
                  :arg0 (a / and
                        :op1 s5
                        :op2 (c2 / contain-01
                              :arg0 (n8 / numerator)
                              :arg1 (f / factor
                                    :quant (a2 / at-least
                                          :op1 1)
                                    :mod (e3 / even-02))
                              :time (a3 / always)))))
      :snt4 (o / or
            :op1 (c3 / correct-02
                  :arg1 (r / reason-01
                        :arg0 (ii / i)
                        :location (h3 / here)))
            :op2 (m3 / miss-02
                  :arg0 ii
                  :arg1 (s6 / something)
                  :location (h4 / here))
            :polarity (a4 / amr-unknown)))"
B.243	"(h / have-condition-91
      :arg1 (e / equal-01
            :arg2 MATH 
 :math (U1 / eq :op0(V1 / 𝑥) :op0(N1 / 1)))
      :arg2 (e2 / equal-01
            :arg2 MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(O2 / SUP :op0(N2 / 2) :op1(U2 / times :op0(N3 / 2) :op0(V2 / 𝑘))) :op2(O3 / minus) :op3(O4 / SUP :op0(V3 / 𝑥) :op1(N4 / 2)) :op4(V4 / |) :op5(O5 / SUP :op0(N5 / 2) :op1(U3 / times :op0(N6 / 2) :op0(V5 / 𝑘))) :op6(O6 / minus) :op7(N7 / 1))))"
B.244	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (r / relation-03
                  :arg1 (e / equal-01)
                  :arg2 (s / string-entity
                        :value MATH 
 :math (V1 / 𝑅))
                  :arg1-of (d / define-01
                        :arg0 (s2 / string-entity
                              :value MATH 
 :math (F1 / ⇔ :op0(U1 / times :op0(V2 / 𝑎) :op0(V3 / 𝑅) :op0(V4 / 𝑏)) :op1(O1 / in :op0(O2 / minus :op0(V5 / 𝑎) :op1(V6 / 𝑏)) :op1(V7 / ℤ)))))))
      :snt2 (c / cardinality
            :domain (s3 / string-entity
                  :value MATH 
 :math (F2 / abs :op0(O3 / divide :op0(V8 / ℝ) :op1(V9 / 𝑅))))
            :arg1-of (m2 / mean-01
                  :arg2 e
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (O4 / divide :op0(V10 / ℝ) :op1(V11 / 𝑅)))
                  :arg2 (q / quotient
                        :consist-of (s5 / string-entity
                              :value MATH 
 :math (V12 / ℝ)
                              :prep-under (s6 / string-entity
                                    :value MATH 
 :math (V13 / 𝑅)))))))"
B.245	"(e / equal-01
      :arg1 (t / that)
      :arg2 (e2 / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(U3 / times :op0(V2 / 𝑓) :op0(V3 / 𝑧))) :op0(F1 / sin :op0(V4 / 𝑧))))
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (O1 / in :op0(V5 / 𝑧) :op1(V6 / ℤ)))))"
B.246	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(V1 / 𝜃) :op0(O1 / divide :op0(O2 / SUP :op0(N1 / 180) :op1(O3 / compose)) :op1(V2 / 𝑛)))))
      :snt2 (c2 / cause-01
            :arg0 (g / get-01
                  :arg0 (w / we)
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(F1 / csc :op0(V3 / 𝜃)) :op0(U3 / plus :op0(F2 / csc :op0(U4 / times :op0(N2 / 2) :op0(V4 / 𝜃))) :op0(F3 / csc :op0(U5 / times :op0(N3 / 3) :op0(V5 / 𝜃))))))
                  :time (t / then))
            :arg1 (s3 / string-entity
                  :value MATH 
 :math U1 ))
      :snt3 (s4 / sure-02
            :polarity -
            :arg0 (ii / i)
            :arg1 (p / proceed-01
                  :arg0 ii
                  :arg2 (t2 / there)
                  :manner (a / amr-unknown
                        :mod (q / quite)))
            :arg1-of (c3 / cause-01
                  :arg0 (s5 / seem-01
                        :polarity -
                        :arg1 (w2 / work-09
                              :arg1 (u / use-01
                                    :arg0 ii
                                    :arg1 (f / formula
                                          :mod (a2 / angle
                                                :mod (d / double)
                                                :mod (t3 / triple)))))))))"
B.247	"(m / multi-sentence
      :snt1 (c / coordinate-01
            :arg1 (a / and
                  :op1 (p / point
                        :name (n / name
                              :op1 MATH 
 :math (V1 / 𝐴)))
                  :op2 (p2 / point
                        :name (n2 / name
                              :op1 MATH 
 :math (V2 / 𝐵))))
            :arg2 (a2 / amr-unknown))
      :snt2 (c2 / come-01
            :arg1 (ii / i)
            :arg4 (f / far
                  :mod (t / this))
            :arg1-of (m2 / mean-01
                  :arg2 (c3 / coordinate-01
                        :arg1 (p3 / point
                              :name (n3 / name
                                    :op1 MATH 
 :math (V3 / 𝑃))
                              :location (c4 / circle
                                    :mod (s / string-entity
                                          :value MATH 
 :math (V4 / 𝐶))))
                        :arg2 (a3 / and
                              :op1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(V5 / 𝑥) :op0(U2 / times :op0(N1 / 5) :op0(F1 / cos :op0(V6 / 𝜃)))))
                              :op2 (s3 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(V7 / 𝑦) :op0(U4 / plus :op0(N2 / 8) :op0(U5 / times :op0(N3 / 5) :op0(F2 / sin :op0(V8 / 𝜃))))))))))
      :snt3 (c5 / contrast-01
            :arg1 (r / recommend-01
                  :arg1 (u / use-01
                        :arg0 ii
                        :arg1 (t2 / this)
                        :arg2 (f2 / find-01
                              :arg0 ii
                              :arg1 (a4 / and
                                    :op1 (p4 / point
                                          :name (n4 / name
                                                :op1 MATH 
 :math (V9 / 𝐴)))
                                    :op2 (p5 / point
                                          :name (n5 / name
                                                :op1 MATH 
 :math (V10 / 𝐵)))))
                        :time (n6 / now))
                  :arg2 ii)
            :arg2 (k / know-01
                  :polarity -
                  :arg0 ii
                  :arg1 (t3 / thing
                        :manner-of (p6 / proceed-01
                              :arg0 ii)))))"
B.248	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (g / group
                        :mod (a2 / abelian)
                        :arg1-of (o / order-03
                              :mod (e / even))
                        :domain (s / string-entity
                              :value MATH 
 :math (V1 / 𝐺)))
                  :op2 (g2 / group
                        :mod (s2 / string-entity
                              :value MATH 
 :math (O1 / assign :op0(V2 / 𝑀) :op1(O2 / conditional-set :op0(O3 / in :op0(V3 / 𝑔) :op1(V4 / 𝐺)) :op1(U1 / eq :op0(O4 / SUP :op0(V5 / 𝑔) :op1(N1 / 2)) :op0(V6 / 𝑒))))))))
      :snt2 (a3 / and
            :op1 (e2 / easy-05
                  :arg1 (s3 / show-01
                        :arg1 (s4 / sugroup
                              :domain (s5 / string-entity
                                    :value MATH 
 :math (V7 / 𝑀))
                              :arg1-of (ii / include-91
                                    :arg2 (s6 / string-entity
                                          :value MATH 
 :math (V8 / 𝐺))))))
            :op2 (o2 / obligate-01
                  :arg2 (p / power-01
                        :arg1 (e3 / element
                              :poss (s7 / string-entity
                                    :value MATH 
 :math (V9 / 𝑀)))
                        :arg2 (s8 / string-entity
                              :value MATH 
 :math (N2 / 2))))))"
B.249	"(m / multi-sentence
      :snt1 (o / obligate-01
            :arg1 (ii / i)
            :arg2 (s / show-01
                  :arg0 ii
                  :arg1 (g / group
                        :mod (a / abelian)
                        :domain (g2 / group
                              :mod (s2 / string-entity
                                    :value MATH 
 :math (M1 / V-3 :op0(V1 / 𝐺) :op1(U1 / times) :op2(V2 / 𝑒))
                                    :arg1-of (f / follow-04)
                                    :arg0-of (h / have-03
                                          :arg1 (o2 / operate-01
                                                :arg0 g2))
                                    :arg1-of (d / define-01
                                          :arg2 (s3 / string-entity
                                                :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V3 / 𝑔) :op0(V4 / 𝑔)) :op0(V5 / 𝑒))
                                                :arg1-of (r / rate-entity-91
                                                      :arg2 (s4 / string-entity
                                                            :value MATH 
 :math (O1 / in :op0(V6 / 𝑔) :op1(V7 / 𝐺))
                                                            :mod (e / every)))))))))
            :snt2 (o3 / obligate-01
                  :arg1 (o4 / one)
                  :arg2 (s5 / show-01
                        :arg0 o4
                        :arg1 (c / commutative
                              :domain (g3 / group))
                        :mod (o5 / only))
                  :purpose (d2 / do-02
                        :arg0 o4
                        :arg1 (t / that)))))"
B.250	"(s / show-01
      :arg1 (s2 / string-entity
            :value MATH 
 :math (O1 / leq :op0(O2 / SUP :op0(U1 / times :op0(O3 / SUB :op0(V1 / 𝑎) :op1(N1 / 1)) :op0(O4 / SUB :op0(V2 / 𝑎) :op1(N2 / 2)) :op0(V3 / …) :op0(O5 / SUB :op0(V4 / 𝑎) :op1(V5 / 𝑛))) :op1(O6 / divide :op0(N3 / 1) :op1(V6 / 𝑛))) :op1(O7 / divide :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / sum) :op1(U2 / eq :op0(V7 / 𝑖) :op0(N4 / 1))) :op1(V8 / 𝑛)) :op1(O12 / SUB :op0(V9 / 𝑎) :op1(V10 / 𝑖))) :op1(V11 / 𝑛))))
      :manner (a / amr-unknown))"
B.251	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (s / solve-01
                        :arg0 ii
                        :arg1 (t2 / this))
                  :duration (m2 / multiple
                        :op1 (t3 / temporal-quantity
                              :quant 1
                              :unit (h / hour))))
            :arg2 (s2 / seem-01
                  :arg1 (p / possible-01
                        :polarity -
                        :arg1 (d / do-02
                              :arg0 ii
                              :arg1 s)
                        :mod (j / just))))
      :snt2 (a / and
            :op2 (k / know-01
                  :arg0 (ii2 / i)
                  :arg1 (o / obligate-01
                        :arg1 ii2
                        :arg2 (s3 / show-01
                              :arg0 ii2
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U1 / and :op0(O1 / lt :op0(O2 / SUP :op0(U2 / plus :op0(V1 / 𝑘) :op0(N1 / 2)) :op1(O3 / divide :op0(N2 / 1) :op1(U3 / plus :op0(V2 / 𝑘) :op0(N3 / 2)))) :op1(V3 / …)) :op0(O4 / lt :op0(O5 / SUP :op0(U4 / plus :op0(V4 / 𝑘) :op0(N4 / 1)) :op1(O6 / divide :op0(N5 / 1) :op1(U5 / plus :op0(V5 / 𝑘) :op0(N6 / 1))))))
                                    :arg1-of (ii3 / instead-of-91
                                          :arg2 (a2 / assume-02
                                                :arg1 (s5 / string-entity
                                                      :value MATH 
 :math (O7 / lt :op0(O8 / SUP :op0(U6 / plus :op0(V6 / 𝑘) :op0(N7 / 1)) :op1(O9 / divide :op0(N8 / 1) :op1(U7 / plus :op0(V7 / 𝑘) :op0(N9 / 1)))) :op1(O10 / SUP :op0(V8 / 𝑘) :op1(O11 / divide :op0(N10 / 1) :op1(V9 / 𝑘)))))
                                                :time (s6 / start-01))))))))
      :snt3 (w / welcome-01
            :arg1 (h2 / hint-01
                  :mod (a3 / any))
            :degree (h3 / high-02)))"
B.252	"(m / multi-sentence
      :snt1 (p / publication-91
            :arg0 (p2 / person
                  :name (n / name
                        :op1 ""julian""
                        :op2 ""havil""))
            :arg1 (p3 / publication
                  :name (n2 / name
                        :op1 ""exploring""
                        :op2 ""euler's""
                        :op3 ""constant""))
            :arg4 (p4 / person
                  :name (n3 / name
                        :op1 ""gamma"")))
      :snt2 (k / know-01
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / and :op0(U2 / eq :op0(U3 / times :op0(V1 / 𝜁) :op0(N1 / 2)) :op0(U4 / plus :op0(O1 / divide :op0(N2 / 1) :op1(O2 / SUP :op0(N3 / 1) :op1(N4 / 2))) :op0(O3 / divide :op0(N5 / 1) :op1(O4 / SUP :op0(N6 / 2) :op1(N7 / 2))) :op0(O5 / divide :op0(N8 / 1) :op1(O6 / SUP :op0(N9 / 3) :op1(N10 / 2))) :op0(V2 / ⋯))) :op0(U5 / eq :op0(O7 / divide :op0(O8 / SUP :op0(V3 / 𝜋) :op1(N11 / 2)) :op1(N12 / 6)))))
                  :arg2 (p5 / prove-01
                        :arg0 (p6 / person
                              :name (n4 / name
                                    :op1 ""euler""))
                        :arg1 e
                        :arg1-of (n5 / nice-01
                              :degree (q / quite))))
            :degree (w / well)
            :location (m2 / mathematics
                  :mod (p7 / pop)
                  :mod (e2 / especially)))
      :snt3 (l / like-02
            :arg0 (ii / i)
            :arg1 k
            :arg0 ii
            :arg1 (l2 / location
                  :location-of (a / appear-01
                        :arg1 (c / constant
                              :mod (t / this))
                        :arg1-of (t2 / trivial-02)
                        :mod (e3 / else)))))"
B.253	"(m / multi-sentence
      :snt1 (s / show-01
            :arg0 (ii / i)
            :arg1 (r / result
                  :location (b / below)
                  :arg1-of (ii2 / integrate-01
                        :arg2 (c / contour)))
            :manner (a / amr-unknown)
            :manner (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(O5 / minus :op0(C1 / infinity))) :op1(C2 / infinity)) :op1(U2 / times :op0(O6 / divide :op0(O7 / minus :op0(F1 / cos :op0(U3 / times :op0(V1 / 𝑏) :op0(V2 / 𝑥))) :op1(F2 / cos :op0(U4 / times :op0(V3 / 𝑎) :op0(V4 / 𝑥)))) :op1(O8 / SUP :op0(V5 / 𝑥) :op1(N1 / 2))) :op0(F3 / d :op0(V6 / 𝑥)))) :op0(U5 / times :op0(V7 / 𝜋) :op0(O9 / minus :op0(V8 / 𝑎) :op1(V9 / 𝑏))))
                  :arg1-of (m2 / mean-01
                        :arg2 (s3 / string-entity
                              :value ""a>b>0""
                              :arg1-of ii2
                              :arg2 c))))
      :snt2 (a2 / appreciate-02
            :arg1 (h / help-01
                  :mod (a3 / any))
            :degree (g / great)
            :arg2-of (t / thank-01
                  :arg1 (y / you))))"
B.254	"(p / possible-01
      :arg1 (g / get-01
            :arg0 (ii / i)
            :arg1 (h / hint
                  :mod (s / some)
                  :topic (t / thing
                        :manner-of (s2 / solve-01
                              :arg1 (t2 / thing
                                    :mod (ii2 / integral)
                                    :mod (t3 / this)
                                    :arg1-of (e / equal-01
                                          :arg2 (s3 / string-entity
                                                :value MATH 
 :math (U1 / eq :op0(V1 / 𝐼) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(V2 / 𝜋)) :op1(O5 / divide :op0(U2 / times :op0(V3 / 𝑥) :op0(V4 / 𝑑) :op0(V5 / 𝑥)) :op1(O6 / minus :op0(N2 / 1) :op1(U3 / times :op0(V6 / 𝑠) :op0(V7 / 𝑖) :op0(V8 / 𝑛) :op0(V9 / 𝑥) :op0(V10 / 𝑐) :op0(V11 / 𝑜) :op0(V12 / 𝑠) :op0(V13 / 𝑥)))))))))))))
      :polarity (a / amr-unknown))"
B.255	"(m / multi-sentence
      :snt1 (c / come-across-21
            :arg0 (ii / i)
            :arg1 (p / problem
                  :topic (f / find-01
                        :arg1 (ii2 / integral
                              :mod (s / string-entity
                                    :value MATH 
 :math (O1 / proportional-to)))))
            :ord (o / ordinal-entity
                  :value 1)
            :mod (t / this))
      :snt2 (h / have-03
            :arg0 (ii3 / i)
            :arg1 (d / distribute-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O2 / proportional-to :op0(U1 / times :op0(O3 / SUB :op0(V1 / 𝑓) :op1(M1 / L-2 :op0(V2 / 𝑋) :op1(V3 / 𝑌))) :op0(O4 / interval$O-O$$ :op0(V4 / 𝑥) :op1(V5 / 𝑦))) :op1(F1 / exp :op0(O5 / minus :op0(U2 / times :op0(N1 / 13) :op0(V6 / 𝑥) :op0(V7 / 𝑦)) :op1(U3 / times :op0(N2 / 94) :op0(O6 / SUP :op0(V8 / 𝑥) :op1(N3 / 2))) :op2(U4 / times :op0(O7 / divide :op0(N4 / 1) :op1(N5 / 2)) :op0(O8 / SUP :op0(V9 / 𝑦) :op1(N6 / 2)))))))
                  :mod (j / joint))
            :snt3 (a / attempt-01
                  :arg0 ii3
                  :arg1 (f2 / find-01
                        :arg0 ii3
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (U5 / times :op0(O9 / SUB :op0(V10 / 𝑓) :op1(V11 / 𝑋)) :op0(V12 / 𝑥)))
                        :arg1-of (f3 / follow-04)))))"
B.256	"(m / multi-sentence
      :snt1 (a / and
            :op1 (l / learn-01
                  :arg0 (ii / i)
                  :arg1 (l2 / limit-01))
            :op2 (p / possible-01
                  :polarity -
                  :arg1 (u / understand-01
                        :arg0 ii
                        :arg1 (s / something
                              :arg1-of (m2 / mean-01
                                    :arg2 (h / have-condition-91
                                          :arg2 (h2 / have-03
                                                :arg0 (w / we)
                                                :arg1 (l3 / limit-01
                                                      :arg1 (s2 / string-entity
                                                            :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(O1 / divide :op0(O2 / minus :op0(O3 / SUP :op0(V3 / 𝑥) :op1(N1 / 2)) :op1(N2 / 1)) :op1(O4 / minus :op0(V4 / 𝑥) :op1(N3 / 1))))))))))
                        :degree (q / quite))))
      :snt2 (o / obligate-01
            :arg1 (w2 / we)
            :arg2 (t / take-01
                  :arg0 w2
                  :arg1 (l4 / limit-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (O5 / limit :op0(O6 / SUB :op0(O7 / limit) :op1(F1 / → :op0(V5 / 𝑥) :op1(N4 / 1))) :op1(O8 / divide :op0(O9 / minus :op0(O10 / SUP :op0(V6 / 𝑥) :op1(N5 / 2)) :op1(N6 / 1)) :op1(O11 / minus :op0(V7 / 𝑥) :op1(N7 / 1)))))
                        :arg1-of (f / follow-04)
                        :mod (t2 / this)))
            :condition (r / realize-01
                  :arg0 w2
                  :arg1 (c / continue-01
                        :polarity -
                        :arg1 (f2 / function-01)
                        :time (e / equal-01
                              :arg1 (v / variable
                                    :name (n / name
                                          :op1 ""x""))
                              :arg2 (v2 / variable
                                    :name (n2 / name
                                          :op1 ""1""))))
                  :time (a2 / as-soon-as
                        :op1 (l5 / look-01
                              :arg0 w2
                              :arg1 (f3 / function-01))))
            :snt3 (p2 / possible-01
                  :arg1 (s4 / say-01
                        :arg0 (ii2 / i)
                        :arg1 (t3 / that)
                        :mod (b / by-the-way)
                        :snt4-of o))
            :arg0 (w3 / we)
            :arg1 (w4 / want-01
                  :arg0 w3
                  :arg1 (s5 / see-01
                        :arg0 w3
                        :arg1 (v3 / value
                              :mod (y / y
                                    :arg1-of (m3 / mean-01
                                          :arg2 (ii3 / image)))
                              :arg1-of (a3 / approach-01
                                    :arg2 (c2 / close-10
                                          :arg1 v3
                                          :arg2 (n3 / numerical-quantity
                                                :quant 1)
                                          :arg2-of (h3 / have-degree-91
                                                :arg1 v3
                                                :arg3 (m4 / more)))))))))"
B.257	"(m / multi-sentence
      :snt1 (a / and
            :op1 (s / sit-01
                  :arg1 (ii / i)
                  :arg2 (a2 / analyze-01)
                  :time (y / yesterday))
            :op2 (t / take-01
                  :arg0 (w / we)
                  :arg1 (l / limit-01
                        :arg1 (e / express-01
                              :mod (s2 / some)))
                  :arg1-of (n / natural-03)))
      :snt2 (t2 / think-01
            :arg0 (ii2 / i)
            :arg1 (a3 / and
                  :op1 (a4 / abide-01
                        :arg0 (t3 / take-01
                              :arg1 (l2 / limit-01
                                    :arg1 e
                                    :mod (s3 / some))))
                  :arg1 (r / rule-01
                        :arg1 (t4 / transform-01
                              :arg2 (s4 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑥) :op1(V2 / 𝑘))) :op1(U2 / times :op0(V3 / 𝑐) :op0(U3 / plus :op0(U4 / times :op0(V4 / 𝑓) :op0(V5 / 𝑥)) :op0(U5 / times :op0(V6 / 𝑔) :op0(V7 / 𝑥))))) :op0(U6 / plus :op0(U7 / times :op0(V8 / 𝑐) :op0(O4 / limit :op0(O5 / SUB :op0(O6 / limit) :op1(F2 / → :op0(V9 / 𝑥) :op1(V10 / 𝑘))) :op1(U8 / times :op0(V11 / 𝑓) :op0(V12 / 𝑥)))) :op0(U9 / times :op0(V13 / 𝑐) :op0(O7 / limit :op0(O8 / SUB :op0(O9 / limit) :op1(F3 / → :op0(V14 / 𝑥) :op1(V15 / 𝑘))) :op1(U10 / times :op0(V16 / 𝑔) :op0(V17 / 𝑥)))))))
                              :arg1-of (l3 / linear-02))))
            :op2 (a5 / appear-02
                  :arg1 (h / homomorphism
                        :domain t3
                        :example (a6 / and
                              :op1 (s5 / string-entity
                                    :value MATH 
 :math (U11 / eq :op0(O10 / limit :op0(O11 / SUB :op0(O12 / limit) :op1(F4 / → :op0(V18 / 𝑥) :op1(V19 / 𝑘))) :op1(U12 / times :op0(U13 / times :op0(V20 / 𝑓) :op0(V21 / 𝑔) :op0(V22 / 𝑥)))) :op0(O13 / limit :op0(O14 / SUB :op0(O15 / limit) :op1(F5 / → :op0(V23 / 𝑥) :op1(V24 / 𝑘))) :op1(U14 / times :op0(V25 / 𝑓) :op0(V26 / 𝑥) :op0(V27 / 𝑔) :op0(V28 / 𝑥)))))
                              :op2 (e2 / et-cetera)))
                  :mod (a7 / also)))
      :snt3 (q / question-01
            :arg0 (ii3 / i)
            :arg1 (t5 / thing
                  :arg2-of (l4 / limit-01)
                  :mod (m2 / mathematics)
                  :domain (a8 / amr-unknown))
            :arg1-of (r2 / real-04)
            :mod (a9 / anyway)))"
B.258	"(p / prove-01
      :arg1 (s / string-entity
            :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑥) :op1(C1 / infinity))) :op1(O4 / divide :op0(O5 / SUP :op0(V2 / 𝑥) :op1(V3 / 𝑘)) :op1(O6 / SUP :op0(V4 / 𝑒) :op1(V5 / 𝑥)))) :op0(N1 / 0)))
      :manner (a / amr-unknown)
      :arg1-of (m / mean-01
            :arg2 (n / number
                  :mod (a2 / any)
                  :mod (p2 / positive))))"
B.259	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (f / find-01
                  :arg0 (ii / i)
                  :arg1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (V1 / 𝑐))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(N1 / 2) :op1(V2 / 𝑛)) :op0(O2 / SUP :op0(V3 / 𝑛) :op1(V4 / 𝑐)))))
                  :arg1-of (c / cause-01
                        :arg0 (a / amr-unknown
                              :arg0-of (c2 / cause-01
                                    :arg1 (t / true-01
                                          :arg1 (t2 / this)))))
                  :frequency (r / rate-entity-91
                        :arg3 (c3 / case-04
                              :arg1 (f2 / finite)
                              :mod (e2 / every))))
            :snt2 (s3 / seem-01
                  :arg1 (g / grow-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (O3 / SUP :op0(N2 / 2) :op1(V5 / 𝑛)))
                        :arg1-of (c4 / cause-01
                              :arg0 (p2 / possible-01
                                    :arg1 (f3 / find-01
                                          :arg0 (w / we)
                                          :arg1 (e3 / equal-01
                                                :arg1 (s5 / string-entity
                                                      :value MATH 
 :math (V6 / 𝑐))
                                                :purpose (m2 / match-01
                                                      :arg0 w
                                                      :arg1 s4
                                                      :arg2 (s6 / string-entity
                                                            :value MATH 
 :math (V7 / 𝑛)
                                                            :mod (a2 / any)))))))
                        :arg1-of (h / have-degree-91
                              :arg2 (f4 / fast-02
                                    :arg1 g)
                              :arg3 (m3 / more)))
                  :source c3
                  :arg1 f2)))"
B.260	"(m / multi-sentence
      :snt1 (n / need-01
            :arg0 (ii / i)
            :arg1 (c / calculate-01
                  :arg0 ii
                  :arg1 (t / thing
                        :arg2-of (l / limit-01)
                        :mod (e / equal-01
                              :arg2 (p / product-of
                                    :op1 534
                                    :op2 0)))))
      :snt2 (g / get-01
            :arg0 (ii2 / i)
            :arg1 (t2 / thing
                  :arg2-of l)
            :mod (e2 / equal-01
                  :arg2 (p2 / product-of
                        :op1 535
                        :op2 0)))
      :manner (u / use-01
            :arg0 ii2
            :arg1 (c2 / coordinate-01
                  :mod (p3 / pole))))"
B.261	"(s / show-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(F1 / det :op0(O1 / SUB :op0(V1 / 𝑇) :op1(V2 / 𝑛))) :op0(O2 / SUB :op0(O3 / SUP :op0(O4 / SUB :op0(O5 / sum) :op1(U2 / eq :op0(V3 / 𝑘) :op0(N1 / 0))) :op1(V4 / 𝑛)) :op1(U3 / times :op0(O6 / SUP :op0(V5 / 𝛼) :op1(O7 / minus :op0(V6 / 𝑛) :op1(V7 / 𝑘))) :op0(O8 / SUP :op0(V8 / 𝛽) :op1(V9 / 𝑘))))))))"
B.262	"(m / multi-sentence
      :snt1 (g / give-01
            :arg1 (e / express-01
                  :arg1 (h / have-condition-91
                        :arg1 (e2 / equal-01
                              :arg1 (s / string-entity
                                    :value ""a^-=eqx""))
                        :arg2 (s2 / string-entity
                              :value ""a""))
                  :arg2 (e3 / equal-01
                        :arg1 (s3 / string-entity
                              :value ""a\geq 0"")
                        :arg2 (s4 / string-entity
                              :value ""0$ else"")))
            :arg2 (p / part
                  :arg0-of (n / negative-02)
                  :part-of (s5 / string-entity
                        :value MATH 
 :math (V1 / 𝑎))
                  :arg1-of (d / denot-01
                        :arg2 s5)))
      :snt2 (p2 / possible-01
            :arg1 (a / and
                  :op1 (n2 / number
                        :arg1-of (r / real-04)
                        :domain (s6 / string-entity
                              :value MATH 
 :math (V2 / 𝑎)))
                  :op2 (h2 / have-03
                        :arg0 s6
                        :arg1 (a2 / and
                              :op1 (p3 / part
                                    :mod (p4 / positive))
                              :op2 (p5 / part
                                    :arg0-of (n3 / negative-02)))))
            :polarity (a3 / amr-unknown))
      :snt3 (a4 / and
            :op1 (n4 / negative-02
                  :polarity -
                  :arg1 (a5 / and
                        :op1 (s7 / string-entity
                              :value MATH 
 :math (O1 / SUP :op0(V3 / 𝑎) :op1(U1 / plus)))
                        :op2 (s8 / string-entity
                              :value MATH 
 :math (O2 / SUP :op0(V4 / 𝑎) :op1(O3 / minus)))))
            :op2 (h3 / hold-01
                  :arg0 (r2 / relation-03
                        :arg1-of (f / follow-04))
                  :arg1 (s9 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(V5 / 𝑎) :op0(O4 / minus :op0(O5 / SUP :op0(V6 / 𝑎) :op1(U3 / plus)) :op1(O6 / SUP :op0(V7 / 𝑎) :op1(O7 / minus)))))))
      :snt4 (a6 / and
            :op1 (t / text
                  :source (b / book
                        :topic (o / optimize-01
                              :arg0 (p6 / person
                                    :arg0-of (c / compile-01)))
                        :poss (ii / i))
                  :location (a7 / above))
            :op2 (p7 / possible-01
                  :polarity -
                  :arg1 (u / understand-01
                        :arg0 ii
                        :arg1 r2))))"
B.263	"(m / multi-sentence
      :snt1 (a / and
            :op1 (p / pertain-01
                  :arg0 (ii / it)
                  :arg1 (s / side
                        :mod (m2 / mathematics)
                        :part-of (t / thing))
                  :arg2-of (h / have-degree-91
                        :arg1 ii
                        :arg3 (m3 / more)))
            :op2 (ii2 / interest-01
                  :arg1 (ii3 / i)
                  :arg2 (ii4 / interplay-01
                        :arg0 (c / concept)
                        :arg1 (a2 / and
                              :op1 (l / level
                                    :mod (s2 / syntax))
                              :op2 (l2 / level
                                    :mod (s3 / semantics))))
                  :arg1-of (s4 / specific-02)))
      :snt2 (a3 / and
            :op1 (d / determine-01
                  :arg0 (a4 / amr-unknown)
                  :arg1 (n / need-01
                        :arg1 (u / use-01
                              :arg1 (a5 / and
                                    :op1 (t2 / term
                                          :quant 2
                                          :arg1-of (s5 / separate-02))
                                    :op2 (s6 / shorthand
                                          :quant 2
                                          :arg1-of (s7 / separate-02))))))
            :op2 (s8 / separate-01
                  :arg0 (a6 / amr-unknown)
                  :arg1 a5
                  :condition (a7 / anything)))
      :snt3 (s9 / seem-01
            :arg1 (e / express-01
                  :arg0 (t3 / thing
                        :arg1-of (s10 / state-01)
                        :mod (b / both))
                  :arg1 (t4 / thing
                        :arg1-of (s11 / same-01)))
            :mod (l3 / level
                  :mod (f / function-01)))
      :snt4 (p2 / possible-01
            :arg1 (c2 / capture-01
                  :arg0 (t5 / thing
                        :arg1-of (c3 / condition-01)
                        :mod (m4 / material)
                        :arg1-of (c4 / correspond-02))
                  :arg1 (r / rule-01
                        :arg1 (ii5 / infer-01)
                        :mod (a8 / any))
                  :condition (t6 / take-04
                        :arg0 (w / we)
                        :arg1 (m5 / modus-ponens
                              :arg1-of (k / know-01
                                    :degree (w2 / well)))))))"
B.264	"(m / multi-sentence
      :snt1 (s / stick-01
            :arg1 (ii / i)
            :time (p / point
                  :quant 1)
            :time (p2 / perform-02
                  :arg0 ii
                  :arg1 (o / operate-01
                        :arg1 (a / arithmetic)
                        :quant (s2 / some))))
      :snt2 (w / want-01
            :arg0 (ii2 / i)
            :arg1 (k / know-01
                  :arg0 ii2
                  :arg1 (t / truth-value
                        :polarity-of (p3 / possible-01
                              :arg1 (w2 / write-01
                                    :arg1 (s3 / string-entity
                                          :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(O2 / SUP :op0(V1 / 𝑎) :op1(V2 / 𝑏)) :op2(V3 / $$) :op3(O3 / percent) :op4(V4 / p))
                                          :arg1-of (r / resemble-01
                                                :arg2 (s4 / string-entity
                                                      :value MATH 
 :math (E2 /  :op0(O4 / fragments) :op1(O5 / SUP :op0(V5 / 𝑎) :op1(U1 / times :op0(O6 / percent :op0(V6 / 𝑏)) :op0(V7 / 𝑝))) :op2(V8 / $$) :op3(O7 / percent) :op4(V9 / p)))))))))))"
B.265	"(s / show-01
      :arg1 (p / possible-01
            :polarity -
            :arg1 (ii / integer
                  :domain (s2 / string-entity
                        :value MATH 
 :math (O1 / SUP :op0(O2 / divide :op0(V1 / 𝑎) :op1(V2 / 𝑏)) :op1(N1 / 2))))
            :time (s3 / situation
                  :mod (t / this)))
      :manner (a / amr-unknown))"
B.266	"(m / multi-sentence
      :snt1 (t / terminate-01
            :arg1 (ii / iterate-01)
            :time (a / arrive-01
                  :arg1 (y / you)
                  :arg4 (o / or
                        :op1 (f / fraction
                              :mod (p / proper)
                              :arg1-of (m2 / mean-01
                                    :arg2 (n / numerator
                                          :mod (s / string-entity
                                                :value MATH 
 :math (O1 / leq)))))
                        :op2 (ii2 / integer))))
      :snt2 (d / define-01
            :arg0 (ii3 / i)
            :arg1 (p2 / process-02
                  :mod (t2 / this))
            :medium (e / example
                  :arg1-of (c / complicate-01
                        :arg0-of (s2 / suffice-01))
                  :domain (s3 / string-entity
                        :value MATH 
 :math (U1 / and :op0(F1 / → :op0(O2 / divide :op0(N1 / 14) :op1(N2 / 3)) :op1(U2 / plus :op0(N3 / 4) :op0(O3 / divide :op0(N4 / 2) :op1(N5 / 3)))) :op0(F2 / → :op0(O4 / divide :op0(N6 / 8) :op1(N7 / 3))) :op0(F3 / → :op0(U3 / plus :op0(N8 / 2) :op0(O5 / divide :op0(N9 / 2) :op1(N10 / 3)))) :op0(F4 / → :op0(O6 / divide :op0(N11 / 4) :op1(N12 / 3))) :op0(F5 / → :op0(U4 / plus :op0(N13 / 1) :op0(O7 / divide :op0(N14 / 1) :op1(N15 / 3)))) :op0(F6 / → :op0(O8 / divide :op0(N16 / 1) :op1(N17 / 3)))))))
      :snt3 (t3 / terminate-01
            :polarity (a2 / amr-unknown)
            :arg1 p2
            :mod t2)
      :arg2 (s4 / string-entity
            :value MATH 
 :math (O9 / in :op0(O10 / interval$O-O$$ :op0(V1 / 𝑝) :op1(V2 / 𝑞)) :op1(U5 / times :op0(V3 / ℕ) :op0(O11 / setdiff :op0(V4 / ℕ) :op1(M1 / S-1 :op0(N18 / 0))))))
      :arg1-of (m3 / mean-01
            :arg2 (t4 / terminate-01
                  :arg1 p2
                  :arg1 (s5 / string-entity
                        :value MATH 
 :math (O12 / divide :op0(V5 / 𝑝) :op1(V6 / 𝑞)))
                  :mod (ii4 / initial))
            :arg2 (s6 / string-entity
                  :value MATH 
 :math (O13 / divide :op0(O14 / rem :op0(V7 / 𝑝) :op1(V8 / 𝑞)) :op1(V9 / 𝑞))))
      :time (a3 / always))"
B.267	"(m / multi-sentence
      :snt1 (a / and
            :op1 (w / wonder-01
                  :arg0 (ii / i)
                  :arg1 (t / truth-value
                        :polarity-of (c / case-04
                              :arg1 (d / dual-01
                                    :mod (t2 / thing
                                          :name (n / name
                                                :op1 ""lagrange""))))))
            :op2 (h / have-03
                  :arg0 ii
                  :arg1 (t3 / time
                        :arg1-of (h2 / hard-02)
                        :purpose (s / show-01
                              :arg0 ii
                              :arg1 c))))
      :snt2 (s2 / suspect-01
            :arg0 (ii2 / i)
            :arg1 (t4 / true-01
                  :polarity -
                  :arg1 (p / primal
                        :domain (d2 / dual-01))
                  :arg1-of (g / general-02)))
      :snt3 (a2 / and
            :op1 (l / let-01
                  :mode imperative
                  :arg0 (y / you)
                  :arg1 (a3 / and
                        :op1 (e / equal-01
                              :arg1 (p2 / problem
                                    :mod p))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (M1 / L-2 :op0(W1 / ) :op1(U1 / times :op0(O1 / SUB :op0(V1 / 𝑓) :op1(N1 / 0)) :op0(V2 / 𝑥)))))
                  :op2 (e2 / equal-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (O2 / form-seq :op0(O3 / leq :op0(M2 / L-2 :op0(W2 / ) :op1(U2 / times :op0(O4 / SUB :op0(V3 / 𝑓) :op1(V4 / 𝑖)) :op0(V5 / 𝑥))) :op1(N2 / 0)) :op1(U3 / eq :op0(V6 / 𝑖) :op0(M3 / L-3 :op0(N3 / 1) :op1(V7 / …) :op2(V8 / 𝑚)))))
                        :arg2 (s5 / string-entity
                              :value MATH 
 :math (O5 / leq :op0(M4 / L-2 :op0(W3 / ) :op1(O6 / minus :op0(V9 / 𝜆))) :op1(N4 / 0))))))
      :op2 (e3 / equal-01
            :arg1 (s6 / string-entity
                  :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V10 / 𝐿) :op0(O7 / interval$O-O$$ :op0(V11 / 𝑥) :op1(V12 / 𝜆))) :op0(U6 / plus :op0(U7 / times :op0(O8 / SUB :op0(V13 / 𝑓) :op1(N5 / 0)) :op0(V14 / 𝑥)) :op0(O9 / SUB :op0(O10 / SUP :op0(O11 / SUB :op0(O12 / sum) :op1(U8 / eq :op0(V15 / 𝑖) :op0(N6 / 1))) :op1(V16 / 𝑚)) :op1(U9 / times :op0(O13 / SUB :op0(V17 / 𝜆) :op1(V18 / 𝑖)) :op0(O14 / SUB :op0(V19 / 𝑓) :op1(V20 / 𝑖)) :op0(V21 / 𝑥))))))
            :arg2 (s7 / string-entity
                  :value MATH 
 :math (U10 / eq :op0(M5 / L-2 :op0(W4 / ) :op1(O15 / minus :op0(U11 / times :op0(V22 / 𝑔) :op0(V23 / 𝜆)))) :op0(O16 / minus :op0(O17 / infimum :op0(O18 / SUB :op0(O19 / infimum) :op1(V24 / 𝑥)) :op1(U12 / times :op0(V25 / 𝐿) :op0(O20 / interval$O-O$$ :op0(V26 / 𝑥) :op1(V27 / 𝜆)))))))
            :arg1-of (c2 / contrast-01
                  :arg2 (e4 / equal-01
                        :arg1 (s8 / string-entity
                              :value MATH 
 :math U4 )
                        :arg2 (s9 / string-entity
                              :value ""lagrangian"")))))"
B.268	"(f / find-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (t / thing
            :arg2-of (v / value-01
                  :arg1 (t2 / thing
                        :name (n / name
                              :op1 MATH 
 :math (U1 / times :op0(V1 / 𝑍) :op0(W1 / ) :op0(W2 / ) :op0(V2 / 𝜆))))
                  :arg1-of (e / expect-01)))
      :condition t2)"
B.269	"(m / multi-sentence
      :snt1 (p / probable
            :domain (b / boy
                  :domain (c / child
                        :mod (b2 / both)))
            :mod (a / amr-unknown))
      :snt2 (c2 / cause-01
            :arg0 (t / this)
            :arg1 (a2 / and
                  :op1 (b3 / build-01
                        :arg0 (w / we)
                        :arg1 (s / space
                              :arg1-of (s2 / sample-01)
                              :mod (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(V1 / 𝑆) :op0(M1 / S-1 :op0(U2 / times :op0(O1 / interval$O-O$$ :op0(V2 / 𝑏) :op1(V3 / 𝑏)) :op0(O2 / interval$O-O$$ :op0(V4 / 𝑏) :op1(V5 / 𝑔)) :op0(O3 / interval$O-O$$ :op0(V6 / 𝑔) :op1(V7 / 𝑔))))))))
                  :op2 (l / let-01
                        :arg0 w
                        :arg1 (c3 / case-04
                              :arg1 (b4 / boy
                                    :domain c
                                    :mod (s4 / string-entity
                                          :value MATH 
 :math (U3 / eq :op0(V8 / 𝐸) :op0(M2 / S-1 :op0(O4 / interval$O-O$$ :op0(V9 / 𝑏) :op1(V10 / 𝑏))))))
                              :domain (e / event
                                    :mod (s5 / string-entity
                                          :value ""e"")
                                    :poss w)))
                  :op3 (s6 / string-entity
                        :value ""f""
                        :domain (c4 / conditional)
                        :arg0-of (c5 / cause-01
                              :arg1 (s7 / string-entity
                                    :value MATH 
 :math (U4 / and :op0(U5 / eq :op0(U6 / times :op0(V11 / 𝑃) :op0(F1 / c :op0(V12 / 𝐸) :op1(V13 / 𝐹))) :op0(O5 / divide :op0(U7 / times :op0(V14 / 𝑃) :op0(U8 / intersect :op0(V15 / 𝐸) :op0(V16 / 𝐹))) :op1(U9 / times :op0(V17 / 𝑃) :op0(V18 / 𝐹)))) :op0(U10 / eq :op0(O6 / divide :op0(O7 / divide :op0(N1 / 1) :op1(N2 / 3) :op1(O8 / divide :op0(N3 / 2) :op1(N4 / 3))))) :op0(U11 / eq :op0(O9 / divide :op0(N5 / 1) :op1(N6 / 2)))))))))
      :snt3 (c6 / contrast-01
            :arg2 (a3 / and
                  :op1 (g / give-01
                        :arg1 (a4 / answer)
                        :arg2 (s8 / string-entity
                              :value MATH 
 :math (O10 / divide :op0(N7 / 1) :op1(N8 / 3)))
                        :location (b5 / book
                              :poss (ii / i)))
                  :op2 (p2 / possible-01
                        :polarity -
                        :arg1 (u / understand-01
                              :arg0 ii
                              :arg1 (t2 / thing
                                    :arg0-of (c7 / cause-01
                                          :arg1 g)))))))"
B.270	"(m / multi-sentence
      :snt1 (e / expect-01
            :arg1 (n / number
                  :quant-of (h / head))
            :time (b / before
                  :op1 (e2 / event))
            :domain (a / amr-unknown))
      :snt2 (f / find-01
            :arg0 (ii / i)
            :arg1 (p / possible-01
                  :arg1 (s / solve-01
                        :arg1 (ii2 / it)
                        :arg2 (u / use-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝐸) :op0(V2 / 𝑛)) :op0(U3 / plus :op0(U4 / times :op0(O1 / divide :op0(N1 / 1) :op1(N2 / 2)) :op0(U5 / plus :op0(U6 / times :op0(V3 / 𝐸) :op0(V4 / 𝑛)) :op0(N3 / 1) :op0(U7 / times :op0(O2 / divide :op0(N4 / 1) :op1(N5 / 2)) :op0(U8 / times :op0(V5 / 𝐸) :op0(O3 / minus :op0(V6 / 𝑛) :op1(N6 / 1))))))))
                                    :arg1-of (e3 / equal-01
                                          :arg2 (s3 / string-entity
                                                :value MATH 
 :math (U9 / eq :op0(U10 / times :op0(V7 / 𝐸) :op0(V8 / 𝑛)) :op0(U11 / plus :op0(U12 / times :op0(V9 / 𝐸) :op0(O4 / minus :op0(V10 / 𝑛) :op1(N7 / 1))) :op0(N8 / 1)))))
                                    :arg1-of (r / recursion-00))))
                  :arg1-of (b2 / base-02
                        :arg2 (l / link
                              :arg1-of (g / give-01
                                    :location (c / comment-01)))))
            :polarity (a2 / amr-unknown)))"
B.271	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s / sequence
                  :consist-of (v / variable
                        :mod (r / random)
                        :mod (p / product-of
                              :op1 MATH 
 :math (M1 / S-1 :op0(O1 / SUB :op0(V1 / 𝑋) :op1(V2 / 𝑛)))
                              :op2 (e / equal-01
                                    :arg2 MATH 
 :math (U1 / eq :op0(U2 / times :op0(V3 / 𝔼) :op0(O2 / SUB :op0(V4 / 𝑋) :op1(V5 / 𝑛))) :op0(N1 / 0))))
                        :arg1-of (d / depend-01
                              :polarity -))
                  :domain (s2 / string-entity
                        :value MATH 
 :math (O3 / geq :op0(V6 / 𝑛) :op1(N2 / 1)))))
      :snt2 (f / find-01
            :mode imperative
            :arg0 y
            :arg1 (p2 / probability
                  :mod (e2 / event
                        :name (n / name
                              :op1 MATH 
 :math (E1 /  :op0(O4 / fragments) :op1(O5 / SUB :op0(O6 / limit-supremum) :op1(F1 / → :op0(V7 / 𝑛) :op1(C1 / infinity))) :op2(E2 /  :op0(O7 / fragments) :op1(V8 / {) :op2(O8 / SUB :op0(V9 / 𝑋) :op1(V10 / 𝑛)) :op3(O9 / SUB :op0(V11 / 𝑋) :op1(U3 / plus :op0(V12 / 𝑛) :op0(N3 / 1))) :op4(O10 / gt) :op5(N4 / 0) :op6(V13 / })))))))
      :snt3 (t / think-01
            :arg0 (ii / i)
            :arg1 (r2 / recommend-01
                  :arg1 (e3 / equal-01
                        :arg2 1)
                  :arg1-of (c / cause-01
                        :arg0 (p3 / positive
                              :domain (t2 / thing
                                    :name (n2 / name
                                          :op1 ""gaussian""))
                              :time (a / always)
                              :prep-for (v2 / value
                                    :mod (f2 / finite)))))
            :ord (o / ordinal-entity
                  :value 1)))"
B.272	"(m / multi-sentence
      :snt1 (g / go-through-20
            :arg0 (p / person
                  :quant (l / lot))
            :arg1 (l2 / line
                  :consist-of (r / reason-01)
                  :arg1-of (s / show-01
                        :location (b / below))
                  :mod (t / this))
            :purpose (j / justify-01
                  :arg0 p
                  :arg1 (p2 / possible-01
                        :polarity -
                        :arg1 (n / negative-03
                              :arg1 (a / and
                                    :op1 (s2 / string-entity
                                          :value ""a"")
                                    :op2 (s3 / string-entity
                                          :value ""b""))))))
      :snt2 (h / have-concession-91
            :arg2 (ii / instance
                  :domain (t2 / this)
                  :arg1-of (s4 / specific-02)
                  :location-of (f / fail-01
                        :arg1 (w / we)
                        :arg2 (p3 / property
                              :mod (t3 / this)))))
      :arg1-of (c / cause-01
            :arg0 (c2 / consider-01
                  :arg1 (d / define-01
                        :arg0 (p4 / person
                              :mod (m2 / mathematics))
                        :arg1 (o / or
                              :op1 (s5 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(V1 / 𝑖) :op1(N1 / 2)) :op0(O2 / minus :op0(N2 / 1))))
                              :op2 (s6 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(V2 / 𝑖) :op0(O3 / root :op0(O4 / minus :op0(N3 / 1)) :op1(N4 / 2))))
                              :op3 (s7 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(V3 / 𝑥) :op0(O5 / minus :op0(V4 / 𝑦))))
                              :op4 (s8 / string-entity
                                    :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(W1 / ) :op0(V5 / 𝑦)) :op0(V6 / 𝑥))))))))"
B.273	"(m / multi-sentence
      :snt1 (a / answer-01
            :arg1 (q / question-01
                  :arg1 (r / root-of
                        :op1 (v / variable
                              :name (n / name
                                    :op1 ""x""))
                        :op2 (v2 / variable
                              :name (n2 / name
                                    :op1 ""1/2""))))
            :arg2 (s / string-entity
                  :value MATH 
 :math (O1 / SUP :op0(V1 / 𝑥) :op1(N1 / 2))))
      :snt2 (c / cause-01
            :arg0 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O2 / root :op0(V2 / 𝑥) :op1(O3 / continued-fraction :op0(N2 / 1) :op1(N3 / 2))) :op0(O4 / SUP :op0(V3 / 𝑥) :op1(O5 / divide :op0(N4 / 1) :op1(O6 / continued-fraction :op0(N5 / 1) :op1(N6 / 2)))))
                  :arg1-of (s3 / simplify-01
                        :arg4 (s4 / string-entity
                              :value MATH 
 :math (O7 / SUP :op0(V4 / 𝑥) :op1(N7 / 2)))
                        :arg1-of (c2 / cause-01
                              :arg0 (p / possible-01
                                    :arg1 (s5 / string-entity
                                          :value MATH 
 :math (U2 / and :op0(U3 / eq :op0(O8 / root :op0(V5 / 𝑥) :op1(O9 / continued-fraction :op0(N8 / 1) :op1(V6 / 𝑎))) :op0(O10 / SUP :op0(V7 / 𝑥) :op1(O11 / divide :op0(N9 / 1) :op1(O12 / continued-fraction :op0(N10 / 1) :op1(V8 / 𝑎))))) :op0(U4 / eq :op0(O13 / SUP :op0(V9 / 𝑥) :op1(V10 / 𝑎))))
                                          :domain (r2 / rule
                                                :arg1-of (g / general-02)))))))
            :arg1 (l / logic
                  :poss (ii / i))))"
B.274	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (p / prove-01
                  :arg0 (ii / i)
                  :arg1 (b / be-located-at-91
                        :arg1 (d / distribution
                              :name (n / name
                                    :op1 MATH 
 :math (O1 / SUB :op0(V1 / 𝛿) :op1(N1 / 0)))
                              :mod (t / thing
                                    :name (n2 / name
                                          :op1 ""dirac"")))
                        :arg2 (s / space
                              :name (n3 / name
                                    :op1 ""sobolev""
                                    :op2 ""space"")
                              :mod (t2 / thing
                                    :name (n4 / name
                                          :op1 MATH 
 :math (U1 / eq :op0(U2 / times :op0(O2 / SUP :op0(V2 / 𝐻) :op1(V3 / 𝑠)) :op0(O3 / SUP :op0(V4 / 𝐑) :op1(V5 / 𝑛))) :op0(O4 / conditional-set :op0(O5 / in :op0(V6 / 𝑓) :op1(U3 / times :op0(O6 / SUP :op0(V7 / 𝒮) :op1(V8 / ′)) :op0(O7 / SUP :op0(V9 / 𝐑) :op1(V10 / 𝑛)))) :op1(O8 / in :op0(U4 / times :op0(O9 / SUP :op0(U5 / plus :op0(N2 / 1) :op0(O10 / SUP :op0(F1 / abs :op0(V11 / 𝜉)) :op1(N3 / 2) :op1(O11 / divide :op0(V12 / 𝑠) :op1(N4 / 2))))) :op0(V13 / ℱ) :op0(V14 / 𝑓)) :op1(U6 / times :op0(O12 / SUP :op0(V15 / 𝐿) :op1(N5 / 2)) :op0(O13 / SUP :op0(V16 / 𝐑) :op1(V17 / 𝑛))))))))
                              :mod (e / every))))
            :arg2 (s2 / steel-02
                  :arg0 ii
                  :arg1 (w / wrestle-01
                        :arg0 ii
                        :purpose p)))
      :snt2 (b2 / belong-01
            :polarity -
            :arg0 (d2 / distribution
                  :name (n5 / name
                        :op1 MATH 
 :math (V18 / 𝐻))
                  :mod (t3 / thing
                        :name (n6 / name
                              :op1 ""heaviside"")))
            :arg1 (s3 / space
                  :name (n7 / name
                        :op1 MATH 
 :math (U7 / times :op0(O14 / SUP :op0(V19 / 𝐻) :op1(V20 / 𝑠)) :op0(V21 / ℝ)))
                  :mod (a / any)))
      :snt3 (p2 / possible-01
            :arg1 (e2 / elaborate-01
                  :arg0 (y / you)
                  :arg1 (t4 / that))
            :polarity (a2 / amr-unknown)))"
B.275	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (s / show-01
                  :arg0 (ii / i)
                  :arg1 (e / equal-01
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝐴) :op1(C1 / infinity))) :op1(O4 / SUB :op0(O5 / SUP :op0(O6 / SUB :op0(O7 / int) :op1(N1 / 0)) :op1(V2 / 𝐴)) :op1(U2 / times :op0(O8 / divide :op0(F2 / sin :op0(V3 / 𝑥)) :op1(V4 / 𝑥)) :op0(F3 / d :op0(V5 / 𝑥))))) :op0(U3 / times :op0(O9 / divide :op0(V6 / 𝜋) :op1(N2 / 2)))))))
            :manner (a / amr-unknown))
      :snt2 (k / know-01
            :arg0 (ii2 / i)
            :arg1 (p2 / possible-01
                  :arg1 (u / use-01
                        :arg0 ii2
                        :arg1 (f / fact)
                        :arg2 (e2 / equal-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (O10 / gt :op0(V7 / 𝑥) :op1(N3 / 0)))
                              :arg3 (s4 / string-entity
                                    :value MATH 
 :math (U4 / eq :op0(O11 / SUP :op0(V8 / 𝑥) :op1(O12 / minus :op0(N4 / 1))) :op0(O13 / SUB :op0(O14 / SUP :op0(O15 / SUB :op0(O16 / int) :op1(N5 / 0)) :op1(C2 / infinity)) :op1(U5 / times :op0(O17 / SUP :op0(V9 / 𝑒) :op1(O18 / minus :op0(U6 / times :op0(V10 / 𝑥) :op0(V11 / 𝑡) :op0(F4 / d :op0(V12 / 𝑡))))))))))))
            :concession-of (s5 / sure-02
                  :polarity -
                  :arg0 ii2
                  :arg1 (t / thing
                        :manner-of (b / begin-01
                              :arg0 ii2)))))"
B.276	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (e / equal-01
                        :arg2 MATH 
 :math (O1 / in :op0(V1 / 𝑘) :op1(V2 / ℕ)))
                  :op2 (e2 / equal-01
                        :arg2 MATH 
 :math (O2 / gt :op0(V3 / 𝑎) :op1(N1 / 1)))))
      :snt2 (s / show-01
            :mode imperative
            :arg0 (y2 / you)
            :arg1 (e3 / equal-01
                  :arg2 MATH 
 :math (U1 / eq :op0(O3 / limit :op0(O4 / SUB :op0(O5 / limit) :op1(F1 / → :op0(V4 / 𝑛) :op1(C1 / infinity))) :op1(O6 / divide :op0(O7 / SUP :op0(V5 / 𝑛) :op1(V6 / 𝑘)) :op1(O8 / SUP :op0(V7 / 𝑎) :op1(V8 / 𝑛)))) :op0(N2 / 0)))))"
B.277	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (p / possible-01
                  :arg1 (s / silly
                        :domain (t / this)))
            :arg2 (g / go-06
                  :arg0 (ii / it)
                  :arg2 (h / here)))
      :snt2 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (n / number
                  :mod (p2 / positive)
                  :arg1-of (r / real-04)
                  :arg0-of (s2 / satisfy-02
                        :arg1 (e / equal-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (O1 / geq :op0(O2 / divide :op0(V1 / 𝑆) :op1(V2 / 𝑛)) :op1(O3 / root :op0(V3 / 𝑃) :op1(V4 / 𝑛))))))
                  :domain (s4 / string-entity
                        :value MATH 
 :math (O4 / gt :op0(M1 / L-2 :op0(V5 / 𝑃) :op1(V6 / 𝑆)) :op1(N1 / 0)))))
      :snt3 (e2 / exist-01
            :arg1 (s5 / sequence
                  :consist-of (n2 / number
                        :mod p2)
                  :arg1-of (r2 / real-04)
                  :domain (s6 / string-entity
                        :value MATH 
 :math (M2 / L-3 :op0(O5 / SUB :op0(V7 / 𝑎) :op1(N2 / 1)) :op1(V8 / …) :op2(O6 / SUB :op0(V9 / 𝑎) :op1(V10 / 𝑛)))))
            :arg0-of (c2 / cause-01
                  :arg1 (e3 / equal-01
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (O7 / form-seq :op0(U1 / eq :op0(V11 / 𝑆) :op0(O8 / sum :op0(O9 / SUB :op0(V12 / 𝑎) :op1(V13 / 𝑖)))) :op1(U2 / eq :op0(V14 / 𝑃) :op0(O10 / product :op0(O11 / SUB :op0(V15 / 𝑎) :op1(V16 / 𝑖)))))))))
      :polarity (a / amr-unknown))"
B.278	"(f / function-01
      :polarity (a / amr-unknown)
      :arg1-of (d / differ-02)
      :arg0-of (c / cause-01
            :arg1 (c2 / contrast-01
                  :arg1 (e / equal-01
                        :arg2 (s / string-entity
                              :value MATH 
 :math (O1 / subset :op0(U1 / times :op0(V1 / 𝑓) :op0(V2 / ℚ)) :op1(V3 / ℚ))))
                  :arg2 (e2 / equal-01
                        :polarity -
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (O2 / not-subset-of-or-equals :op0(U2 / times :op0(O3 / SUP :op0(V4 / 𝑓) :op1(V5 / ′)) :op0(V6 / ℚ)) :op1(V7 / ℚ)))))))"
B.279	"(m / multi-sentence
      :snt1 (q / question-01
            :arg1 (s / suppose-01
                  :arg1 (h / have-03
                        :arg0 (s2 / string-entity
                              :value MATH 
 :math (F1 / $##$ :op0(V1 / 𝑓) :op1(F2 / → :op0(O1 / interval$O-O$$ :op0(O2 / minus :op0(V2 / 𝛿)) :op1(V3 / 𝛿)) :op1(O3 / interval$O-O$$ :op0(N1 / 0) :op1(C1 / infinity)))))
                        :arg1 (p / property
                              :mod (s3 / show-01
                                    :arg0 (s4 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(O4 / limit :op0(O5 / SUB :op0(O6 / limit) :op1(F3 / → :op0(V4 / 𝑥) :op1(N2 / 0))) :op1(U2 / plus :op0(U3 / times :op0(V5 / 𝑓) :op0(V6 / 𝑥)) :op0(O7 / divide :op0(N3 / 1) :op1(U4 / times :op0(V7 / 𝑓) :op0(V8 / 𝑥))))) :op0(N4 / 2))
                                          :arg1 (s5 / string-entity
                                                :value MATH 
 :math (U5 / eq :op0(O8 / limit :op0(O9 / SUB :op0(O10 / limit) :op1(F4 / → :op0(V9 / 𝑥) :op1(N5 / 0))) :op1(U6 / times :op0(V10 / 𝑓) :op0(V11 / 𝑥))) :op0(N6 / 1)))))))))
      :snt2 (a / approach-02
            :arg0 (ii / i)
            :arg2 (l / let-01
                  :arg1 (b / be-located-at-91
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (F5 / $##$ :op0(V12 / ℎ) :op1(F6 / → :op0(O11 / interval$O-O$$ :op0(O12 / minus :op0(V13 / 𝛿)) :op1(V14 / 𝛿)) :op1(O13 / interval$O-O$$ :op0(O14 / minus :op0(N7 / 1)) :op1(C2 / infinity)))))
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (O15 / form-seq :op0(U7 / eq :op0(U8 / times :op0(V15 / ℎ) :op0(V16 / 𝑥)) :op0(O16 / minus :op0(U9 / times :op0(V17 / 𝑓) :op0(V18 / 𝑥)) :op1(N8 / 1))) :op1(O17 / in :op0(O18 / forall :op0(V19 / 𝑥)) :op1(O19 / interval$O-O$$ :op0(O20 / minus :op0(V20 / 𝛿)) :op1(V21 / 𝛿)))))))
            :snt3 (n / note-01
                  :mode imperative
                  :arg0 (y / you)
                  :arg1 (b2 / be-done-08
                        :arg0 (w / we)
                        :condition (p2 / possible-01
                              :arg1 (s8 / show-01
                                    :arg0 w
                                    :arg1 (s9 / string-entity
                                          :value MATH 
 :math (U10 / eq :op0(O21 / limit :op0(O22 / SUB :op0(O23 / limit) :op1(F7 / → :op0(V22 / 𝑥) :op1(N9 / 0))) :op1(U11 / times :op0(V23 / ℎ) :op0(V24 / 𝑥))) :op0(N10 / 0)))))))))"
B.280	"(m / multi-sentence
      :snt1 (a / and
            :op2 (s / see-01
                  :arg0 (ii / i)
                  :arg1 (ii2 / it)
                  :mod (a2 / also)
                  :location (f / field
                        :poss ii)
                  :frequency (l / lot)))
      :snt2 (u / use-01
            :arg0 (w / we)
            :arg1 (d / derivative
                  :arg0-of (h / have-03
                        :arg1 (f2 / function-01
                              :mod (d2 / discontinuous))))
            :purpose (e / exemplify-01
                  :arg0 (h2 / have-purpose-91
                        :arg2 (c / calculate-01
                              :arg1 (a3 / amount
                                    :quant-of (t / thing
                                          :arg0-of (a4 / add-02
                                                :arg2 (t2 / thing
                                                      :name (n / name
                                                            :op1 ""ripple""))))
                                    :arg1-of (o / optimal-01)))
                        :purpose (m2 / minimize-01
                              :arg1 (t3 / time
                                    :mod (e2 / execute-02)
                                    :duration-of (p / process-02
                                          :arg1 (a5 / add-02))))))
            :snt3 (c2 / cause-01
                  :arg0 (a6 / and
                        :op1 (n2 / number
                              :arg1-of (n3 / natural-03)
                              :domain (s2 / string-entity
                                    :value MATH 
 :math (V1 / 𝑘)))
                        :op2 (s3 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(V2 / 𝑘) :op0(O1 / root :op0(O2 / divide :op0(V3 / 𝑛) :op1(N1 / 2)) :op1(N2 / 2))))
                        :arg1-of (m3 / mean-01
                              :arg2 (n4 / number
                                    :quant-of (b / bit
                                          :location (n5 / number
                                                :arg1-of (a7 / add-02)))
                                    :domain (s4 / string-entity
                                          :value MATH 
 :math (V4 / 𝑛))))
                        :op3 (s5 / string-entity
                              :value MATH 
 :math (V5 / 𝑘)
                              :arg1-of (m4 / mean-01
                                    :arg2 (g / gate
                                          :mod (d3 / delta)
                                          :arg1-of (m5 / mean-01
                                                :arg2 t3
                                                :arg1-of (t4 / take-10
                                                      :arg0 (o2 / operate-01
                                                            :arg1 g))))))))
            :arg1 (p2 / possible-01
                  :arg1 (s6 / see-01
                        :arg0 (y / you)
                        :arg1 (c3 / continue-01
                              :polarity -
                              :arg1 (f3 / function-01
                                    :arg1 (e3 / execute-02))
                              :degree (a8 / at-all))))
            :arg1-of (c4 / clear-06)))"
B.281	"(m / method
      :arg1-of (a / alternate-01)
      :instrument-of (p / prove-01
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (F1 / → :op0(O1 / SUP :op0(V1 / 𝑛) :op1(O2 / divide :op0(N1 / 1) :op1(V2 / 𝑛))) :op1(N2 / 1)))
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (O3 / in :op0(V3 / 𝑛) :op1(V4 / ℕ))))))"
B.282	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (q / question-01
                  :arg0 ii
                  :arg1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑛) :op0(N1 / 1))) :op1(C1 / infinity)) :op1(O5 / divide :op0(N2 / 1) :op1(O6 / SUP :op0(V2 / 𝑛) :op1(N3 / 2)))))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (O7 / divide :op0(O8 / SUP :op0(V3 / 𝜋) :op1(N4 / 2)) :op1(N5 / 6))))))
      :snt2 (k / know-01
            :arg0 (ii2 / i)
            :arg1 (p / possible-01
                  :arg1 (p2 / prove-01
                        :arg0 (o / or
                              :op1 (a / analyze-01
                                    :arg1-of (s3 / standard-02)
                                    :mod (v / variable
                                          :quant 1))
                              :op2 (w / work-01
                                    :arg1 (o2 / or
                                          :op1 (s4 / string-entity
                                                :value MATH 
 :math (F1 / arcsin))
                                          :op2 (s5 / something
                                                :arg1-of (r / resemble-01
                                                      :arg2 s4))))
                              :op3 (a2 / analyze-01
                                    :mod (c / complex)
                                    :mod (b / basic)))
                        :arg1 e)))
      :snt3 (c2 / contrast-01
            :arg2 (t / tell-01
                  :arg0 (s6 / someone)
                  :arg1 (p3 / prove-01
                        :arg0 (ii3 / it)
                        :mod (g / great)
                        :mod (a3 / also)
                        :manner (u / use-01
                              :arg1 (a4 / analyze-01
                                    :arg1 (f / function-01))))
                  :arg2 ii2)))"
B.283	"(m / multi-sentence
      :snt1 (d / determine-01
            :arg1 (t / truth-value
                  :polarity-of (o / or
                        :op1 (c / converge-01
                              :arg0 (s / string-entity
                                    :value MATH 
 :math (O1 / SUB :op0(V1 / 𝑥) :op1(V2 / 𝑛))))
                        :op2 (d2 / diverge-01
                              :arg0 s)))
            :arg2-of (g / give-01
                  :arg1 (a / and
                        :op1 (s2 / string-entity
                              :value MATH 
 :math (U1 / and :op0(O2 / assign :op0(O3 / SUB :op0(V3 / 𝑥) :op1(N1 / 1)) :op1(V4 / 𝑎)) :op0(O4 / gt :op0(N2 / 0))))
                        :op2 (s3 / string-entity
                              :value MATH 
 :math (O5 / assign :op0(O6 / SUB :op0(V5 / 𝑥) :op1(U2 / plus :op0(V6 / 𝑛) :op0(N3 / 1))) :op1(U3 / plus :op0(O7 / SUB :op0(V7 / 𝑥) :op1(V8 / 𝑛)) :op0(O8 / divide :op0(N4 / 1) :op1(O9 / SUB :op0(V9 / 𝑥) :op1(V10 / 𝑛))))))
                        :prep-for (s4 / string-entity
                              :value MATH 
 :math (O10 / in :op0(V11 / 𝑛) :op1(V12 / ℕ))))))
      :snt2 (s5 / seem-01
            :arg1 (o2 / obvious-01
                  :arg1 (a2 / and
                        :op1 (ii / increase-01
                              :arg1 (s6 / sequence)
                              :manner (s7 / strict))
                        :op2 (p / positive
                              :time (a3 / always))))
            :arg1-of (c2 / cause-01
                  :arg0 (a4 / add-02
                        :arg0 (w / we)
                        :arg1 (n / number
                              :mod p))
                  :arg2 (e / element
                        :mod (s8 / subsequent)
                        :mod (e2 / each)
                        :part-of s6)
                  :time (a5 / always)))
      :time (s9 / since
            :op1 (s10 / string-entity
                  :value MATH 
 :math (O11 / gt :op0(O12 / SUB :op0(V13 / 𝑥) :op1(N5 / 1)) :op1(N6 / 0)))))"
B.284	"(m / multi-sentence
      :snt1 (h / have-quant-91
            :arg1 (t / thing)
            :arg3 (e / enough)
            :arg6 (p / prove-01
                  :arg1 (s / state-01
                        :arg1 (p2 / possible-01
                              :arg1 (r / represent-01
                                    :arg1 (s2 / string-entity
                                          :value MATH 
 :math (O1 / in :op0(V1 / 𝑛) :op1(V2 / ℕ))
                                          :mod (a / any)
                                          :mod (r2 / rational))
                                    :arg2 (f / form
                                          :mod (d / decimal))
                                    :purpose (r3 / repeat-01
                                          :arg1 (d2 / digit
                                                :poss s2)
                                          :condition (m2 / many
                                                :quant (ii / infinite)
                                                :domain d2))))
                        :arg1-of (f2 / follow-04))))
      :snt2 (t2 / true-01
            :arg1 (t3 / this)
            :arg2 (s3 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O2 / divide :op0(V3 / 𝑚) :op1(V4 / 𝑛)) :op0(U2 / plus :op0(O3 / divide :op0(N1 / 1) :op1(V5 / 𝑛)) :op0(O4 / divide :op0(N2 / 1) :op1(V6 / 𝑛)) :op0(V7 / …) :op0(O5 / divide :op0(N3 / 1) :op1(V8 / 𝑛))))
                  :arg1-of (m3 / mean-01
                        :arg2 (e2 / equal-01
                              :arg2 (s4 / string-entity
                                    :value MATH 
 :math (V9 / 𝑚)))))
            :condition (t4 / true-01
                  :arg1 t3)))"
B.285	"(d / determine-01
      :arg1 (f / formula
            :mod (s / sum-of
                  :op1 (s2 / series)))
      :arg2 (f2 / formula
            :mod (t / term
                  :ord (o / ordinal-entity
                        :value 3))
            :arg1-of (r / resemble-01
                  :arg2 (o2 / or
                        :op1 (s3 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(V1 / 𝑈) :op1(V2 / 𝑛)) :op0(U2 / plus :op0(O2 / SUP :op0(V3 / 𝑛) :op1(N1 / 2)) :op0(V4 / 𝑛))))
                        :op2 (s4 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(O3 / SUB :op0(V5 / 𝑈) :op1(V6 / 𝑛)) :op0(U4 / plus :op0(O4 / minus :op0(U5 / times :op0(N2 / 6) :op0(O5 / SUP :op0(V7 / 𝑛) :op1(N3 / 2))) :op1(U6 / times :op0(N4 / 12) :op0(V8 / 𝑛))) :op0(N5 / 5)))))))
      :manner (a / amr-unknown))"
B.286	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (d / decrease-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(V1 / 𝑎) :op1(V2 / 𝑛))))
                  :op2 (p / positive
                        :domain s)))
      :snt2 (ii / imply-01
            :arg0 (c / converge-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O2 / sum :op0(O3 / SUB :op0(V3 / 𝑎) :op1(V4 / 𝑘)))))
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(O4 / limit :op0(O5 / SUB :op0(O6 / limit) :op1(F1 / → :op0(V5 / 𝑛) :op1(U2 / plus :op0(C1 / infinity)))) :op1(U3 / times :op0(V6 / 𝑛) :op0(O7 / SUB :op0(V7 / 𝑎) :op1(V8 / 𝑛)))) :op0(N1 / 0)))
            :time (t / then))
      :snt3 (t2 / think-01
            :arg0 (ii2 / i)
            :arg1 (t3 / thing
                  :mod (o / only)
                  :arg1-of (d2 / do-02
                        :arg0 y)
                  :arg1-of (c2 / cause-01
                        :arg0 (p2 / positive
                              :domain (s4 / string-entity
                                    :value MATH 
 :math (U4 / times :op0(V9 / 𝑛) :op0(O8 / SUB :op0(V10 / 𝑎) :op1(V11 / 𝑛)))))))
            :domain (f / find-01
                  :arg0 y
                  :arg1 (b / bind-01
                        :arg1 (s5 / sequence)
                        :mod (u / upper)))))"
B.287	"(f / form
      :arg1-of (c / close-01)
      :domain (a / amr-unknown)
      :mod (s / string-entity
            :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑖) :op0(N1 / 1))) :op1(V2 / 𝑛)) :op1(O5 / divide :op0(U2 / times :op0(N2 / 2) :op0(V3 / 𝑖)) :op1(O6 / SUP :op0(N3 / 2) :op1(V4 / 𝑖))))))"
B.288	"(m / multi-sentence
      :snt1 (q / question-01
            :arg0 (ii / i)
            :arg1 (c / converge-01
                  :arg0 (s / series
                        :location (b / below))
                  :mod (a / also)
                  :polarity (a2 / amr-unknown))
            :location (h / here))
      :snt2 (c2 / change-01
            :arg0 (s2 / sign)
            :arg1 (t / term
                  :mod (e / every)
                  :mod (s3 / string-entity
                        :value MATH 
 :math (M1 / L-3 :op0(O1 / sum :op0(O2 / divide :op0(U1 / times :op0(W1 / ) :op0(F1 / sin :op0(V1 / 𝑛))) :op1(V2 / 𝑛))) :op1(W2 / ) :op2(O3 / sum :op0(O4 / divide :op0(F2 / sin :op0(V3 / 𝑛)) :op1(U2 / times :op0(V4 / 𝑛) :op0(F3 / abs :op0(F4 / sin :op0(V5 / 𝑛)))))))))
            :manner (s4 / speak-01
                  :manner (l / loose)))
      :snt3 (s5 / surprise-01
            :arg0 (c3 / converge-01
                  :polarity -
                  :arg0 (ii2 / it))
            :arg1 (ii3 / i)))"
B.289	"(f / find-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (t / thing
            :arg2-of (s / solve-01)
            :arg1-of (g / general-02)
            :mod (e / equal-01
                  :arg2 MATH 
 :math (U1 / plus :op0(O1 / SUP :op0(V1 / 𝑥) :op1(V2 / 𝑛)) :op0(O2 / SUP :op0(V3 / 𝑦) :op1(V4 / 𝑛)) :op0(O3 / SUP :op0(V5 / 𝑧) :op1(V6 / 𝑛))))))"
B.290	"(m / method
      :purpose (p / prove-01
            :arg1 (p2 / possible-01
                  :arg1 (d / divide-02
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O1 / minus :op0(U1 / times :op0(N1 / 7) :op0(O2 / SUP :op0(N2 / 11) :op1(U2 / plus :op0(U3 / times :op0(N3 / 2) :op0(V1 / 𝑛)) :op0(N4 / 1)))) :op1(O3 / SUP :op0(N5 / 3) :op1(O4 / minus :op0(U4 / times :op0(N6 / 4) :op0(V2 / 𝑛)) :op1(N7 / 1)))))
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (N8 / 10)))))
      :arg1-of (h / have-degree-91
            :arg2 (g / good-02
                  :arg1 m)
            :arg3 (m2 / most)))"
B.291	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (s / series
                  :quant 2
                  :arg1-of (f / follow-04)
                  :arg1-of (m2 / mean-01
                        :arg2 (a / and
                              :op1 (s2 / string-entity
                                    :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑛) :op0(N1 / 1))) :op1(C1 / infinity)) :op1(O5 / divide :op0(O6 / SUB :op0(O7 / SUP :op0(O8 / SUB :op0(O9 / product) :op1(U2 / eq :op0(V2 / 𝑘) :op0(N2 / 1))) :op1(V3 / 𝑛)) :op1(O10 / SUP :op0(U3 / times :op0(N3 / 2) :op0(V4 / 𝑘)) :op1(N4 / 2))) :op1(O11 / factorial :op0(U4 / plus :op0(U5 / times :op0(N5 / 2) :op0(V5 / 𝑛)) :op0(N6 / 2))))))
                              :op2 (s3 / string-entity
                                    :value MATH 
 :math (O12 / SUB :op0(O13 / SUP :op0(O14 / SUB :op0(O15 / sum) :op1(U6 / eq :op0(V6 / 𝑛) :op0(N7 / 0))) :op1(C2 / infinity)) :op1(O16 / divide :op0(O17 / SUB :op0(O18 / SUP :op0(O19 / SUB :op0(O20 / product) :op1(U7 / eq :op0(V7 / 𝑘) :op0(N8 / 0))) :op1(V8 / 𝑛)) :op1(O21 / SUP :op0(U8 / plus :op0(U9 / times :op0(N9 / 2) :op0(V9 / 𝑘)) :op0(N10 / 1)) :op1(N11 / 2))) :op1(O22 / factorial :op0(U10 / plus :op0(U11 / times :op0(N12 / 2) :op0(V10 / 𝑛)) :op0(N13 / 3))))))))))
      :snt2 (f2 / figure-out-05
            :arg0 (ii2 / i)
            :arg1 (p / product
                  :ord (o / ordinal-entity
                        :value MATH 
 :math (V11 / 𝑛))
                  :mod (p2 / part)
                  :arg1-of (m3 / mean-01
                        :arg2 (a2 / and
                              :op1 (s4 / string-entity
                                    :value MATH 
 :math (U12 / eq :op0(O23 / SUB :op0(O24 / SUP :op0(O25 / SUB :op0(O26 / product) :op1(U13 / eq :op0(V12 / 𝑘) :op0(N14 / 1))) :op1(V13 / 𝑛)) :op1(O27 / SUP :op0(U14 / times :op0(N15 / 2) :op0(V14 / 𝑘)) :op1(N16 / 2))) :op0(U15 / times :op0(O28 / SUP :op0(N17 / 4) :op1(V15 / 𝑛)) :op0(O29 / SUP :op0(O30 / factorial :op0(V16 / 𝑛)) :op1(N18 / 2)))))
                              :op2 (s5 / string-entity
                                    :value MATH 
 :math (U16 / eq :op0(O31 / SUB :op0(O32 / SUP :op0(O33 / SUB :op0(O34 / product) :op1(U17 / eq :op0(V17 / 𝑘) :op0(N19 / 0))) :op1(V18 / 𝑛)) :op1(O35 / SUP :op0(U18 / plus :op0(U19 / times :op0(N20 / 2) :op0(V19 / 𝑘)) :op0(N21 / 1)) :op1(N22 / 2))) :op0(O36 / divide :op0(O37 / SUP :op0(O38 / factorial :op0(U20 / plus :op0(U21 / times :op0(N23 / 2) :op0(V20 / 𝑛)) :op0(N24 / 1))) :op1(N25 / 2)) :op1(U22 / times :op0(O39 / SUP :op0(N26 / 4) :op1(V21 / 𝑛)) :op0(O40 / SUP :op0(O41 / factorial :op0(V22 / 𝑛)) :op1(N27 / 2))))))))))
      :snt3 (c / cause-01
            :arg1 (b / become-01
                  :arg1 (t / they)
                  :arg2 (s6 / string-entity
                        :value MATH 
 :math (U23 / eq :op0(O42 / SUB :op0(O43 / SUP :op0(O44 / SUB :op0(O45 / sum) :op1(U24 / eq :op0(V23 / 𝑛) :op0(N28 / 1))) :op1(C3 / infinity)) :op1(O46 / divide :op0(O47 / SUB :op0(O48 / SUP :op0(O49 / SUB :op0(O50 / product) :op1(U25 / eq :op0(V24 / 𝑘) :op0(N29 / 1))) :op1(V25 / 𝑛)) :op1(O51 / SUP :op0(U26 / times :op0(N30 / 2) :op0(V26 / 𝑘)) :op1(N31 / 2))) :op1(O52 / factorial :op0(U27 / plus :op0(U28 / times :op0(N32 / 2) :op0(V27 / 𝑛)) :op0(N33 / 2))))) :op0(O53 / SUB :op0(O54 / SUP :op0(O55 / SUB :op0(O56 / sum) :op1(U29 / eq :op0(V28 / 𝑛) :op0(N34 / 1))) :op1(C4 / infinity)) :op1(O57 / divide :op0(U30 / times :op0(O58 / SUP :op0(N35 / 4) :op1(V29 / 𝑛)) :op0(O59 / SUP :op0(O60 / factorial :op0(V30 / 𝑛)) :op1(N36 / 2))) :op1(O61 / factorial :op0(U31 / plus :op0(U32 / times :op0(N37 / 2) :op0(V31 / 𝑛)) :op0(N38 / 2))))))
                        :arg1-of (f3 / follow-04))
                  :condition (p3 / put-01
                        :arg0 ii2
                        :arg1 t
                        :arg2 (s7 / series
                              :poss ii2)
                        :direction (b2 / back))))
      :snt4 (d / diverge-01
            :arg0 (t2 / this)
            :arg1-of (e / expect-01
                  :arg0 (t3 / test-01
                        :arg2 (l / limit)))
            :time (n / now)))"
B.292	"(m / multi-sentence
      :snt1 (a / and
            :op1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (u / use-01
                        :arg0 ii
                        :arg1 (l / lemma
                              :mod (r / ratio))
                        :arg2 (t2 / tackle-01
                              :arg0 ii
                              :arg1 (a2 / and
                                    :op1 (t3 / thing
                                          :arg1-of (q / question-01)
                                          :mod (t4 / this))
                                    :op2 (f / fact
                                          :topic (s / string-entity
                                                :value MATH 
 :math (O1 / geq :op0(O2 / SUP :op0(U1 / plus :op0(V1 / 𝑛) :op0(N1 / 1)) :op1(V2 / 𝑘)) :op1(U2 / plus :op0(N2 / 1) :op0(U3 / times :op0(V3 / 𝑛) :op0(V4 / 𝑘)))))
                                          :mod (a3 / also))))))
            :op2 (r2 / reach-01
                  :polarity -
                  :arg0 ii
                  :arg1 (t5 / thing
                        :arg2-of (a4 / answer-01))))
      :snt2 (r3 / recommend-01
            :arg1 (g / go-03
                  :arg0 (ii2 / i)
                  :arg1 (s2 / solve-01
                        :arg0 ii2
                        :arg1 (p / problem
                              :mod (t6 / this)))
                  :manner (a5 / amr-unknown))))"
B.293	"(s / sum-up-01
      :arg1 (t / thing
            :name (n / name
                  :op1 MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑗) :op0(N1 / 2))) :op1(O5 / minus :op0(V2 / 𝑛) :op1(N2 / 1))) :op1(O6 / SUP :op0(V3 / 𝑗) :op1(N3 / 2))))
            :arg2-of (p / property-02)))"
B.294	"(m / multi-sentence
      :snt1 (l / look-01
            :arg0 (ii / i)
            :arg1 (t / thing
                  :arg1-of (r / reference-04))
            :purpose (a / answer-01
                  :arg0 ii
                  :arg1 (t2 / thing
                        :arg1-of (q / question-01)
                        :location (t3 / title))))
      :snt2 (l2 / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t4 / try-01
                  :arg0 (ii2 / i)
                  :arg1 (c / clarify-10
                        :arg0 ii2
                        :arg1 (m2 / mean-01
                              :arg0 ii2
                              :arg2 (r2 / recommend-01
                                    :arg1 (t5 / touch-on-04
                                          :arg0 (o / one)
                                          :arg1 (c2 / concept
                                                :arg1-of (c3 / call-01
                                                      :arg2 (h / hyper-hypercohomology)
                                                      :arg1-of (p / possible-01))))
                                    :condition (h2 / have-03
                                          :arg0 (s / sheaf
                                                :arg1-of (s2 / single-02)
                                                :mod (s3 / string-entity
                                                      :value MATH 
 :math (V1 / ℱ)))
                                          :arg1 (r3 / resolution
                                                :mod (s4 / string-entity
                                                      :value MATH 
 :math (O1 / SUP :op0(V2 / 𝒢) :op1(V3 / ∙))))
                                          :manner (o2 / object
                                                :arg1-of (ii3 / inject-01
                                                      :arg1-of (n / need-01
                                                            :polarity -))))))))))"
B.295	"(m / multi-sentence
      :snt1 (n / need-01
            :arg0 (ii / i)
            :arg1 (h / help-01
                  :arg1 (u / understand-01
                        :arg0 ii
                        :arg1 (t / thing
                              :manner-of (s / solve-01
                                    :arg0 ii
                                    :arg1 (t2 / task
                                          :mod (t3 / this)))))
                  :arg2 ii)
            :arg1-of (c / cause-01
                  :arg0 (l / lose-02
                        :arg1 ii
                        :degree (b / bit)
                        :time (m2 / moment))))
      :snt2 (u2 / use-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t4 / thing
                  :arg2-of (p / power-01)
                  :arg1-of (e / equal-01
                        :arg2 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(O1 / divide :op0(N1 / 1) :op1(O2 / minus :op0(N2 / 1) :op1(V3 / 𝑥)))))))
            :arg2 (d / decide-01
                  :arg0 y
                  :arg1 (s3 / sum-01
                        :arg1 (s4 / series
                              :arg1-of (e2 / equal-01
                                    :arg2 (a / and
                                          :op1 (s5 / string-entity
                                                :value MATH 
 :math (O3 / SUB :op0(O4 / SUP :op0(O5 / SUB :op0(O6 / sum) :op1(U3 / eq :op0(V4 / 𝑛) :op0(N3 / 1))) :op1(C1 / infinity)) :op1(U4 / times :op0(V5 / 𝑛) :op0(U5 / plus :op0(V6 / 𝑛) :op0(N4 / 1)) :op0(O7 / SUP :op0(V7 / 𝑥) :op1(V8 / 𝑛)))))
                                          :op2 (s6 / string-entity
                                                :value MATH 
 :math (O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / sum) :op1(U6 / eq :op0(V9 / 𝑛) :op0(N5 / 1))) :op1(C2 / infinity)) :op1(O12 / divide :op0(U7 / times :op0(V10 / 𝑛) :op0(U8 / plus :op0(V11 / 𝑛) :op0(N6 / 1))) :op1(O13 / SUP :op0(N7 / 3) :op1(V12 / 𝑛)))))))))))
      :snt3 (u3 / understand-01
            :polarity -
            :arg0 (ii2 / i)
            :arg1 (m3 / manipulate-01
                  :arg0 ii2
                  :arg1 (s7 / sum-01)
                  :purpose (u4 / use-01
                        :arg0 ii2
                        :arg1 (s8 / series
                              :arg1-of (p2 / power-01)
                              :poss (f / function))))))"
B.296	"(c / contrast-01
      :arg1 (k / know-01
            :arg0 (w / we)
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / form-seq :op0(U1 / eq :op0(O2 / SUP :op0(V1 / 𝑒) :op1(V2 / 𝑥)) :op0(O3 / SUB :op0(O4 / SUP :op0(O5 / SUB :op0(O6 / sum) :op1(U2 / eq :op0(V3 / 𝑛) :op0(N1 / 0))) :op1(C1 / infinity)) :op1(O7 / divide :op0(O8 / SUP :op0(V4 / 𝑥) :op1(V5 / 𝑛)) :op1(O9 / factorial :op0(V6 / 𝑛))))) :op1(O10 / in :op0(V7 / 𝑥) :op1(V8 / ℝ)))
                  :arg1-of (w2 / write-out-03
                        :arg1-of (p / possible-01))))
      :arg2 (d / define-01
            :polarity -
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (O11 / SUP :op0(N2 / 0) :op1(N3 / 0)))
            :manner (w3 / well)))"
B.297	"(m / multi-sentence
      :snt1 (ii / idea
            :topic (l / location
                  :location-of (s / start-01
                        :arg0 (ii2 / i)
                        :arg1-of (p / possible-01)))
            :mod (a / any))
      :snt2 (s2 / state-01
            :arg1 (f / find-01
                  :arg1 (ii3 / integer
                        :mod (a2 / all)
                        :mod (v / variable
                              :name (n / name
                                    :op1 ""n""))
                        :arg0-of (s3 / satisfy-02
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / italic-ϕ) :op0(V2 / 𝑛)) :op0(N1 / 320))
                                    :arg2-of (ii4 / include-91
                                          :arg1 (s5 / string-entity
                                                :value MATH 
 :math (V3 / italic-ϕ)
                                                :domain (f2 / function
                                                      :name (n2 / name
                                                            :op1 ""euler's""
                                                            :op2 ""phi""))))))))))"
B.298	"(m / multi-sentence
      :snt1 (s / struggle-02
            :arg0 (ii / i)
            :arg1 (u / understand-01
                  :arg0 ii
                  :arg1 (t / transform-01
                        :arg1 (f / function-01
                              :arg1 (d / delta)
                              :mod (t2 / thing
                                    :name (n / name
                                          :op1 ""dirac"")))
                        :arg1-of (v / vary-01))))
      :snt2 (t3 / transform-01
            :arg2 (t4 / thing
                  :name (n2 / name
                        :op1 MATH 
 :math (F1 / → :op0(U1 / times :op0(V1 / 𝛿) :op0(O1 / minus :op0(U2 / times :op0(V2 / 𝑎) :op0(V3 / 𝜒) :op0(V4 / 𝑧)) :op1(V5 / 𝑏))) :op1(U3 / times :op0(V6 / 𝛿) :op0(O2 / minus :op0(V7 / 𝑧) :op1(V8 / 𝑐)))))
                  :mod (t5 / type
                        :arg1-of (f2 / follow-01)))
            :arg1-of (s2 / specific-02)
            :arg1-of (m2 / mean-01
                  :arg2 (c / constant
                        :domain (a / and
                              :op1 (s3 / string-entity
                                    :value MATH 
 :math (M1 / L-2 :op0(V9 / 𝑎) :op1(V10 / 𝑏)))
                              :op2 (s4 / string-entity
                                    :value MATH 
 :math (V11 / 𝑐)))
                        :location (h / here)))
            :snt3 (r / relation-03
                  :arg0 (s5 / string-entity
                        :value MATH 
 :math (U4 / times :op0(V12 / 𝜒) :op0(V13 / 𝑧)))
                  :arg1 (s6 / string-entity
                        :value MATH 
 :math (U5 / times :op0(V14 / 𝐻) :op0(V15 / 𝑧)))
                  :arg1-of (m3 / mean-01
                        :arg2 (f3 / function-01
                              :arg0 (s7 / string-entity
                                    :value MATH 
 :math (V16 / 𝑧))
                              :arg1 (s8 / string-entity
                                    :value MATH 
 :math V11 )
                              :arg1-of (v2 / vary-01
                                    :arg1-of (s9 / smooth-06))
                              :mod (p / positive))))))"
B.299	"(c / contrast-01
      :arg1 (p / prove-01
            :arg1 (e / equal-01
                  :arg2 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / minus :op0(F1 / cos :op0(O2 / divide :op0(V1 / 𝜋) :op1(N1 / 5))) :op1(F2 / cos :op0(O3 / divide :op0(U2 / times :op0(N2 / 2) :op0(V2 / 𝜋)) :op1(N3 / 5)))) :op0(O4 / divide :op0(N4 / 1) :op1(N5 / 2))))))
      :arg2 (f / find-01
            :polarity -
            :arg1 (e2 / equal-01
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (F3 / cos :op0(O5 / divide :op0(V3 / 𝜋) :op1(N6 / 5)))))))"
B.300	"(m / multi-sentence
      :snt1 (s / suppose-02
            :arg1 (ii / i)
            :arg2 (f / find-out-03
                  :arg0 ii
                  :arg1 (t / truth-value
                        :polarity-of (c / continue-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(O1 / divide :op0(N1 / 1) :op1(U3 / plus :op0(N2 / 1) :op0(F1 / ln :op0(O2 / SUP :op0(F2 / ln) :op1(N3 / 2)) :op1(V3 / 𝑥))))))
                              :manner (u / uniform)
                              :location (s3 / string-entity
                                    :value MATH 
 :math (U4 / eq :op0(V4 / 𝐼) :op0(O3 / interval$O-O$$ :op0(N4 / 0) :op1(C1 / infinity))))))))
      :snt2 (t2 / think-01
            :arg0 (ii2 / i)
            :quant (l / lot)))"
B.301	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg2 (p / possible-01
                  :polarity -
                  :arg1 (p2 / prove-01
                        :arg0 (ii / i)
                        :arg1 (t / that))))
      :snt2 (e / edit-01
            :arg1 (l / like-02
                  :arg0 (ii2 / i)
                  :arg1 (h / have-03
                        :arg0 ii2
                        :arg1 (p3 / prove-01
                              :arg0-of (u / use-01
                                    :polarity -
                                    :arg1 (ii3 / information
                                          :topic (f / fine-04
                                                :arg1 (u2 / use-01
                                                      :arg1 (e2 / equal-01
                                                            :example (o / or
                                                                  :op1 (p4 / person
                                                                        :name (n / name
                                                                              :op1 ""cauchy""
                                                                              :op2 ""schwarz""))
                                                                  :op2 (p5 / person
                                                                        :name (n2 / name
                                                                              :op1 ""holder"")))))))))))))"
B.302	"(m / multi-sentence
      :snt1 (s / solution
            :quant (a / amr-unknown))
      :snt2 (c / contrast-01
            :arg1 (a2 / approach-02
                  :arg0 (ii / i)
                  :arg2 (t / take-01
                        :arg0 ii
                        :arg1 (r / root-of
                              :op1 (s2 / string-entity
                                    :value 17
                                    :unit (s3 / string-entity
                                          :value MATH 
 :math (V1 / 𝑛)))
                              :arg0-of (g / give-01
                                    :arg1 (s4 / string-entity
                                          :value 10
                                          :unit (s5 / string-entity
                                                :value MATH 
 :math (U1 / eq :op0(V2 / 𝑧) :op0(U2 / times :op0(O1 / root :op0(V3 / 𝑠) :op1(V4 / 𝑛)) :op0(O2 / SUP :op0(V5 / 𝑒) :op1(O3 / divide :op0(U3 / times :op0(V6 / 𝑖) :op0(V7 / 𝜑)) :op1(V8 / 𝑛)))))))))
                        :arg1-of (s6 / simple-02))
                  :time (n / now))
            :arg2 (s7 / seem-01
                  :arg1 (a3 / ask-02
                        :arg0 (p / problem
                              :mod (t2 / this))
                        :arg1 (s8 / show-01
                              :arg0 (w / we)
                              :arg1 (e / exist-01
                                    :arg1 (r2 / root-of
                                          :op1 (s9 / string-entity
                                                :value 18
                                                :unit (s10 / string-entity
                                                      :value MATH 
 :math (V9 / 𝑛))))))
                        :arg2 w))))"
B.303	"(m / multi-sentence
      :snt1 (t / theorem
            :topic (h / have-mod-91
                  :arg1 (a / and
                        :op1 (b / base
                              :mod (s / string-entity
                                    :value MATH 
 :math (M1 / L-2 :op0(V1 / 𝑥) :op1(V2 / 𝑦))))
                        :op2 (b2 / bracket
                              :arg1-of (d / determine-01
                                    :arg2 (s2 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(O1 / interval$C-C$$ :op0(V3 / 𝑥) :op1(V4 / 𝑦)) :op0(V5 / 𝑥))))))
                  :arg2 (t2 / thing
                        :name (n / name
                              :op1 ""lie""
                              :op2 ""algebra"")
                        :mod (o / only)
                        :mod (c / commutative
                              :polarity -)
                        :mod (d2 / dimension
                              :quant 2))
                  :extent (u / up-to
                        :op1 (ii / isomorphic))))
      :snt2 (u2 / understand-01
            :arg0 (ii2 / i)
            :arg1 ii
            :domain (s3 / space
                  :mod (a2 / all)
                  :mod (v / vector)
                  :mod d2
                  :location (f / field
                        :name (n2 / name
                              :op1 MATH 
 :math (V6 / 𝐾))))
            :prep-to (o2 / other
                  :mod (e / each))))"
B.304	"(m / multi-sentence
      :snt1 (p / prove-01
            :arg1 (a / admit-01
                  :polarity -
                  :arg0 (s / surface
                        :arg1-of (r / real-04)
                        :arg1-of (o / orient-01
                              :arg1-of (p2 / possible-01
                                    :polarity -)))
                  :arg1 (s2 / structure
                        :mod (c / complex)))
            :arg1-of (e / easy-05)
            :polarity (a2 / amr-unknown))
      :snt2 (k / know-01
            :arg0 (ii / i)
            :arg1 (p3 / prove-01
                  :arg1 (o2 / obligate-01
                        :arg2 (o3 / orient-01
                              :arg1 (m2 / manifold
                                    :mod (c2 / complex))))
                  :manner (o4 / observe-01
                        :arg1 (s3 / satisfy-01
                              :arg0 (s4 / structure
                                    :mod (a3 / any)
                                    :location (s5 / surface
                                          :arg1-of (r2 / real-04)
                                          :arg1-of (e2 / equal-01
                                                :arg2 (e3 / equal-01
                                                      :arg2 (s6 / string-entity
                                                            :value MATH 
 :math (V1 / 𝑋))))))
                              :arg1 (c3 / condition
                                    :arg1-of (e4 / equal-01
                                          :arg2 (s7 / string-entity
                                                :value MATH 
 :math (O1 / subset :op0(O2 / interval$C-C$$ :op0(O3 / SUP :op0(O4 / SUB :op0(V2 / 𝑇) :op1(V3 / 𝑋)) :op1(M1 / L-2 :op0(N1 / 0) :op1(N2 / 1))) :op1(O5 / SUP :op0(O6 / SUB :op0(V4 / 𝑇) :op1(V5 / 𝑋)) :op1(M2 / L-2 :op0(N3 / 0) :op1(N4 / 1)))) :op1(O7 / SUP :op0(O8 / SUB :op0(V6 / 𝑇) :op1(V7 / 𝑋)) :op1(M3 / L-2 :op0(N5 / 0) :op1(N6 / 1))))))
                                    :poss (t / theorem
                                          :name (n / name
                                                :op1 ""newlander-nirenberg"")))
                              :arg1-of (c4 / cause-01
                                    :arg0 (a4 / and
                                          :op1 (b / bundle-01
                                                :arg1 (d / dimension
                                                      :mod (c5 / complex))
                                                :arg2 (s8 / string-entity
                                                      :value MATH 
 :math (N7 / 1)))
                                          :op2 (a5 / alternate-01
                                                :arg1 (b2 / bracket
                                                      :mod (s9 / string-entity
                                                            :value MATH 
 :math (O9 / interval$C-C$$ :op0(O10 / minus) :op1(O11 / minus))))
                                                :arg1-of (m3 / mean-01
                                                      :arg2 (d2 / disappear-01
                                                            :arg1 b2
                                                            :location (s10 / string-entity
                                                                  :value MATH 
 :math (O12 / SUP :op0(O13 / SUB :op0(V8 / 𝑇) :op1(V9 / 𝑋)) :op1(M4 / L-2 :op0(N8 / 0) :op1(N9 / 1)))))))))))))
      :snt3 (c6 / cause-01
            :arg0 t
            :arg1 (a6 / and
                  :op1 (a7 / admit-01
                        :arg0 (s11 / string-entity
                              :value MATH 
 :math (V10 / 𝑋))
                        :arg1 (s12 / structure
                              :mod (c7 / complex)))
                  :op2 (o5 / obligate-01
                        :arg1 (p4 / possible-01
                              :arg1 (o6 / orient-01
                                    :arg1 m2
                                    :mod (c8 / complex)))))))"
B.305	"(v / value-01
      :arg1 (f / function-01
            :arg0 (s / string-entity
                  :value MATH 
 :math (O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑁) :op1(C1 / infinity))) :op1(F2 / floor :op0(O4 / SUB :op0(O5 / SUP :op0(O6 / SUB :op0(O7 / sum) :op1(U1 / eq :op0(V2 / 𝑟) :op0(N1 / 1))) :op1(V3 / 𝑁)) :op1(O8 / divide :op0(N2 / 1) :op1(O9 / SUP :op0(N3 / 2) :op1(V4 / 𝑟)))))))
            :mod (f2 / floor))
      :arg2 (a / amr-unknown))"
B.306	"(m / multi-sentence
      :snt1 (s / see-01
            :arg0 (ii / i)
            :arg1 (e / expand-01
                  :quant 1
                  :arg1 (t / thing
                        :name (n / name
                              :op1 ""euler""
                              :op2 ""mascheroni""
                              :op3 ""constant""))
                  :arg1-of (ii2 / include-91
                        :arg2 (e2 / expand-01
                              :arg1 (t2 / thing
                                    :name (n2 / name
                                          :op1 ""meissel""
                                          :op2 ""mertens""
                                          :op3 ""constant"")
                                    :arg2-of (c / consequence-03
                                          :arg1 (t3 / theorem
                                                :name (n3 / name
                                                      :op1 ""mertens""
                                                      :op2 ""ter theorem""))))))))
      :snt2 (e3 / expand-01
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(V1 / 𝐵) :op0(U2 / plus :op0(V2 / 𝛾) :op0(O1 / sum :op0(O2 / SUB :op0(O3 / sum) :op1(V3 / 𝑝)) :op1(M1 / S-1 :op0(U3 / plus :op0(F1 / log :op0(O4 / minus :op0(N1 / 1) :op1(O5 / divide :op0(N2 / 1) :op1(V4 / 𝑝)))) :op0(O6 / divide :op0(N3 / 1) :op1(V5 / 𝑝))))))))
            :mod (t4 / that))
      :snt3 (u / understand-01
            :polarity -
            :arg0 (ii3 / i)
            :arg1 (t5 / thing
                  :arg0-of (c2 / cause-01
                        :arg1 (d / difficult
                              :domain (p / prove-01
                                    :arg1 (r / rational
                                          :polarity -
                                          :domain (t6 / thing
                                                :name (n4 / name
                                                      :op1 ""euler""
                                                      :op2 ""mascheroni""
                                                      :op3 ""constant"")))))))
            :time (n5 / now)))"
B.307	"(m / multi-sentence
      :snt1 (q / question-01
            :arg0 (ii / i)
            :arg1 (c / cause-01
                  :arg0 (a / amr-unknown)
                  :arg1 (t / true-01
                        :arg1 (t2 / this))))
      :snt2 (c2 / cause-01
            :arg0 (a2 / amr-unknown)
            :arg1 (c3 / case-04
                  :arg1 (e / equal-01
                        :arg1 (e2 / equal-01
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (V1 / 𝑥))
                              :arg2 (s2 / string-entity
                                    :value MATH 
 :math (V2 / 𝑛)))
                        :arg2 (e3 / equal-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(V3 / ord :op0(O1 / SUB :op0(V4 / ord) :op1(V5 / 𝑛)) :op1(V6 / 𝑥)) :op0(U2 / times :op0(V7 / 𝜆) :op0(V8 / 𝑛))))
                              :arg2 s2)
                        :time (a3 / always)))
            :mod (w / word
                  :mod (o / other))))"
B.308	"(m / multi-sentence
      :snt1 (a / and
            :op1 (h / have-trouble-04
                  :arg0 (ii / i)
                  :arg1 (u / understand-01
                        :arg0 ii
                        :arg1 (d / define-01
                              :arg0 (p / person
                                    :name (n / name
                                          :op1 ""riemann""))
                              :arg1 (f / function
                                    :mod (z / zeta)))))
            :op2 (n2 / need-01
                  :arg0 ii
                  :arg1 (g / give-01
                        :arg0 ii
                        :arg1 (s / summarize-01
                              :arg1 d
                              :mod (b / brief))
                        :location (h2 / here)
                        :time (b2 / before
                              :op1 (p2 / possible-01
                                    :arg1 (g2 / get-05
                                          :arg1 ii
                                          :arg2 (q / question-01
                                                :arg0 ii)))))))
      :snt2 (a2 / and
            :op1 (d2 / derive-01
                  :arg0 p
                  :arg1 (r / represent-01
                        :arg0 (s2 / string-entity
                              :value MATH 
 :math (U1 / and :op0(U2 / eq :op0(U3 / times :op0(V1 / 𝜁) :op0(V2 / 𝑠)) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U4 / eq :op0(V3 / 𝑛) :op0(N1 / 1))) :op1(C1 / infinity)) :op1(O5 / divide :op0(N2 / 1) :op1(O6 / SUP :op0(V4 / 𝑛) :op1(V5 / 𝑠))))) :op0(U5 / eq :op0(U6 / times :op0(O7 / divide :op0(N3 / 1) :op1(U7 / times :op0(V6 / Γ) :op0(V7 / 𝑠) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / int) :op1(N4 / 0)) :op1(C2 / infinity)) :op1(U8 / times :op0(O12 / divide :op0(O13 / SUP :op0(V8 / 𝑥) :op1(O14 / minus :op0(V9 / 𝑠) :op1(N5 / 1))) :op1(O15 / minus :op0(O16 / SUP :op0(V10 / 𝑒) :op1(V11 / 𝑥)) :op1(N6 / 1))) :op0(F1 / d :op0(V12 / 𝑥))))))))))
                        :arg1-of (v / valid-02
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (U9 / times :op0(W1 / ) :op0(V13 / 𝑠) :op0(W2 / ) :op0(N7 / 1))))))
            :op2 (m2 / modify-01
                  :arg0 p
                  :arg1 (ii2 / integral)
                  :purpose (d3 / define-01
                        :arg0 p
                        :arg1 f
                        :arg2-of (e / except-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U10 / eq :op0(V14 / 𝑠) :op0(N8 / 1))
                                    :arg0-of (h3 / have-03
                                          :arg1 (p3 / pole
                                                :arg1-of (s5 / simple-02))))))))
      :snt3 g
      :arg0 (s6 / string-entity
            :value MATH 
 :math (U11 / eq :op0(U12 / times :op0(V15 / 𝜁) :op0(V16 / 𝑠)) :op0(U13 / times :op0(O17 / divide :op0(U14 / times :op0(V17 / Γ) :op0(O18 / minus :op0(N9 / 1) :op1(V18 / 𝑠))) :op1(U15 / times :op0(N10 / 2) :op0(V19 / 𝜋) :op0(V20 / 𝑖) :op0(O19 / int :op0(O20 / SUB :op0(O21 / int) :op1(V21 / 𝐶)) :op1(U16 / times :op0(O22 / divide :op0(O23 / SUP :op0(O24 / minus :op0(V22 / 𝑧)) :op1(V23 / 𝑠)) :op1(O25 / minus :op0(O26 / SUP :op0(V24 / 𝑒) :op1(V25 / 𝑧)) :op1(N11 / 1))) :op0(O27 / divide :op0(U17 / times :op0(V26 / 𝑑) :op0(V27 / 𝑧)) :op1(V28 / 𝑧))))))))
            :arg1-of (m3 / mean-01
                  :arg2 (c / contour
                        :mod (c2 / company
                              :name (n3 / name
                                    :op1 ""hankel"")))))
      :arg1 (p4 / path
            :arg0-of (t / travel-01
                  :arg1 (d4 / distance
                        :mod (s7 / small)
                        :mod (d5 / distance
                              :mod (d6 / distance
                                    :mod (e2 / equal
                                          :mod s6
                                          :value MATH 
 :math (V29 / 𝛿))))))
            :direction (a3 / above
                  :op1 (a4 / axis
                        :mod (p5 / positive)
                        :mod (s8 / string-entity
                              :value MATH 
 :math (V30 / 𝑥))))))"
B.309	"(m / multi-sentence
      :snt1 (c / consider-02
            :mode imperative
            :arg0 (y / you)
            :arg1 (e / equate-01
                  :arg2 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(V1 / 𝑥) :op1(N1 / 3)) :op0(V2 / 𝑎)))
                  :arg1-of (ii / instead-of-91
                        :arg2 (e2 / equate-01
                              :arg2 (s2 / string-entity
                                    :value MATH 
 :math (O2 / SUB :op0(V3 / 𝔽) :op1(V4 / 𝑝))
                                    :arg2-of (p / prime-01
                                          :mod (s3 / such)
                                          :arg0-of (c2 / cause-01
                                                :arg1 (e3 / equal-01
                                                      :arg2 (s4 / string-entity
                                                            :value MATH 
 :math (U2 / equivalent :op0(V5 / 𝑝) :op0(U3 / times :op0(N2 / 2) :op0(U4 / times :op0(W1 / ) :op0(N3 / 3))))))))))))
            :mod (f / first-of-all))
      :snt2 (h / have-concession-91
            :arg1 (c3 / convince-01
                  :polarity -
                  :arg0 (t / this)
                  :arg1 (ii2 / i)
                  :arg2-of (h2 / have-degree-91
                        :arg1 t
                        :arg3 (e4 / enough)))
            :arg2 (s5 / say-01
                  :arg0 (b / book
                        :arg1-of (r / read-01
                              :arg0 ii2
                              :time (c4 / current)))
                  :arg1 (s6 / solve-01
                        :quant 1
                        :arg1 (s7 / string-entity
                              :value MATH 
 :math (O3 / SUB :op0(V6 / 𝔽) :op1(V7 / 𝑝)))
                        :mod (e5 / exact)
                        :arg1-of (c5 / cause-01
                              :arg0 (e6 / equal-01
                                    :arg2 (s8 / string-entity
                                          :value MATH 
 :math (U5 / eq :op0(F1 / gcd :op0(N4 / 3) :op1(O4 / minus :op0(V8 / 𝑝) :op1(N5 / 1))) :op0(N6 / 1)))))))))"
B.310	"(f / find-01
      :arg1 (t / thing
            :arg2-of (s / solve-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / divide :op0(N1 / 4) :op1(V1 / 𝑥)) :op0(O2 / divide :op0(N2 / 10) :op1(V2 / 𝑦))) :op0(N3 / 1))))
            :mod (ii / integer
                  :mod (p / positive))))"
B.311	"(e / equal-01
      :arg1 (a / amr-unknown)
      :arg2 (s / string-entity
            :value MATH 
 :math (U1 / plus :op0(U2 / times :op0(V1 / 𝑓) :op0(O1 / divide :op0(N1 / 1) :op1(N2 / 27))) :op0(U3 / times :op0(V2 / 𝑓) :op0(O2 / divide :op0(N3 / 2) :op1(N4 / 27))) :op0(U4 / times :op0(V3 / 𝑓) :op0(O3 / divide :op0(N5 / 3) :op1(N6 / 27))) :op0(V4 / …) :op0(U5 / times :op0(V5 / 𝑓) :op0(O4 / divide :op0(N7 / 26) :op1(N8 / 27)))))
      :condition (g / give-01
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (U6 / eq :op0(U7 / times :op0(V6 / 𝑓) :op0(V7 / 𝑥)) :op0(O5 / divide :op0(O6 / SUP :op0(N9 / 9) :op1(V8 / 𝑥)) :op1(U8 / plus :op0(O7 / SUP :op0(N10 / 9) :op1(V9 / 𝑥)) :op0(N11 / 3)))))
            :arg2 (f / function)))"
B.312	"(p / prove-01
      :arg1 (e / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(F1 / floor :op0(O1 / divide :op0(F2 / floor :op0(O2 / divide :op0(V1 / 𝑎) :op1(V2 / 𝑏) :op1(V3 / 𝑐))))) :op0(F3 / floor :op0(O3 / divide :op0(V4 / 𝑎) :op1(U2 / times :op0(V5 / 𝑏) :op0(V6 / 𝑐)))))))
      :arg2 (e2 / equal-01
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (V7 / 𝑎))
            :arg2 (a / and
                  :op1 (s3 / string-entity
                        :value MATH 
 :math (V8 / 𝑏))
                  :op2 (s4 / string-entity
                        :value MATH 
 :math (V9 / 𝑐)))
            :mod (p2 / positive)))"
B.313	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (e / equal-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (O1 / in :op0(M1 / L-2 :op0(V1 / 𝑎) :op1(V2 / 𝑏)) :op1(V3 / 𝐺)))
                        :arg2 (g / group
                              :mod (a2 / abelian)
                              :mod (f / finite)))
                  :op2 (e2 / equal-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (O2 / form-seq :op0(U1 / eq :op0(F1 / abs :op0(V4 / 𝑎)) :op0(V5 / 𝑟)) :op1(U2 / eq :op0(F2 / abs :op0(V6 / 𝑏)) :op0(V7 / 𝑠))))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(F3 / gcd :op0(V8 / 𝑟) :op1(V9 / 𝑠)) :op0(N1 / 1))))))
      :snt2 (p / prove-01
            :mode imperative
            :arg0 (y2 / you)
            :arg1 (e3 / equal-01
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U4 / eq :op0(F4 / abs :op0(U5 / times :op0(V10 / 𝑎) :op0(V11 / 𝑏))) :op0(U6 / times :op0(V12 / 𝑟) :op0(V13 / 𝑠))))
                  :arg2 s3)))"
B.314	"(m / multi-sentence
      :snt1 (s / suppose-01
            :arg0 (y / you)
            :arg1 (h / have-03
                  :arg0 y
                  :arg1 (b / basis
                        :mod (o / orthonormal)
                        :mod (s2 / string-entity
                              :value MATH 
 :math (M1 / S-1 :op0(O1 / SUB :op0(V1 / 𝑒) :op1(V2 / 𝑛))))
                        :location (s3 / space
                              :mod (h2 / hilbert))
                        :arg0-of (c / cause-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (O2 / lt :op0(O3 / sum :op0(O4 / norm :op0(O5 / minus :op0(O6 / SUB :op0(V3 / 𝑒) :op1(V4 / 𝑛)) :op1(O7 / SUB :op0(V5 / 𝑥) :op1(V6 / 𝑛))))) :op1(N1 / 1)))))))
      :snt2 (h3 / have-quant-91
            :arg1 (c2 / condition
                  :mod (t / this))
            :arg3 (e / enough)
            :arg6 (p / prove-01
                  :arg0 y
                  :arg1 (s5 / span-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (M2 / S-1 :op0(O8 / SUB :op0(V7 / 𝑥) :op1(V8 / 𝑛))))
                        :arg1-of (c3 / close-01)
                        :domain (s7 / string-entity
                              :value MATH 
 :math (V9 / 𝐻))))
            :polarity (a / amr-unknown)))"
B.315	"(w / want-01
      :arg0 (ii / i)
      :arg1 (s / show-01
            :arg0 ii
            :arg1 (a / and
                  :op1 (e / equal-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U1 / times :op0(V1 / 𝑃) :op0(V2 / 𝑚)))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (O1 / forall)))
                  :op2 (e2 / equal-01
                        :arg1 (s4 / string-entity
                              :value MATH 
 :math (O2 / geq :op0(N1 / 0) :op1(V3 / 𝑚)))
                        :arg2 (s5 / string-entity
                              :value MATH 
 :math (O3 / forall :op0(V4 / 𝑚))))
                  :op3 (e3 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (U2 / times :op0(V5 / 𝑃) :op0(N2 / 0)))
                        :arg2 (s7 / string-entity
                              :value MATH 
 :math (U3 / times :op0(V6 / 𝑃) :op0(V7 / 𝑚))))
                  :op4 (e4 / equal-01
                        :arg1 (s8 / string-entity
                              :value MATH 
 :math (O4 / geq :op0(N3 / 0) :op1(V8 / 𝑚)))
                        :arg2 (s9 / string-entity
                              :value MATH 
 :math (U4 / and :op0(U5 / eq :op0(V9 / 𝑚) :op0(V10 / 𝑎)) :op0(U6 / eq :op0(N4 / 0))))
                        :arg1-of (c / cause-01
                              :arg0 (t / theorem
                                    :mod 2.2)))))
      :ord (o / ordinal-entity
            :value 1))"
B.316	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (w / we)
            :arg1 (a / and
                  :op1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(U2 / times :op0(O2 / divide :op0(V1 / ℤ) :op1(N1 / 2)) :op0(V2 / ℤ)) :op1(U3 / times)) :op0(O3 / SUB :op0(V3 / 𝐶) :op1(N2 / 1))))
                  :op2 (s2 / string-entity
                        :value MATH 
 :math (U4 / eq :op0(O4 / SUP :op0(U5 / times :op0(O5 / divide :op0(V4 / ℤ) :op1(N3 / 4)) :op0(V5 / ℤ)) :op1(U6 / times)) :op0(O6 / SUB :op0(V6 / 𝐶) :op1(N4 / 2))))
                  :op3 (s3 / string-entity
                        :value MATH 
 :math (U7 / eq :op0(O7 / SUP :op0(U8 / times :op0(O8 / divide :op0(V7 / ℤ) :op1(N5 / 8)) :op0(V8 / ℤ)) :op1(U9 / times)) :op0(U10 / times :op0(O9 / SUB :op0(V9 / 𝐶) :op1(N6 / 2)) :op0(O10 / SUB :op0(V10 / 𝐶) :op1(N7 / 2)))))
                  :op4 (s4 / string-entity
                        :value MATH 
 :math (U11 / eq :op0(O11 / SUP :op0(U12 / times :op0(O12 / divide :op0(V11 / ℤ) :op1(N8 / 16)) :op0(V12 / ℤ)) :op1(U13 / times)) :op0(U14 / times :op0(O13 / SUB :op0(V13 / 𝐶) :op1(N9 / 2)) :op0(O14 / SUB :op0(V14 / 𝐶) :op1(N10 / 4)))))
                  :op5 (s5 / string-entity
                        :value MATH 
 :math (U15 / eq :op0(O15 / SUP :op0(U16 / times :op0(O16 / divide :op0(V15 / ℤ) :op1(N11 / 32)) :op0(V16 / ℤ)) :op1(U17 / times)) :op0(U18 / times :op0(O17 / SUB :op0(V17 / 𝐶) :op1(N12 / 2)) :op0(O18 / SUB :op0(V18 / 𝐶) :op1(N13 / 8)))))))
      :snt2 (s6 / start-01
            :arg0 (ii / i)
            :arg1 (b / believe-01
                  :arg0 ii
                  :arg1 (h2 / have-03
                        :arg0 (w2 / we)
                        :arg1 (s7 / string-entity
                              :value MATH 
 :math (U19 / eq :op0(O19 / SUP :op0(U20 / times :op0(O20 / divide :op0(V19 / ℤ) :op1(O21 / SUP :op0(N14 / 2) :op1(V20 / 𝑚))) :op0(V21 / ℤ)) :op1(U21 / times)) :op0(U22 / times :op0(O22 / SUB :op0(V22 / 𝐶) :op1(N15 / 2)) :op0(O23 / SUB :op0(V23 / 𝐶) :op1(O24 / SUP :op0(N16 / 2) :op1(O25 / minus :op0(V24 / 𝑚) :op1(N17 / 2)))))))
                        :topic (s8 / string-entity
                              :value MATH 
 :math (O26 / gt :op0(V25 / 𝑚) :op1(N18 / 1))))
                  :concession-of (e / explain-01
                        :arg1 s8
                        :arg1-of (s9 / simple-02)
                        :mod (c / conceptual)
                        :condition (t / true-01
                              :arg1 s8)))))"
B.317	"(s / string-entity
      :value MATH 
 :math (O1 / int :op0(U1 / times :op0(O2 / divide :op0(N1 / 1) :op1(O3 / SUP :op0(U2 / plus :op0(O4 / SUP :op0(V1 / 𝑥) :op1(N2 / 2)) :op0(N3 / 1)) :op1(V2 / 𝑛))) :op0(F1 / d :op0(V3 / 𝑥))) :op1(W1 / ) :op2(W2 / )))"
B.318	"(p / prove-01
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / geq :op0(O2 / SUP :op0(V1 / 𝑒) :op1(V2 / 𝑥)) :op1(O3 / SUP :op0(U1 / plus :op0(N1 / 1) :op0(O4 / divide :op0(V3 / 𝑥) :op1(V4 / 𝑛))) :op1(V5 / 𝑛))))
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (O5 / geq :op0(V6 / 𝑛) :op1(N2 / 1))))
      :manner (a / amr-unknown))"
B.319	"(m / multi-sentence
      :snt1 (k / know-01
            :arg0 (w / we)
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / 𝐴))
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (O1 / interval$O-O$$ :op0(V2 / 𝐴) :op1(O2 / subset)))
                  :arg1-of (o / order-03
                        :degree (p / part))))
      :snt2 (s3 / suppose-01
            :arg0 (w2 / we)
            :arg1 (c / chain
                  :domain (s4 / string-entity
                        :value MATH 
 :math (U1 / and :op0(O3 / subset :op0(O4 / SUB :op0(V3 / 𝐴) :op1(N1 / 1)) :op1(O5 / SUB :op0(V4 / 𝐴) :op1(N2 / 2))) :op0(O6 / subset :op0(V5 / …)) :op0(O7 / subset :op0(O8 / SUB :op0(V6 / 𝐴) :op1(V7 / 𝑛))) :op0(O9 / subset :op0(O10 / SUB :op0(V8 / 𝐴) :op1(U2 / plus :op0(V9 / 𝑛) :op0(N3 / 1)))) :op0(O11 / subset :op0(V10 / …))))
                  :part-of (s5 / string-entity
                        :value MATH 
 :math (V11 / 𝐴))))
      :snt3 (p2 / possible-01
            :arg1 (p3 / prove-01
                  :arg0 (w3 / we)
                  :arg1 (e2 / equal-01
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(V12 / 𝐵) :op0(U4 / union :op0(O12 / SUB :op0(U5 / union) :op1(O13 / in :op0(V13 / 𝑛) :op1(V14 / ℕ))) :op1(O14 / SUB :op0(V15 / 𝐴) :op1(V16 / 𝑛)))))
                        :arg2 (s7 / set
                              :arg1-of (c2 / count-01
                                    :arg1-of p2))))))"
B.320	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg1 (e / equal-01
                  :arg1 (ii / integral
                        :poss (ii2 / i))
                  :arg2 (s / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(N2 / 1)) :op1(O5 / divide :op0(F1 / sin :op0(O6 / SUP :op0(F2 / sin) :op1(O7 / minus :op0(N3 / 1))) :op1(V1 / 𝑥)) :op1(V2 / 𝑥))))))
      :snt2 (l / let-01
            :arg0 (y / you)
            :arg1 (r / rewrite-01
                  :arg0 (ii3 / i)
                  :arg1 (ii4 / integral)
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V3 / ℐ) :op0(O8 / SUB :op0(O9 / SUP :op0(O10 / SUB :op0(O11 / int) :op1(N4 / 0)) :op1(N5 / 1)) :op1(O12 / divide :op0(F3 / arcsin :op0(V4 / 𝑥)) :op1(V5 / 𝑥))))))
            :purpose (a / avoid-01
                  :arg0 ii3
                  :arg1 (c2 / confuse-01)))
      :snt3 (s3 / start-off-02
            :arg0 ii3
            :arg2 (ii5 / integrate-01
                  :arg2 (p / part)
                  :arg1-of (m2 / mean-01
                        :arg2 l
                        :arg1 (e2 / equal-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(V6 / 𝑥) :op0(F4 / sin :op0(V7 / 𝑡))))
                              :arg2 (s5 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(V8 / 𝑡) :op0(F5 / arcsin :op0(V9 / 𝑥))))
                              :arg1-of (m3 / mean-01
                                    :arg2 (e3 / equal-01
                                          :arg1 (s6 / string-entity
                                                :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V10 / 𝑑) :op0(V11 / 𝑥)) :op0(U6 / times :op0(F6 / cos :op0(V12 / 𝑡)) :op0(V13 / 𝑑) :op0(V14 / 𝑡))))
                                          :arg2 (s7 / string-entity
                                                :value MATH 
 :math (U7 / eq :op0(W1 / ) :op0(O13 / SUB :op0(O14 / SUP :op0(O15 / SUB :op0(O16 / int) :op1(N6 / 0)) :op1(O17 / divide :op0(V15 / 𝜋) :op1(N7 / 2))) :op1(U8 / times :op0(V16 / 𝑡) :op0(F7 / cot :op0(V17 / 𝑡)) :op0(F8 / d :op0(V18 / 𝑡))))))
                                          :arg1-of (c3 / cause-01
                                                :arg0 (b / become-01
                                                      :arg1 (ii6 / integral
                                                            :poss (w / we))
                                                      :arg2 (a2 / and
                                                            :op1 (s8 / string-entity
                                                                  :value ""eqx250eqx"")
                                                            :op2 (s9 / string-entity
                                                                  :value MATH 
 :math (U9 / eq :op0(U10 / times :op0(V19 / 𝑑) :op0(V20 / 𝑣)) :op0(F9 / cot :op0(V21 / 𝑡))))
                                                            :op3 (s10 / string-entity
                                                                  :value MATH 
 :math (U11 / and :op0(O18 / implies :op0(W2 / ) :op1(V22 / 𝑣)) :op0(U12 / eq :op0(F10 / ln :op0(F11 / sin :op0(V23 / 𝑡)))))))))))))))
      :snt4 (k / know-01
            :polarity -
            :arg0 (ii7 / i)
            :arg1 (p2 / proceed-01
                  :arg0 ii7
                  :arg1 (f / further))
            :location (h / here)))"
B.321	"(s / solve-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(U3 / times :op0(V1 / 𝑎) :op0(V2 / 𝑥)) :op0(U4 / times :op0(V3 / 𝑏) :op0(V4 / 𝑦))) :op0(V5 / 𝑑))))
      :arg2 (e2 / equal-01
            :arg2 (s3 / string-entity
                  :value MATH 
 :math (U5 / neq :op0(V6 / 𝑑) :op0(F1 / gcd :op0(V7 / 𝑎) :op1(V8 / 𝑏)))))
      :manner (u / use-01
            :arg0 y
            :arg1 (s4 / string-entity
                  :value ""bézout"")))"
B.322	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (c / calculate-01
                  :arg0 ii
                  :arg1 (s / sum-of
                        :op1 (s2 / sum-of
                              :op1 (n / number
                                    :mod (t / triangular)))))
            :time (n2 / now))
      :snt2 (a / and
            :op1 (d / define-01
                  :mode imperative
                  :arg0 (w2 / we)
                  :arg1 (a2 / and
                        :op1 (s3 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(V1 / 𝑎) :op1(V2 / 𝑛)) :op0(O2 / divide :op0(U2 / times :op0(V3 / 𝑛) :op0(U3 / plus :op0(V4 / 𝑛) :op0(N1 / 1))) :op1(N2 / 2))))
                        :op2 (s4 / string-entity
                              :value MATH 
 :math (U4 / eq :op0(O3 / SUB :op0(V5 / 𝑏) :op1(V6 / 𝑛)) :op0(O4 / SUB :op0(O5 / SUP :op0(O6 / SUB :op0(O7 / sum) :op1(U5 / eq :op0(V7 / 𝑥) :op0(N3 / 1))) :op1(V8 / 𝑛)) :op1(O8 / SUB :op0(V9 / 𝑎) :op1(V10 / 𝑥)))))
                        :op3 (s5 / string-entity
                              :value MATH 
 :math (U6 / eq :op0(O9 / SUB :op0(V11 / 𝑐) :op1(V12 / 𝑛)) :op0(O10 / SUB :op0(O11 / SUP :op0(O12 / SUB :op0(O13 / sum) :op1(U7 / eq :op0(V13 / 𝑥) :op0(N4 / 1))) :op1(V14 / 𝑛)) :op1(O14 / SUB :op0(V15 / 𝑏) :op1(V16 / 𝑥)))))))
            :op2 (w3 / want-01
                  :arg0 (ii2 / i)
                  :arg1 (f / formula
                        :arg1-of (e / explicit-03)
                        :purpose (s6 / string-entity
                              :value MATH 
 :math (O15 / SUB :op0(V17 / 𝑐) :op1(V18 / 𝑛)))))))"
B.323	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (t2 / thing
                        :name (n / name
                              :op1 ""euclidean""
                              :op2 ""algorithm""))
                  :quant (l / lot))
            :arg2 (p / possible-01
                  :polarity -
                  :arg1 (f / figure-out-05
                        :arg0 ii
                        :arg1 t2)
                  :mod (s / still)))
      :snt2 (k / know-01
            :arg0 (y / you)
            :arg1 (t3 / thing
                  :manner-of (p2 / possible-01
                        :arg1 (u / use-01
                              :arg0 (ii2 / i)
                              :arg1 (t4 / thing
                                    :name (n2 / name
                                          :op1 ""euclidean""
                                          :op2 ""algorithm""))
                              :arg2 (f2 / find-01
                                    :arg0 ii2
                                    :arg1 (t5 / thing
                                          :arg2-of (e / equal-01
                                                :arg1 (s2 / string-entity
                                                      :value MATH 
 :math (F1 / ¯ :op0(O1 / minus :op0(O2 / SUP :op0(V1 / 𝑥) :op1(N1 / 2)) :op1(V2 / 𝑥)))))
                                          :arg2-of (e2 / equal-01
                                                :arg1 (s3 / string-entity
                                                      :value MATH 
 :math (O3 / SUP :op0(O4 / divide :op0(U1 / times :op0(V3 / ℝ) :op0(M1 / D-lsqb;&rsqb; :op0(V4 / 𝑥))) :op1(U2 / plus :op0(O5 / SUP :op0(V5 / 𝑥) :op1(N2 / 4)) :op0(N3 / 1))) :op1(U3 / times)))))))))
            :polarity (a / amr-unknown))
      :snt3 (t6 / thank-01
            :mode expressive
            :arg0 (ii3 / i)
            :arg1 y
            :arg1-of (ii4 / in-advance-04)))"
B.324	"(m / multi-sentence
      :snt1 (p / play-01
            :arg0 (ii / i)
            :arg2 (s / series
                  :arg1-of (c / call-01
                        :arg0 ii
                        :arg2 (p2 / problem
                              :name (n / name
                                    :op1 ""double""
                                    :op2 ""basel""
                                    :op3 ""problem""))
                        :time (b / before
                              :op1 (n2 / now)
                              :duration (c2 / couple
                                    :op1 (t / temporal-quantity
                                          :quant 1
                                          :unit (h / hour)))))))
      :snt2 (m2 / manage-02
            :arg0 (ii2 / i)
            :arg1 (g / generalize-01
                  :arg0 ii2
                  :arg1 (t2 / thing
                        :arg2-of (r / result-01)
                        :arg1-of (d / demonstrate-01
                              :location (h2 / here))))
            :time (a / after
                  :op1 (w / wrestle-01
                        :arg0 ii2
                        :arg1 s
                        :duration (a2 / awhile))))
      :snt3 (s2 / string-entity
            :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑚) :op0(N1 / 1))) :op1(C1 / infinity)) :op1(O5 / divide :op0(N2 / 1) :op1(U3 / plus :op0(O6 / SUP :op0(V2 / 𝑥) :op1(N3 / 2)) :op0(O7 / SUP :op0(V3 / 𝑚) :op1(N4 / 2))))) :op0(U4 / times :op0(O8 / divide :op0(N5 / 1) :op1(U5 / times :op0(N6 / 2) :op0(V4 / 𝑥) :op0(M1 / D-lsqb;&rsqb; :op0(O9 / minus :op0(U6 / times :op0(V5 / 𝜋) :op0(F1 / coth :op0(U7 / times :op0(V6 / 𝜋) :op0(V7 / 𝑥)))) :op1(O10 / divide :op0(N7 / 1) :op1(V8 / 𝑥))))))))
            :domain (ii3 / identity
                  :mod (t3 / this))))"
B.325	"(m / multi-sentence
      :snt1 (f / find-01
            :arg1 (n / number
                  :quant 100
                  :arg1-of (c / composite-02)
                  :arg1-of (r / regular-03))
            :manner (a / amr-unknown))
      :snt2 (a2 / arrive-01
            :arg1 (ii / i)
            :arg4 (c2 / conclude-01
                  :arg0 ii
                  :arg1 (p / possible-01
                        :arg1 (u / use-01
                              :arg0 (w / we)
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (M1 / L-4 :op0(U1 / plus :op0(O1 / factorial :op0(V1 / 𝑛)) :op0(N1 / 2)) :op1(U2 / plus :op0(O2 / factorial :op0(V2 / 𝑛)) :op0(N2 / 3)) :op2(V3 / …) :op3(U3 / plus :op0(O3 / factorial :op0(V4 / 𝑛)) :op0(V5 / 𝑛)))
                                    :mod (t / this)
                                    :arg1-of (m2 / mean-01
                                          :arg2 (a3 / and
                                                :op1 (e / equal-01
                                                      :arg1 (s2 / string-entity
                                                            :value MATH 
 :math (U4 / plus :op0(O4 / factorial :op0(V6 / 𝑛)) :op0(N3 / 2)))
                                                      :arg2 (s3 / string-entity
                                                            :value MATH 
 :math (N4 / 2)))
                                                :op2 (e2 / equal-01
                                                      :arg1 (s4 / string-entity
                                                            :value MATH 
 :math (U5 / plus :op0(O5 / factorial :op0(V7 / 𝑛)) :op0(N5 / 3)))
                                                      :arg2 (s5 / string-entity
                                                            :value MATH 
 :math (N6 / 3)))
                                                :op3 (e3 / et-cetera))))
                              :purpose (f2 / find-01
                                    :arg0 w
                                    :arg1 (n2 / number
                                          :arg1-of c)
                                    :arg1-of (r2 / regular-03)
                                    :arg1-of (e4 / equal-01
                                          :arg2 (s6 / string-entity
                                                :value MATH 
 :math (M2 / L-4 :op0(U6 / plus :op0(O6 / factorial :op0(V8 / 𝑛)) :op0(N7 / 2)) :op1(U7 / plus :op0(O7 / factorial :op0(V9 / 𝑛)) :op0(N8 / 3)) :op2(V10 / …) :op3(U8 / plus :op0(O8 / factorial :op0(V11 / 𝑛)) :op0(V12 / 𝑛)))))))))
            :time (a4 / after
                  :op1 (a5 / attempt-01
                        :arg0 ii
                        :quant (m3 / many))))
      :snt3 (c3 / contrast-01
            :arg2 (s7 / seem-01
                  :arg1 (o / or
                        :op1 (g / gap
                              :quant (s8 / some))
                        :op2 (c4 / competent-01
                              :polarity -)))))"
B.326	"(m / multi-sentence
      :snt1 (w / write-01
            :arg1 (c / cause-01
                  :arg0 (ii / image
                        :mod (h / homomorphic)
                        :mod (m2 / module
                              :arg1-of (f / free-04))
                        :domain (m3 / module
                              :mod (e / every)))
                  :arg1 (s / summand
                        :arg1-of (d / direct-02)
                        :domain m3
                        :mod (m4 / module
                              :arg1-of (f2 / free-04))))
            :location (t / there))
      :snt2 (h2 / have-concession-91
            :arg1 (p / possible-01
                  :polarity -
                  :arg1 (u / understand-01
                        :arg0 (ii2 / i)
                        :arg1 (ii3 / imply-01
                              :arg0 (m5 / module
                                    :mod (e2 / every)
                                    :mod (p2 / projective))
                              :arg1 (s2 / summand
                                    :arg1-of (d2 / direct-02)
                                    :domain m5
                                    :mod (m6 / module
                                          :mod (p3 / projective)
                                          :domain (s3 / string-entity
                                                :value MATH 
 :math (V1 / 𝑃))))))))
      :snt3 (e3 / exist-01
            :arg1 (m7 / module
                  :mod (s4 / string-entity
                        :value ""f"")
                  :arg1-of (f3 / free-04)
                  :domain (s5 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(V2 / 𝐹) :op0(O1 / direct-sum :op0(V3 / 𝑃) :op1(V4 / 𝑇)))
                        :beneficiary (m8 / module
                              :mod (s6 / some)
                              :arg1-of (f4 / free-04)
                              :domain (s7 / string-entity
                                    :value MATH 
 :math (V5 / 𝑇)))))))"
B.327	"(m / multi-sentence
      :snt1 (d / determine-01
            :arg1 (m2 / matrix
                  :name (n / name
                        :op1 MATH 
 :math (U1 / times :op0(N1 / 3) :op0(N2 / 3))))
            :arg2 (v / volume
                  :poss (p / parallelopiped
                        :part (s / side
                              :quant 3))
                  :arg1-of (r / resemble-01
                        :arg2 (a / and
                              :op1 (r2 / rest-01
                                    :arg1 (t / tail)
                                    :arg2 (o / origin))
                              :op2 (h / head)
                              :location (a2 / and
                                    :op1 (c / coordinate-entity
                                          :value MATH 
 :math (M1 / L-2 :op0(M2 / V-3 :op0(N3 / 1) :op1(V1 / 𝑥) :op2(O1 / SUP :op0(V2 / 𝑥) :op1(N4 / 2))) :op1(M3 / V-3 :op0(N5 / 1) :op1(V3 / 𝑦) :op2(O2 / SUP :op0(V4 / 𝑦) :op1(N6 / 2)))))
                                    :op2 (c2 / coordinate-entity
                                          :value MATH 
 :math (M4 / V-3 :op0(N7 / 1) :op1(V5 / 𝑧) :op2(O3 / SUP :op0(V6 / 𝑧) :op1(N8 / 2))))
                                    :op3 (c3 / coordinate-entity
                                          :value ""eqx328eqx""))))))
      :snt2 (p2 / possible-01
            :arg1 (s2 / simplify-01
                  :arg1 (d2 / determine-01
                        :arg1 (m3 / matrix
                              :mod (t2 / this)))
                  :arg4 (s3 / string-entity
                        :value MATH 
 :math (U2 / times :op0(O4 / minus :op0(V7 / 𝑥) :op1(V8 / 𝑦)) :op0(O5 / minus :op0(V9 / 𝑦) :op1(V10 / 𝑧)) :op0(O6 / minus :op0(V11 / 𝑧) :op1(V12 / 𝑥)))))))"
B.328	"(p / prove-01
      :arg1 (s / string-entity
            :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U2 / eq :op0(V1 / 𝑘) :op0(N1 / 1))) :op1(V2 / 𝑛)) :op1(F1 / cos :op0(O5 / divide :op0(U3 / times :op0(N2 / 2) :op0(V3 / 𝜋) :op0(V4 / 𝑘)) :op1(V5 / 𝑛)))) :op0(N3 / 0))))"
B.329	"(m / multi-sentence
      :snt1 (a / and
            :op1 (c / consider-01
                  :mode imperative
                  :arg0 (y / you)
                  :arg1 (s / subset
                        :arg1-of (c2 / compact-01)
                        :part-of (s2 / space
                              :arg1-of (r / regular-03))
                        :domain (s3 / string-entity
                              :value MATH 
 :math (V1 / 𝐴))))
            :op2 (l / let-01
                  :mode imperative
                  :arg0 y
                  :arg1 (s4 / set
                        :arg1-of (o / open-07)
                        :domain (s5 / string-entity
                              :value MATH 
 :math (V2 / 𝑈)
                              :arg0-of (c3 / cause-01
                                    :arg1 (s6 / string-entity
                                          :value MATH 
 :math (O1 / subset :op0(V3 / 𝐴) :op1(V4 / 𝑈))))))))
      :snt2 (p / prove-01
            :mode imperative
            :arg0 (y2 / you)
            :arg1 (s7 / set
                  :arg1-of (o2 / open-07)
                  :domain (s8 / string-entity
                        :value MATH 
 :math (V5 / 𝑉)
                        :arg0-of (c4 / cause-01
                              :arg1 (s9 / string-entity
                                    :value MATH 
 :math (U1 / and :op0(O2 / subset :op0(V6 / 𝐴) :op1(V7 / 𝑉)) :op0(O3 / subset :op0(F1 / ¯ :op0(V8 / 𝑉))) :op0(O4 / subset :op0(V9 / 𝑈))))))))
      :snt3 l
      :mode imperative
      :arg0 y2
      :arg1 (s10 / string-entity
            :value MATH 
 :math (O5 / in :op0(V10 / 𝑝) :op1(V11 / 𝐴))
            :arg0-of (ii / imply-01
                  :arg1 (s11 / string-entity
                        :value MATH 
 :math (O6 / in :op0(V12 / 𝑝) :op1(V13 / 𝑈))))))"
B.330	"(m / multi-sentence
      :snt1 (d / determine-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (V1 / 𝑛))
            :mod (o / order
                  :ord (o2 / ordinal-entity
                        :value 3)))
      :snt2 (a / answer-01
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(V2 / Δ) :op0(U2 / times :op0(M1 / D-lsqb;&rsqb; :op0(U3 / plus :op0(V3 / 𝑥) :op0(U4 / times :op0(V4 / 𝑎) :op0(O1 / minus :op0(V5 / 𝑛) :op1(N1 / 1)) :op0(O2 / SUP :op0(O3 / minus :op0(V6 / 𝑥) :op1(V7 / 𝑎)) :op1(O4 / minus :op0(V8 / 𝑛) :op1(N2 / 1))))))))))
      :snt3 (a2 / and
            :op1 (g / get-01
                  :arg0 (w / we)
                  :arg1 (f / factor
                        :arg1-of (m2 / multiply-01
                              :ord (o3 / ordinal-entity
                                    :value 1))
                        :part-of (a3 / answer-01)))
            :op2 (l / leave-13
                  :arg1 (d2 / determine-01
                        :arg1 (s3 / string-entity
                              :value ""eqx392eqx"")
                        :arg1-of (f2 / follow-04)))
            :condition (a4 / add-02
                  :arg0 w
                  :arg1 (c / column
                        :mod (a5 / all)
                        :mod (o4 / other))
                  :arg2 (c2 / column
                        :ord o3)))
      :snt4 (p / possible-01
            :arg1 (c3 / calculate-01
                  :arg0 w
                  :arg1 (t / thing
                        :arg0-of (d3 / determine-01)
                        :mod (t2 / this))
                  :purpose (o5 / obtain-01
                        :arg0 w
                        :arg1 (a6 / answer-01)))
            :manner (a7 / amr-unknown)))"
B.331	"(f / find-01
      :arg1 (r / root
            :mod (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / SUP :op0(N1 / 4) :op1(V1 / 𝑥)) :op0(O2 / SUP :op0(N2 / 6) :op1(V2 / 𝑥))) :op0(O3 / SUP :op0(N3 / 9) :op1(V3 / 𝑥)))))
      :manner (h / hand))"
B.332	"(m / multi-sentence
      :snt1 (s / show-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t / that))
      :snt2 (p / prove-01
            :arg0 (ii / i)
            :arg1 (o / or
                  :op1 (c / composite
                        :domain (s2 / string-entity
                              :value MATH 
 :math (V1 / 𝑛)))
                  :op2 (p2 / prime
                        :domain s2)
                  :arg1-of (c2 / cause-01
                        :arg0 (d / define-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V2 / 𝐿) :op0(V3 / 𝑛)))
                              :arg2 (f / factor
                                    :mod (p3 / prime
                                          :mod (l / least))
                                    :mod (v / variable
                                          :name (n / name
                                                :op1 ""n""))))))
            :condition (c3 / composite
                  :domain (s4 / string-entity
                        :value MATH 
 :math (V4 / 𝑛))
                  :arg1-of (c4 / cause-01
                        :arg0 (t2 / theorem
                              :mod (f2 / fundamental)
                              :topic (e / express-01
                                    :arg1 (ii2 / integer
                                          :mod (a / any)
                                          :arg1-of (h / have-degree-91
                                                :arg2 (b / big)
                                                :arg3 (m2 / more)
                                                :arg4 (n2 / numerical-quantity
                                                      :quant 1)))
                                    :arg2 (p4 / product-of
                                          :op1 (p5 / prime)
                                          :op2 (n3 / numerical-quantity
                                                :quant 2
                                                :unit (s5 / second)))
                                    :arg1-of (m3 / mean-01
                                          :arg2 (l2 / let-01
                                                :mode imperative
                                                :arg0 (y2 / you)
                                                :arg1 (h2 / have-degree-91
                                                      :arg1 (s6 / string-entity
                                                            :value MATH 
 :math (V5 / 𝑝))
                                                      :arg2 (s7 / small)
                                                      :arg3 (m4 / most)
                                                      :arg5 (p6 / product-of
                                                            :op1 (s8 / string-entity
                                                                  :value MATH 
 :math (O1 / form-seq :op0(U2 / eq :op0(V6 / 𝑛) :op0(U3 / times :op0(O2 / SUP :op0(O3 / SUB :op0(V7 / 𝑝) :op1(N1 / 1)) :op1(O4 / SUB :op0(V8 / 𝛼) :op1(N2 / 1))) :op0(O5 / SUP :op0(O6 / SUB :op0(V9 / 𝑝) :op1(N3 / 2)) :op1(O7 / SUB :op0(V10 / 𝛼) :op1(N4 / 2))) :op0(V11 / …) :op0(O8 / SUP :op0(O9 / SUB :op0(V12 / 𝑝) :op1(V13 / 𝑚)) :op1(O10 / SUB :op0(V14 / 𝛼) :op1(V15 / 𝑚))))) :op1(O11 / form-seq :op0(O12 / lt :op0(U4 / times :op0(W1 / ) :op0(V16 / 𝑖)) :op1(V17 / 𝑗)) :op1(O13 / form-seq :op0(O14 / lt :op0(U5 / times :op0(W2 / ) :op0(O15 / SUB :op0(V18 / 𝑝) :op1(V19 / 𝑖))) :op1(U6 / times :op0(O16 / SUB :op0(V20 / 𝑝) :op1(V21 / 𝑗)) :op0(W3 / ) :op0(V22 / 𝑖))) :op1(U7 / and :op0(O17 / in :op0(V23 / 𝑗) :op1(U8 / times :op0(O18 / SUP :op0(V24 / ℤ) :op1(U9 / plus)) :op0(W4 / ) :op0(O19 / SUB :op0(V25 / 𝛼) :op1(V26 / 𝑖)))) :op0(O20 / in :op0(O21 / SUP :op0(V27 / ℤ) :op1(O22 / geq :op0(W5 / ) :op1(N5 / 0)))))))))
                                                            :op2 (s9 / string-entity
                                                                  :value MATH 
 :math (V28 / 𝑝))))))))))))"
B.333	"(m / multi-sentence
      :snt1 (b / become-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / interval$O-O$$ :op0(V1 / 𝑋) :op1(V2 / 𝑌)))
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (O2 / interval$O-O$$ :op0(V3 / 𝑅) :op1(V4 / Φ))
                  :location-of (s3 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O3 / SUP :op0(V5 / 𝑅) :op1(N1 / 2)) :op0(U2 / plus :op0(O4 / SUP :op0(V6 / 𝑋) :op1(N2 / 2)) :op0(O5 / SUP :op0(V7 / 𝑌) :op1(N3 / 2))))))
            :location (c / coordinate
                  :mod (p / pole)))
      :snt2 (p2 / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (h / have-03
                        :arg0 (s4 / string-entity
                              :value MATH 
 :math (V8 / Φ))
                        :arg1 (d / density
                              :arg1-of (g / give-01
                                    :arg2 (s5 / string-entity
                                          :value MATH 
 :math (O6 / divide :op0(O7 / root :op0(O8 / minus :op0(N4 / 1) :op1(O9 / SUP :op0(V9 / 𝑝) :op1(N5 / 2))) :op1(N6 / 2)) :op1(U3 / times :op0(N7 / 2) :op0(V10 / 𝜋) :op0(O10 / minus :op0(N8 / 1) :op1(U4 / times :op0(N9 / 2) :op0(V11 / 𝑝) :op0(F1 / sin :op0(V12 / 𝜑)) :op0(F2 / cos :op0(V13 / 𝜑))))))))))
                  :op2 (d2 / distribute-01
                        :arg1 s4
                        :manner (u / uniform)
                        :condition (s6 / string-entity
                              :value MATH 
 :math (U5 / eq :op0(V14 / 𝑝) :op0(N10 / 0))))))
      :snt3 (c2 / clear-06
            :arg1 (e / everything)
            :mod (t / this))
      :snt4 (u2 / understand-01
            :polarity -
            :arg0 (ii / i)
            :arg1 (t2 / thing
                  :manner-of (c3 / conclude-01
                        :arg0 ii
                        :arg1 (a2 / and
                              :op1 (s7 / string-entity
                                    :value MATH 
 :math (E1 /  :op0(O11 / fragments) :op1(V15 / p) :op2(E2 /  :op0(O12 / fragments) :op1(V16 / {) :op2(T1 / xy) :op3(O13 / gt) :op4(N11 / 0) :op5(V17 / }) :op3(U6 / eq) :op4(O14 / divide :op0(N12 / 1) :op1(N13 / 2)) :op5(U7 / plus) :op6(O15 / SUP :op0(V18 / 𝜋) :op1(O16 / minus :op0(N14 / 1))) :op7(F3 / arcsin) :op8(E3 /  :op0(O17 / fragments) :op1(V19 / $) :op2(V20 / p) :op3(V21 / $$)))))
                              :op2 (s8 / string-entity
                                    :value MATH 
 :math (E4 /  :op0(O18 / fragments) :op1(V22 / p) :op2(E5 /  :op0(O19 / fragments) :op1(V23 / {) :op2(T2 / xy) :op3(O20 / lt) :op4(N15 / 0) :op5(V24 / }) :op3(U8 / eq) :op4(O21 / SUP :op0(V25 / 𝜋) :op1(O22 / minus :op0(N16 / 1))) :op5(F4 / arccos) :op6(E6 /  :op0(O23 / fragments) :op1(V26 / $) :op2(V27 / p) :op3(V28 / $$))))))))))"
B.334	"(p / prove-01
      :arg0 (l / logarithm)
      :arg1 (s / string-entity
            :value MATH 
 :math (U1 / eq :op0(O1 / SUP :op0(V1 / 𝑎) :op1(U2 / times :op0(V2 / 𝑙) :op0(V3 / 𝑜) :op0(O2 / SUB :op0(V4 / 𝑔) :op1(V5 / 𝑎)) :op0(V6 / 𝑏))) :op0(V7 / 𝑏))))"
B.335	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg2 (c2 / clear-06
                  :polarity -
                  :arg1 (t / that)
                  :arg2 (ii / i)))
      :snt2 (h / have-manner-91
            :arg1 (s / show-01
                  :arg1 (c3 / converge-01))
            :arg2 (a / and
                  :op1 (s2 / show-01
                        :arg1 (e / equal-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑁) :op1(C1 / infinity))) :op1(U2 / times :op0(O4 / norm :op0(O5 / minus :op0(O6 / SUB :op0(O7 / SUP :op0(O8 / SUB :op0(O9 / sum) :op1(U3 / eq :op0(V2 / 𝑘) :op0(N1 / 0))) :op1(V3 / 𝑁)) :op1(O10 / divide :op0(O11 / SUP :op0(V4 / 𝐴) :op1(V5 / 𝑘)) :op1(O12 / factorial :op0(V6 / 𝑘)))) :op1(V7 / 𝑋))) :op0(W1 / ))) :op0(N2 / 0)))))
                  :op2 (u / use-01
                        :arg1 (n / norm
                              :mod (m2 / matrix)
                              :mod (s4 / some)
                              :mod (ii2 / intuitive)
                              :arg1-of (c4 / clear-06
                                    :arg2 (c5 / converge-01
                                          :arg0 (e2 / element
                                                :mod (a2 / all)
                                                :part-of (s5 / string-entity
                                                      :value MATH 
 :math (O13 / minus :op0(O14 / divide :op0(O15 / SUP :op0(V8 / 𝐴) :op1(V9 / 𝑘)) :op1(O16 / factorial :op0(V10 / 𝑘))) :op1(V11 / 𝑋))))
                                          :arg2 (z / zero))))))
            :arg1-of (h2 / have-degree-91
                  :arg2 (ii3 / intuitive)
                  :arg3 (m3 / more))
            :beneficiary (ii4 / i))
      :snt3 (h3 / hint-01
            :mod (a3 / any)))"
B.336	"(m / multi-sentence
      :snt1 (g / get-02
            :arg0 (ii / i)
            :arg1 (t / task
                  :arg1-of (f / follow-04)
                  :consist-of (s / specify-01
                        :li 1
                        :arg1 (m2 / matrix
                              :mod (s2 / string-entity
                                    :value MATH 
 :math (O1 / in :op0(M1 / L-2 :op0(V1 / 𝐴) :op1(V2 / 𝐵)) :op1(O2 / SUP :op0(V3 / ℝ) :op1(U1 / times :op0(V4 / 𝑛) :op0(V5 / 𝑛)))))
                              :arg0-of (c / cause-01
                                    :arg1 (t2 / true-01
                                          :arg1 (m3 / matrix
                                                :mod (s3 / string-entity
                                                      :value MATH 
 :math (U2 / neq :op0(U3 / times :op0(V6 / 𝐴) :op0(V7 / 𝐵)) :op0(U4 / times :op0(V8 / 𝐵) :op0(V9 / 𝐴)))))))
                              :prep-for (e / each)))))
      :snt2 (p / possible-01
            :arg1 (o / or
                  :op1 (h / help-01
                        :polite +
                        :arg0 (s4 / someone)
                        :arg1 (t3 / this)
                        :arg2 (ii2 / i))
                  :op2 (g2 / give-01
                        :polite +
                        :arg0 s4
                        :arg1 (a / approach-02)
                        :arg2 ii2))
            :polarity (a2 / amr-unknown))
      :snt3 (d / determine-01
            :li 2
            :arg1 (m4 / matrix
                  :mod (s5 / string-entity
                        :value MATH 
 :math (O3 / assign :op0(V10 / 𝑀) :op1(O4 / conditional-set :op0(O5 / in :op0(V11 / 𝐴) :op1(O6 / SUP :op0(V12 / ℝ) :op1(U5 / times :op0(N1 / 2) :op0(N2 / 2)))) :op1(O7 / form-seq :op0(U6 / eq :op0(U7 / times :op0(V13 / 𝐴) :op0(V14 / 𝐵)) :op0(U8 / times :op0(V15 / 𝐵) :op0(V16 / 𝐴))) :op1(O8 / in :op0(O9 / forall :op0(V17 / 𝐵)) :op1(O10 / SUP :op0(V18 / ℝ) :op1(U9 / times :op0(N3 / 2) :op0(N4 / 2))))))))
                  :arg0-of (c2 / cause-01
                        :arg1 (c3 / commute-02
                              :arg0 (m5 / matrix
                                    :mod (a3 / all)
                                    :mod (s6 / string-entity
                                          :value MATH 
 :math (O11 / in :op0(V19 / 𝐵) :op1(O12 / SUP :op0(V20 / ℝ) :op1(U10 / times :op0(N5 / 2) :op0(N6 / 2)))))))))))"
B.337	"(m / multi-sentence
      :snt2 (e / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / times :op0(V1 / 𝜆) :op0(V2 / 𝑡)))
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(O1 / SUP :op0(V3 / 𝛾) :op1(V4 / ′)) :op0(V5 / 𝑡)) :op0(U4 / times :op0(V6 / 𝜆) :op0(V7 / 𝑡) :op0(V8 / 𝛾) :op0(V9 / 𝑡)))
                  :beneficiary (s3 / string-entity
                        :value MATH 
 :math (V10 / 𝑡)
                        :mod (a / all))
                  :time (t / then))
            :snt3 (p / possible-01
                  :arg1 (a2 / assume-02
                        :arg0 (w / we)
                        :arg1 (a3 / and
                              :op1 (s4 / speed
                                    :mod (u / unit)
                                    :domain (c / curve
                                          :mod (s5 / string-entity
                                                :value MATH 
 :math (V11 / 𝛾))))
                              :op2 (p2 / pass-03
                                    :arg1 (l / line
                                          :mod (t2 / tangent)
                                          :mod a))
                              :path (o / origin)
                              :manner (a4 / apply-02
                                    :arg1 (t3 / translate-01)
                                    :arg2 (s6 / string-entity
                                          :value MATH 
 :math (V12 / 𝛾)))))))
      :snt2 (s7 / solve-01
            :arg2 (s8 / string-entity
                  :value MATH 
 :math (U5 / and :op0(U6 / eq :op0(O2 / SUP :op0(V13 / 𝛾) :op1(V14 / ′′)) :op0(U7 / plus :op0(U8 / times :op0(O3 / SUP :op0(V15 / 𝜆) :op1(V16 / ′)) :op0(V17 / 𝛾)) :op0(U9 / times :op0(V18 / 𝜆) :op0(O4 / SUP :op0(V19 / 𝛾) :op1(V20 / ′))))) :op0(U10 / eq :op0(U11 / times :op0(U12 / plus :op0(O5 / SUP :op0(V21 / 𝜆) :op1(V22 / ′)) :op0(O6 / SUP :op0(V23 / 𝜆) :op1(N1 / 2))) :op0(V24 / 𝛾))))
                  :time (t4 / then))))"
B.338	"(f / find-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (t / thing
            :arg2-of (s / solve-01
                  :arg1 (e / equation
                        :mod (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(V1 / 𝑦) :op0(O1 / divide :op0(U2 / plus :op0(V2 / 𝑎) :op0(U3 / times :op0(V3 / 𝑏) :op0(V4 / 𝑥))) :op1(O2 / minus :op0(V5 / 𝑏) :op1(V6 / 𝑥)))))))
            :mod (a / all)
            :mod (ii / integer)))"
B.339	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (n / need-01
                  :arg0 (ii / i)
                  :arg1 (p / positive
                        :domain (t / they))
                  :mod (o / only)
                  :time (m2 / moment))
            :arg2 (v / value-01
                  :arg1 (h / have-03
                        :arg1 (r / result-01
                              :arg1-of (h2 / have-degree-91
                                    :arg2 (g / general-02
                                          :arg1 r)
                                    :arg3 (m3 / most)
                                    :arg5 (p2 / possible-01
                                          :arg1 r))))))
      :snt2 (h3 / have-03
            :arg0 (w / we)
            :arg1 (p3 / prime
                  :arg2-of (r2 / relative-05
                        :arg1 (s / string-entity
                              :value MATH 
 :math (M1 / L-2 :op0(V1 / 𝑎) :op1(V2 / 𝑏)))))
            :arg0-of (c2 / cause-01
                  :arg1 (e / exist-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (O1 / in :op0(M2 / L-2 :op0(V3 / 𝑟) :op1(V4 / 𝑠)) :op1(V5 / ℤ))
                              :arg0-of (c3 / cause-01
                                    :arg1 (e2 / equal-01
                                          :arg1 s2
                                          :arg2 (s3 / string-entity
                                                :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(U3 / times :op0(V6 / 𝑎) :op0(V7 / 𝑟)) :op0(U4 / times :op0(V8 / 𝑏) :op0(V9 / 𝑠))) :op0(N1 / 1))
                                                :arg1-of (e3 / equal-01
                                                      :arg2 (s4 / string-entity
                                                            :value MATH 
 :math (V10 / 𝑐))
                                                      :arg1-of (c4 / cause-01
                                                            :arg0 (l / lemma
                                                                  :mod (p4 / person
                                                                        :name (n2 / name
                                                                              :op1 ""bézout"")))))))))))
            :snt3 (e4 / edit-01
                  :arg1 (a / attempt-01
                        :arg1-of (u / update-01)))))"
B.340	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (p / problem
                  :arg1-of (f / follow-04)))
      :snt2 (s / show-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s2 / sequence
                  :name (n / name
                        :op1 ""cauchy"")
                  :domain (s3 / string-entity
                        :value MATH 
 :math (O1 / lt :op0(F1 / abs :op0(O2 / minus :op0(O3 / SUB :op0(V1 / 𝑥) :op1(U1 / plus :op0(V2 / 𝑛) :op0(N1 / 1))) :op1(O4 / SUB :op0(V3 / 𝑥) :op1(V4 / 𝑛)))) :op1(O5 / divide :op0(N2 / 1) :op1(O6 / SUP :op0(N3 / 3) :op1(V5 / 𝑛))))))))"
B.341	"(m / multi-sentence
      :snt1 (p / possible-01
            :arg1 (d / define-01
                  :arg0 (w / we)
                  :arg1 (s / sequence
                        :mod (a / arithmetic)
                        :arg2-of (ii / include-91
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (O1 / in :op0(M1 / L-2 :op0(V1 / 𝑎) :op1(V2 / 𝑏)) :op1(O2 / SUP :op0(V3 / 𝑍) :op1(U1 / plus)))))))
            :arg1-of (c / cause-01
                  :arg0 (s3 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(F1 / gcd :op0(V4 / 𝑎) :op1(V5 / 𝑏)) :op0(N1 / 1))
                        :arg2-of (ii2 / include-91
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(O3 / SUB :op0(V6 / 𝑐) :op1(V7 / 𝑖)) :op0(U4 / plus :op0(V8 / 𝑎) :op0(F2 / ⋅ :op0(V9 / 𝑖) :op1(V10 / 𝑏)))))))))
      :snt2 (c2 / cause-01
            :arg1 (s5 / sequence
                  :arg2-of (ii3 / include-91
                        :arg1 (s6 / string-entity
                              :value MATH 
 :math (M2 / S-4 :op0(V11 / 𝑎) :op1(U5 / plus :op0(V12 / 𝑎) :op0(V13 / 𝑏)) :op2(U6 / plus :op0(V14 / 𝑎) :op0(U7 / times :op0(N2 / 2) :op0(V15 / 𝑏))) :op3(V16 / ⋯))))))
      :snt3 (c3 / contain-01
            :arg0 (s7 / sequence
                  :mod (a2 / all)
                  :mod (s8 / such))
            :arg1 (p2 / prime)
            :polarity (a3 / amr-unknown)))"
B.342	"(m / multi-sentence
      :snt1 (o / or
            :op1 (e / equal-01
                  :arg2 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(F1 / ⋅ :op0(N1 / 10) :op1(N2 / 4)) :op0(N3 / 40))))
            :op2 (e2 / equal-01
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V1 / 𝑓) :op0(O1 / SUB :op0(V2 / 𝑥) :op1(N4 / 4))) :op0(U4 / times :op0(O2 / divide :op0(N5 / 2) :op1(N6 / 5)) :op0(O3 / SUP :op0(V3 / 𝑒) :op1(O4 / divide :op0(O5 / minus :op0(V4 / 𝑥)) :op1(N7 / 10))) :op0(O6 / SUP :op0(O7 / minus :op0(N8 / 1) :op1(O8 / SUP :op0(V5 / 𝑒) :op1(O9 / divide :op0(O10 / minus :op0(V6 / 𝑥)) :op1(N9 / 10)) :op1(N10 / 3))))))))
            :polarity (a / amr-unknown))
      :snt2 (a2 / and
            :op1 (c / calculate-01
                  :arg1 (d / density
                        :poss (s3 / statistics
                              :mod (o2 / order
                                    :ord (o3 / ordinal-entity
                                          :value 4)))))
            :op2 (e3 / equal-01
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (U5 / and :op0(U6 / eq :op0(U7 / times :op0(V7 / 𝐸) :op0(O11 / SUB :op0(V8 / 𝑋) :op1(N11 / 4))) :op0(O12 / SUB :op0(O13 / SUP :op0(O14 / SUB :op0(O15 / int) :op1(N12 / 0)) :op1(C1 / infinity)) :op1(U8 / times :op0(O16 / divide :op0(U9 / times :op0(N13 / 2) :op0(V9 / 𝑥)) :op1(N14 / 5)) :op0(O17 / SUP :op0(V10 / 𝑒) :op1(O18 / divide :op0(O19 / minus :op0(V11 / 𝑥)) :op1(N15 / 10))) :op0(O20 / SUP :op0(O21 / minus :op0(N16 / 1) :op1(O22 / SUP :op0(V12 / 𝑒) :op1(O23 / divide :op0(O24 / minus :op0(V13 / 𝑥)) :op1(N17 / 10)) :op1(N18 / 3)))) :op0(F2 / d :op0(V14 / 𝑥))))) :op0(U10 / eq :op0(O25 / divide :op0(N19 / 125) :op1(N20 / 6)))))
                  :time (t / then))
            :polarity (a3 / amr-unknown))
      :snt3 (e4 / equal-01
            :arg2 (o4 / or
                  :op1 (e5 / equal-01
                        :arg2 (s5 / string-entity
                              :value MATH 
 :math (N21 / 40)
                              :time (m2 / multiple
                                    :op1 (t2 / temporal-quantity
                                          :quant 1
                                          :unit (m3 / minute))))
                        :op2 (e6 / equal-01
                              :arg2 (s6 / string-entity
                                    :value MATH 
 :math (O26 / divide :op0(N22 / 125) :op1(N23 / 6))
                                    :time (m4 / multiple
                                          :op1 (t3 / temporal-quantity
                                                :quant 1
                                                :unit (m5 / minute)))))))))"
B.343	"(m / multi-sentence
      :snt1 (e / equal-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / eq :op0(V1 / 𝐸) :op0(M1 / L-7 :op0(O1 / interval$O-O$$ :op0(N1 / 1) :op1(N2 / 6)) :op1(O2 / interval$O-O$$ :op0(N3 / 2) :op1(N4 / 5)) :op2(O3 / interval$O-O$$ :op0(N5 / 3) :op1(N6 / 4)) :op3(O4 / interval$O-O$$ :op0(N7 / 4) :op1(N8 / 3)) :op4(O5 / interval$O-O$$ :op0(N9 / 3) :op1(N10 / 4)) :op5(O6 / interval$O-O$$ :op0(N11 / 5) :op1(N12 / 2)) :op6(O7 / interval$O-O$$ :op0(N13 / 6) :op1(N14 / 1)))))
            :arg2 (s2 / string-entity
                  :value MATH 
 :math (F1 / abs :op0(U2 / times :op0(V2 / 𝑆) :op0(V3 / 𝑎) :op0(V4 / 𝑚) :op0(V5 / 𝑝) :op0(V6 / 𝑙) :op0(V7 / 𝑒) :op0(V8 / 𝑆) :op0(V9 / 𝑝) :op0(V10 / 𝑎) :op0(V11 / 𝑐) :op0(V12 / 𝑒)))))
      :snt2 (c / cause-01
            :arg1 (e2 / equal-01
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (N15 / 36))
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (U3 / eq :op0(U4 / times :op0(V13 / 𝑃) :op0(V14 / 𝐸)) :op0(O8 / divide :op0(N16 / 1) :op1(N17 / 6))))))
      :snt3 (d / doubt-01
            :arg0 (ii / i)
            :location (h / here))
      :snt4 (c2 / cause-01
            :arg0 (a / amr-unknown)
            :arg1 (o / obligate-01
                  :arg1 (w / we)
                  :arg2 (c3 / consider-02
                        :arg0 w
                        :arg1 (p / pair
                              :arg1-of (o2 / order-01))))
            :arg1-of (c4 / cause-01
                  :arg0 (g / give-01
                        :arg1 (d2 / dice
                              :quant 2)
                        :arg1-of (ii2 / identical-01)))))"
B.344	"(m / multi-sentence
      :snt1 (e / emphasize-01
            :location (t / there)
            :mod (a / any))
      :snt2 (c / consider-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t2 / thing
                  :arg0-of (e2 / exemplify-01)
                  :arg1-of (f / follow-04)
                  :consist-of (a2 / and
                        :op1 (l / let-01
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(V1 / 𝑋) :op0(M1 / S-5 :op0(V2 / 𝑎) :op1(V3 / 𝑏) :op2(V4 / 𝑐) :op3(V5 / 𝑑) :op4(V6 / 𝑒)))))
                        :op2 (l2 / let-01
                              :arg1 (s2 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(V7 / 𝒜) :op0(M2 / S-1 :op0(M3 / S-1 :op0(V8 / 𝑎)))))))))
      :snt3 (c2 / collect-01
            :arg0 (t3 / this)
            :arg1 (s3 / subset
                  :mod (s4 / string-entity
                        :value MATH 
 :math (V9 / 𝑋)))
            :arg1-of (c3 / clear-06)))"
B.345	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg2 (s / stack-01
                  :arg1 (ii / i)
                  :arg2 (p / problem
                        :topic (g / geometry
                              :mod (e / elementary)))))
      :snt2 (a / and
            :op1 (g2 / give-01
                  :arg1 (e2 / equation
                        :consist-of (a2 / and
                              :op1 (l / line
                                    :quant 2
                                    :mod (s2 / straigh)
                                    :mod (s3 / space
                                          :name (n / name
                                                :op1 MATH 
 :math (U1 / equivalent :op0(V1 / 𝑟) :op0(O1 / cases :op0(U2 / eq :op0(V2 / 𝑥) :op0(N1 / 1)) :op1(W1 / ) :op2(U3 / eq :op0(V3 / 𝑦) :op0(N2 / 1)) :op3(W2 / ) :op4(U4 / eq :op0(V4 / 𝑧) :op0(O2 / minus :op0(V5 / 𝜆) :op1(N3 / 2))) :op5(W3 / ))))))
                              :op2 (l2 / line
                                    :quant 553
                                    :mod (s4 / space
                                          :name (n2 / name
                                                :op1 MATH 
 :math (U5 / equivalent :op0(V6 / 𝑠) :op0(O3 / cases :op0(U6 / eq :op0(V7 / 𝑥) :op0(V8 / 𝜇)) :op1(W4 / ) :op2(U7 / eq :op0(V9 / 𝑦) :op0(O4 / minus :op0(V10 / 𝜇) :op1(N4 / 1))) :op3(W5 / ) :op4(U8 / eq :op0(V11 / 𝑧) :op0(O5 / minus :op0(N5 / 1))) :op5(W6 / ))))))))
                  :arg2 (ii2 / i))
            :op2 (a3 / ask-02
                  :arg0 ii2
                  :arg1 (c2 / calculate-01
                        :arg0 ii2
                        :quant (s5 / some))))
      :snt3 (a4 / ask-01
            :arg1 (p2 / position-01
                  :arg1 (t / they)
                  :arg2 (r / relative-05))
            :arg2 ii2
            :ord (o / ordinal-entity
                  :value 1)))"
B.346	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / conditional-set :op0(O2 / in :op0(V1 / 𝑟) :op1(V2 / ℚ)) :op1(O3 / form-seq :op0(O4 / gt :op0(O5 / SUP :op0(V3 / 𝑟) :op1(N1 / 2)) :op1(N2 / 2)) :op1(O6 / gt :op0(V4 / 𝑟) :op1(N3 / 0))))))
      :snt2 (w / wonder-01
            :arg0 (ii2 / i)
            :arg1 (t / thing
                  :arg0-of (c / cause-01
                        :arg1 (h2 / have-03
                              :polarity -
                              :arg0 (s2 / string-entity
                                    :value MATH 
 :math (O7 / in :op0(N4 / 0) :op1(V5 / ℚ)))
                              :arg1 (t2 / thing
                                    :arg2-of (b / bind-01
                                          :arg1 s2)
                                    :arg1-of (h3 / have-degree-91
                                          :arg2 (l / low-04)
                                          :arg3 (m2 / most)))))))
      :snt3 (b2 / bind-01
            :arg1 (s3 / string-entity
                  :value MATH 
 :math O7 )
            :arg2 (n / number
                  :arg1-of (r / rational-02))
            :arg1-of (h4 / have-degree-91
                  :arg2 (l2 / low-04)
                  :arg3 (m3 / most))
            :polarity (a / amr-unknown)))"
B.347	"(m / multi-sentence
      :snt1 (p / prove-01
            :arg1 (e / equal-01
                  :arg1 (p2 / product
                        :name (n / name
                              :op1 ""gcd"")
                        :mod (s / string-entity
                              :value MATH 
 :math (U1 / eq :op0(O1 / interval$O-O$$ :op0(U2 / plus :op0(V1 / 𝑎) :op0(V2 / 𝑏)) :op1(O2 / minus :op0(V3 / 𝑎) :op1(V4 / 𝑏))) :op0(N1 / 1))))
                  :arg2 (o / or
                        :op1 (s2 / string-entity
                              :value MATH 
 :math (U3 / eq :op0(O3 / interval$O-O$$ :op0(V5 / 𝑎) :op1(V6 / 𝑏)) :op0(N2 / 1)))
                        :op2 (s3 / string-entity
                              :value MATH 
 :math (N3 / 2))))
            :condition (e2 / equal-01
                  :arg1 (p3 / product
                        :name (n2 / name
                              :op1 ""gcd"")
                        :mod (s4 / string-entity
                              :value MATH 
 :math (U4 / eq :op0(O4 / interval$O-O$$ :op0(U5 / plus :op0(V7 / 𝑎) :op0(V8 / 𝑏)) :op1(O5 / minus :op0(V9 / 𝑎) :op1(V10 / 𝑏))) :op0(V11 / 𝑑))))
                  :arg2 (e3 / equal-01
                        :arg1 (s5 / string-entity
                              :value MATH 
 :math (O6 / interval$O-O$$ :op0(V12 / 𝑎) :op1(V13 / 𝑏)))
                        :arg2 (a / and
                              :op1 (s6 / string-entity
                                    :value MATH 
 :math (O7 / interval$O-O$$ :op0(U6 / times :op0(N4 / 2) :op0(V14 / 𝑎)) :op1(U7 / times :op0(N5 / 2) :op0(V15 / 𝑏))))
                              :op2 (e4 / et-cetera)))
                  :arg1-of (c / cause-01
                        :arg0 (c2 / coprime
                              :domain (s7 / string-entity
                                    :value MATH 
 :math (M1 / L-2 :op0(V16 / 𝑎) :op1(V17 / 𝑏)))))))
      :snt2 (q / question-01
            :arg0 (ii / i)
            :arg1 (c3 / cause-01
                  :arg0 (a2 / amr-unknown)
                  :arg1 (o2 / obligate-01
                        :arg1 (w / we)
                        :arg2 (a3 / and
                              :op1 (a4 / add-02
                                    :arg0 w
                                    :arg1 (e5 / equation
                                          :mod (a5 / above)))
                              :op2 (s8 / subtract-01
                                    :arg0 w
                                    :arg1 e5))))))"
B.348	"(h / hold-03
      :arg1 (c / condition
            :arg1-of (r / resemble-01))
      :polarity (a / amr-unknown)
      :beneficiary (m / matrix
            :arg1-of (b / block-01)
            :arg1-of (f / follow-01)
            :mod (s / string-entity
                  :value ""eqx579eqx"")))"
B.349	"(m / multi-sentence
      :snt1 (e / equate-01
            :arg2 (t / thing
                  :name (n / name
                        :op1 MATH 
 :math (U1 / eq :op0(O1 / factorial :op0(V1 / 𝑥)) :op0(U2 / times :op0(O2 / root :op0(U3 / times :op0(N1 / 2) :op0(V2 / 𝜋) :op0(V3 / 𝑥)) :op1(N2 / 2)) :op0(O3 / SUP :op0(O4 / divide :op0(V4 / 𝑥) :op1(V5 / 𝑒)) :op1(V6 / 𝑥))))))
            :arg3 (t2 / thing
                  :name (n2 / name
                        :op1 ""stirling's""
                        :op2 ""approximation"")))
      :snt2 (g / give-01
            :arg0 (w / write-01
                  :arg3 (f / function-01
                        :arg1 (v / variable
                              :name (n3 / name
                                    :op1 ""y""))))
            :arg1 (t3 / thing
                  :name (n4 / name
                        :op1 MATH 
 :math (U4 / eq :op0(V7 / 𝑦) :op0(U5 / times :op0(O5 / root :op0(U6 / times :op0(N3 / 2) :op0(V8 / 𝜋) :op0(V9 / 𝑥)) :op1(N4 / 2)) :op0(O6 / SUP :op0(O7 / divide :op0(V10 / 𝑥) :op1(V11 / 𝑒)) :op1(V12 / 𝑥))))))
            :arg2 (w2 / we))
      :snt3 (f2 / find-01
            :arg1 (t4 / thing
                  :arg2-of (ii / inverse-01
                        :arg1 (f3 / function-01
                              :mod (t5 / this))))
            :arg1-of (e2 / effective-04)
            :polarity (a / amr-unknown))
      :snt4 (w3 / way
            :manner-of (s / solve-01
                  :arg1 (e3 / equation
                        :mod t5)
                  :topic (v2 / variable
                        :name (n5 / name
                              :op1 ""x"")))))"
B.350	"(m / multi-sentence
      :snt1 (a / and
            :op1 (w / want-01
                  :arg0 (ii / i)
                  :arg1 (p / prove-01
                        :arg0 ii
                        :arg1 (d / divide-02
                              :arg0 (a2 / and
                                    :op1 2
                                    :op2 3)
                              :arg1 (s / string-entity
                                    :value MATH 
 :math (O1 / in :op0(M1 / L-2 :op0(O2 / minus :op0(O3 / SUP :op0(V1 / 𝑥) :op1(N1 / 3)) :op1(V2 / 𝑥)) :op1(V3 / 𝑥)) :op1(V4 / ℕ))))))
            :op2 (s2 / stick-01
                  :arg1 ii
                  :arg2 (s3 / step-01
                        :arg2 (ii2 / induct-02))))
      :snt2 (s4 / step-01
            :mod (b / basic)
            :snt3 (a3 / assume-02
                  :arg0 (w2 / we)
                  :arg1 (t / true-01
                        :arg1 (s5 / string-entity
                              :value MATH 
 :math (U1 / times :op0(V5 / 𝑃) :op0(V6 / 𝑘)))
                        :arg1-of (c / cause-01
                              :arg0 (e / equal-01
                                    :arg1 (a4 / and
                                          :op1 (s6 / string-entity
                                                :value MATH 
 :math (U2 / eq :op0(O4 / divide :op0(O5 / minus :op0(O6 / SUP :op0(N2 / 0) :op1(N3 / 3)) :op1(N4 / 0)) :op1(N5 / 2)) :op0(N6 / 0)))
                                          :op2 (s7 / string-entity
                                                :value MATH 
 :math (U3 / eq :op0(O7 / divide :op0(O8 / minus :op0(O9 / SUP :op0(N7 / 0) :op1(N8 / 3)) :op1(N9 / 0)) :op1(N10 / 3)) :op0(N11 / 0)))))))
                  :prep-for (t2 / thing
                        :arg1-of (h / hypothesize-01)
                        :arg1-of (ii3 / induct-02)))
            :snt4 (l / let-01
                  :mode imperative
                  :arg0 (y / you)
                  :arg1 (p2 / propose-01
                        :arg1 (d2 / divide-02
                              :arg0 a2
                              :arg1 (s8 / string-entity
                                    :value MATH 
 :math (O10 / minus :op0(O11 / SUP :op0(V7 / 𝑥) :op1(N12 / 3)) :op1(V8 / 𝑥)))
                              :arg2 (s9 / string-entity
                                    :value MATH 
 :math (O12 / in :op0(V9 / 𝑥) :op1(V10 / ℕ)))))
                  :mod (a5 / all))))"
B.351	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (s / sequence-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(V1 / 𝐴) :op1(V2 / 𝑛)))
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (V3 / 𝒜))))
      :snt2 (d / define-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s4 / string-entity
                  :value MATH 
 :math (E1 /  :op0(O2 / fragments) :op1(V4 / a) :op2(O3 / assign) :op3(E2 /  :op0(O4 / fragments) :op1(V5 / {) :op2(V6 / x) :op3(O5 / in) :op4(V7 / x))))
            :arg0-of (c / cause-01
                  :arg1 (h / hold-02
                        :arg0 s4
                        :arg1 (a / and
                              :op1 (s5 / string-entity
                                    :value MATH 
 :math (U1 / times :op0(V8 / 𝑥) :op0(V9 / ∈) :op0(O6 / SUB :op0(V10 / 𝐴) :op1(V11 / 𝑛))))
                              :op2 (s6 / string-entity
                                    :value MATH 
 :math (V12 / })))
                        :condition (e / except-01
                              :arg1 s4
                              :arg2 (s7 / string-entity
                                    :value MATH 
 :math (U2 / and :op0(U3 / eq :op0(O7 / limit :op0(O8 / SUB :op0(O9 / limit) :op1(F1 / → :op0(V13 / 𝑛) :op1(C1 / infinity))) :op1(O10 / infimum :op0(U4 / times :op0(V14 / 𝜇) :op0(O11 / SUB :op0(V15 / 𝐴) :op1(V16 / 𝑛))))) :op0(O12 / limit :op0(O13 / SUB :op0(O14 / limit) :op1(F2 / → :op0(V17 / 𝑛) :op1(C2 / infinity))) :op1(O15 / infimum :op0(O16 / int :op0(O17 / SUB :op0(O18 / int) :op1(V18 / 𝑋)) :op1(O19 / SUB :op0(V19 / 𝜒) :op1(O20 / SUB :op0(V20 / 𝐴) :op1(V21 / 𝑛))))))) :op0(O21 / geq :op0(O22 / int :op0(O23 / SUB :op0(O24 / int) :op1(V22 / 𝑋)) :op1(O25 / limit :op0(O26 / SUB :op0(O27 / limit) :op1(F3 / → :op0(V23 / 𝑛) :op1(C3 / infinity))) :op1(O28 / infimum :op0(U5 / times :op0(O29 / SUB :op0(V24 / 𝜒) :op1(O30 / SUB :op0(V25 / 𝐴) :op1(V26 / 𝑛))) :op0(V27 / 𝑑) :op0(V28 / 𝜇))))))))
                              :mod (a2 / all)))))
      :snt3 (s8 / show-01
            :arg0 (ii / i)
            :arg1 (s9 / string-entity
                  :value MATH 
 :math (O31 / geq :op0(O32 / limit :op0(O33 / SUB :op0(O34 / limit) :op1(F4 / → :op0(V29 / 𝑛) :op1(C4 / infinity))) :op1(O35 / infimum :op0(U6 / times :op0(V30 / 𝜇) :op0(O36 / SUB :op0(V31 / 𝐴) :op1(V32 / 𝑛))))) :op1(U7 / times :op0(V33 / 𝜇) :op0(V34 / 𝐴)))
                  :arg1-of (a3 / attempt-01
                        :arg0 ii)
                  :arg1-of (c2 / cause-01
                        :arg0 (l2 / lemma
                              :poss (p / person
                                    :name (n / name
                                          :op1 ""fatou""))
                              :domain (s10 / string-entity
                                    :value MATH 
 :math (U8 / eq :op0(O37 / infimum :op0(O38 / SUB :op0(O39 / infimum) :op1(O40 / geq :op0(V35 / 𝑚) :op1(V36 / 𝑛))) :op1(U9 / times :op0(O41 / SUB :op0(V37 / 𝜒) :op1(O42 / SUB :op0(V38 / 𝐴) :op1(V39 / 𝑛))) :op0(V40 / 𝑥))) :op0(U10 / times :op0(N1 / 0) :op0(O43 / forall :op0(V41 / 𝑛)))))))
                  :arg1-of (m2 / mean-01
                        :arg2 (a4 / and
                              :op1 (c3 / consider-02
                                    :arg0 y
                                    :arg1 (s11 / string-entity
                                          :value MATH 
 :math (O44 / in :op0(V42 / 𝑥) :op1(V43 / 𝐴)))
                                    :time (e2 / eventual))
                              :op2 (c4 / consider-02
                                    :arg0 y
                                    :arg1 (s12 / string-entity
                                          :value MATH 
 :math (U11 / eq :op0(U12 / times :op0(O45 / SUB :op0(V44 / 𝜒) :op1(O46 / SUB :op0(V45 / 𝐴) :op1(V46 / 𝑛))) :op0(V47 / 𝑥)) :op0(U13 / times :op0(N2 / 1) :op0(O47 / forall :op0(V48 / 𝑛)))))
                                    :time e2
                                    :arg0-of (c5 / cause-01
                                          :arg1 (s13 / string-entity
                                                :value MATH 
 :math (U14 / and :op0(U15 / eq :op0(O48 / limit :op0(O49 / SUB :op0(O50 / limit) :op1(F5 / → :op0(V49 / 𝑛) :op1(C5 / infinity))) :op1(O51 / infimum :op0(U16 / times :op0(O52 / SUB :op0(V50 / 𝜒) :op1(O53 / SUB :op0(V51 / 𝐴) :op1(V52 / 𝑛))) :op0(V53 / 𝑥)))) :op0(O54 / limit :op0(O55 / SUB :op0(O56 / limit) :op1(F6 / → :op0(V54 / 𝑛) :op1(C6 / infinity))) :op1(N3 / 1))) :op0(U17 / eq :op0(N4 / 1)) :op0(U18 / eq :op0(U19 / times :op0(O57 / SUB :op0(V55 / 𝜒) :op1(V56 / 𝐴)) :op0(V57 / 𝑥))))))))))
            :time (n2 / now)))"
B.352	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (f / find-01
                  :arg1 (f2 / function
                        :arg1-of (c2 / continue-01
                              :mod (p / positive))
                        :mod (a / area
                              :mod (f3 / finite))
                        :mod (s / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N1 / 0)) :op1(C1 / infinity)) :op1(U1 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥) :op0(F1 / d :op0(V3 / 𝑥)))))))
            :arg2 (e / exist-01
                  :polarity -
                  :arg1 (l / limit-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U2 / times :op0(V4 / 𝑓) :op0(V5 / 𝑥))
                              :arg1-of (r / resemble-01
                                    :arg2 (s3 / string-entity
                                          :value MATH 
 :math (V6 / 𝑥))))
                        :arg2 (g / go-01
                              :arg1 s2
                              :arg4 infinity))))
      :snt2 c
      :arg1 (t / try-01
            :arg0 (ii / i)
            :arg1 (f4 / find-01
                  :arg0 ii
                  :arg1 (f5 / function
                        :mod (s4 / such))))
      :arg2 (f6 / fail-01
            :arg1 ii))"
B.353	"(m / multi-sentence
      :snt1 (u / understand-01
            :arg0 (ii / i)
            :arg1 (r / relate-01
                  :polarity -
                  :arg1 (v / variable
                        :quant 2
                        :mod (r2 / random)
                        :arg0-of (d / depend-01
                              :polarity -))
                  :arg1-of (d2 / define-01))
            :arg1-of (c / cause-01
                  :arg0 (e / equal-01
                        :arg1 (v2 / variance
                              :poss v)
                        :arg2 e
                        :arg1 v2
                        :arg2 (a / and
                              :op1 (e2 / equal-01
                                    :arg1 (s / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝐶) :op0(V2 / 𝑜) :op0(V3 / 𝑣) :op0(O1 / interval$O-O$$ :op0(V4 / 𝑥) :op1(V5 / 𝑦))) :op0(O2 / minus :op0(U3 / times :op0(V6 / 𝐸) :op0(U4 / times :op0(V7 / 𝑥) :op0(V8 / 𝑦))) :op1(U5 / times :op0(V9 / 𝐸) :op0(V10 / 𝑥) :op0(V11 / 𝐸) :op0(V12 / 𝑦))))))
                              :op2 (e3 / equal-01
                                    :arg1 (s2 / string-entity
                                          :value MATH 
 :math (U6 / eq :op0(U7 / times :op0(U8 / times :op0(U9 / times :op0(V13 / 𝐸) :op0(V14 / 𝑥) :op0(V15 / 𝐸) :op0(V16 / 𝑦)))) :op0(U10 / times :op0(V17 / 𝐸) :op0(U11 / times :op0(V18 / 𝑥) :op0(V19 / 𝑦)))))))
                        :arg1-of (c2 / cause-01
                              :arg0 (v3 / variable
                                    :quant 2
                                    :mod (r3 / random)
                                    :arg0-of (d3 / depend-01
                                          :polarity -)
                                    :domain (a2 / and
                                          :op1 (v4 / variable
                                                :name (n / name
                                                      :op1 ""x629eqx""))
                                          :op2 (v5 / variable
                                                :name (n2 / name
                                                      :op1 ""y""))))))))
      :snt2 (c3 / contrast-01
            :arg2 (h / have-trouble-04
                  :arg0 ii
                  :arg1 (u2 / understand-01
                        :arg0 ii
                        :arg1 (h2 / have-condition-91
                              :arg1 (p / possible-01
                                    :polarity -
                                    :arg1 (m2 / mean-01
                                          :arg1 (r4 / relate-01
                                                :polarity -
                                                :arg1 (v6 / variable
                                                      :quant 2
                                                      :mod (r5 / random)
                                                      :domain a2)))
                                    :arg2 v)
                              :arg2 v)))))"
B.354	"(p / prove-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (h / have-condition-91
            :arg1 (e / equal-01
                  :arg2 MATH 
 :math (F1 / c :op0(U1 / times :op0(O1 / SUB :op0(V1 / 𝑝) :op1(N1 / 1)) :op0(O2 / SUB :op0(V2 / 𝑝) :op1(N2 / 2))) :op1(V3 / 𝑎)))
            :arg2 (e2 / equal-01
                  :arg2 (a / and
                        :op1 (s / string-entity
                              :value MATH 
 :math (F2 / c :op0(O3 / SUB :op0(V4 / 𝑝) :op1(N3 / 1)) :op1(V5 / 𝑎)))
                        :op2 (s2 / string-entity
                              :value MATH 
 :math (F3 / c :op0(O4 / SUB :op0(V6 / 𝑝) :op1(N4 / 2)) :op1(V7 / 𝑎)))))))"
B.355	"(s / string-entity
      :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(U3 / plus :op0(U4 / times :op0(V2 / 𝑓) :op0(O1 / SUP :op0(V3 / 𝑥) :op1(N1 / 2))) :op0(U5 / times :op0(V4 / 𝑓) :op0(V5 / 𝑦)))) :op0(U6 / plus :op0(U7 / times :op0(V6 / 𝑥) :op0(V7 / 𝑓) :op0(V8 / 𝑥)) :op0(V9 / 𝑦))))"
B.356	"(p / possible-01
      :arg1 (e / evaluate-01
            :arg0 (ii / i)
            :arg1 (s / string-entity
                  :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑛) :op0(N1 / 0))) :op1(C1 / infinity)) :op1(O5 / divide :op0(O6 / SUP :op0(V2 / 𝑥) :op1(U2 / times :op0(V3 / 𝑘) :op0(V4 / 𝑛))) :op1(O7 / factorial :op0(U3 / times :op0(V5 / 𝑘) :op0(V6 / 𝑛)))))
                  :arg2-of (ii2 / include-91
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (V7 / 𝑘)
                              :arg1-of (n / natural-03))))
            :manner (a / amr-unknown)))"
B.357	"(m / multi-sentence
      :snt1 (t / take-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s / series
                  :consist-of (s2 / string-entity
                        :value MATH 
 :math (M1 / V-3 :op0(N1 / 2) :op1(N2 / 4) :op2(V1 / …)))
                  :consist-of (n / number
                        :quant 2
                        :arg1-of (g / give-01))))
      :snt2 (f / function
            :domain (a / and
                  :op1 (s3 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V2 / 𝑓) :op0(V3 / 𝑛)) :op0(U3 / times :op0(N3 / 2) :op0(V4 / 𝑛))))
                  :op2 (s4 / string-entity
                        :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V5 / 𝑓) :op0(V6 / 𝑛)) :op0(U6 / plus :op0(O1 / minus :op0(O2 / SUP :op0(V7 / 𝑛) :op1(N4 / 2)) :op1(V8 / 𝑛)) :op0(N5 / 2))))
                  :op3 (s5 / string-entity
                        :value MATH 
 :math (U7 / eq :op0(U8 / times :op0(V9 / 𝑓) :op0(V10 / 𝑛)) :op0(O3 / SUP :op0(N6 / 2) :op1(V11 / 𝑛))))
                  :mod (a2 / all))
            :concession (d / differ-02
                  :arg0 a
                  :time (a3 / after
                        :op1 (n2 / number
                              :ord (o / ordinal-entity
                                    :value 1))))
            :arg1-of (f2 / fit-06
                  :arg2 (s6 / series
                        :mod (t2 / this))
                  :arg1-of (p / possible-01)))
      :snt3 (b / believe-01
            :arg0 (ii / i)
            :arg1 (h / have-quant-91
                  :arg1 (p2 / polynomial
                        :arg1-of (f3 / fit-06
                              :arg2 (d2 / describe-01
                                    :mod (t3 / this))))
                  :arg3 (m2 / more))
            :concession (s7 / sure-02
                  :polarity -
                  :arg0 ii
                  :arg1 n)))"
B.358	"(m / multi-sentence
      :snt1 (t / think-01
            :arg0 (ii / i)
            :arg1 (d / derive-01
                  :arg0 ii
                  :arg1 (f / formula
                        :mod (a / area
                              :mod (r / revolution-03))
                        :arg2-of (e / equal-01
                              :arg1 (e2 / equal-01
                                    :arg1 (s / string-entity
                                          :value MATH 
 :math (O1 / int :op0(U1 / times :op0(N1 / 2) :op0(V1 / 𝜋) :op0(V2 / 𝑦) :op0(F1 / d :op0(V3 / 𝑠))) :op1(W1 / ) :op2(W2 / ))))
                              :arg2 (e3 / equal-01
                                    :arg1 (s2 / string-entity
                                          :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V4 / 𝑑) :op0(V5 / 𝑠)) :op0(O2 / root :op0(U4 / plus :op0(N2 / 1) :op0(O3 / SUP :op0(O4 / divide :op0(U5 / times :op0(V6 / 𝑑) :op0(V7 / 𝑦)) :op1(U6 / times :op0(V8 / 𝑑) :op0(V9 / 𝑥))) :op1(N3 / 2))) :op1(N4 / 2))))))))
            :time (b / before
                  :op1 (r2 / read-01
                        :arg0 ii
                        :arg1 f)))
      :snt2 (t2 / try-01
            :arg0 (ii2 / i)
            :arg1 (a2 / apply-02
                  :arg0 ii2
                  :arg1 (l / logic
                        :arg1-of (s3 / same-01)
                        :arg1-of (u / use-01
                              :arg2 (c / calculate-01
                                    :arg1 (v / volume
                                          :mod (r3 / revolution-03))))
                        :example (e4 / equal-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (O5 / int :op0(U7 / times :op0(V10 / 𝜋) :op0(O6 / SUP :op0(V11 / 𝑦) :op1(N5 / 2)) :op0(F2 / d :op0(V12 / 𝑥))) :op1(W3 / ) :op2(W4 / )))
                              :arg2 e2)))))"
B.359	"(m / multi-sentence
      :snt1 (m2 / make-01
            :arg1 (t / thing
                  :name (n / name
                        :op1 MATH 
 :math (U1 / eq :op0(F1 / tan :op0(V1 / 𝜃)) :op0(O1 / divide :op0(V2 / 𝑥) :op1(N1 / 2)))))
            :prep-in (p / problem))
      :snt2 (a / and
            :op1 (a2 / answer-01
                  :manner (t2 / term-01
                        :arg1 (s / sine))
                  :time (e / end-01))
            :op2 (d / define-01
                  :arg1 (t3 / thing
                        :name (n2 / name
                              :op1 MATH 
 :math (U2 / times :op0(V3 / 𝑠) :op0(V4 / 𝑖) :op0(V5 / 𝑛) :op0(V6 / 𝜃))))
                  :arg2 (t4 / thing
                        :name (n3 / name
                              :op1 MATH 
 :math (U3 / eq :op0(F2 / sin :op0(V7 / 𝜃)) :op0(O2 / divide :op0(V8 / 𝑥) :op1(O3 / root :op0(U4 / plus :op0(N2 / 4) :op0(O4 / SUP :op0(V9 / 𝑥) :op1(N3 / 2))) :op1(N4 / 2))))))
                  :direction (b / back)))
      :snt3 (e2 / exemplify-01
            :arg0 (t5 / this)
            :arg1 (s2 / stuff
                  :quant (s3 / some)
                  :topic (ii / integrate-01)
                  :arg1-of (u / understand-01
                        :arg0 (ii2 / i)
                        :arg1-of (s4 / struggle-02
                              :arg0 ii2)))
            :arg1-of (t6 / typical-02))
      :snt4 (c / cause-01
            :li 1
            :arg0 (a3 / amr-unknown)
            :arg1 (t7 / take-01
                  :polarity -
                  :arg1 (t8 / thing
                        :arg2-of (v / value-01
                              :arg1 (r / root
                                    :mod (s5 / square))
                              :mod (a4 / absolute)))
                  :time (e3 / ever))))"
B.360	"(t / transform-01
      :arg1 (f / function)
      :arg2 (e / equal-01
            :arg2 MATH 
 :math (O1 / divide :op0(N1 / 1) :op1(F1 / abs :op0(V1 / 𝑥))))
      :mod (f2 / fourier))"
B.361	"(m / multi-sentence
      :snt1 (l / let-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (a / and
                  :op1 (ii / integrate-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (F1 / $##$ :op0(V1 / 𝑓) :op1(F2 / → :op0(O1 / interval$C-C$$ :op0(V2 / 𝑎) :op1(V3 / 𝑏)) :op1(V4 / ℝ))))
                        :arg1-of (p / possible-01))
                  :op2 (e / equal-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V5 / 𝐹) :op0(V6 / 𝑥)) :op0(O2 / SUB :op0(O3 / SUP :op0(O4 / SUB :op0(O5 / int) :op1(V7 / 𝑎)) :op1(V8 / 𝑥)) :op1(U3 / times :op0(V9 / 𝑓) :op0(V10 / 𝑡) :op0(F3 / d :op0(V11 / 𝑡))))))
                        :arg2 (s3 / string-entity
                              :value MATH 
 :math (V12 / 𝐹))
                        :arg1-of (p2 / possible-01))))
      :snt2 (p3 / possible-01
            :polarity -
            :arg1 (d / differ-02
                  :arg1 (f / function
                        :mod (t / this)))
            :time (a2 / always)
            :polarity (a3 / amr-unknown)))"
B.362	"(p / post-scriptum
      :domain (p2 / possible-01
            :arg1 (c / compare-01
                  :arg1 (s / string-entity
                        :value ""x697eqx"")
                  :arg2 (s2 / string-entity
                        :value ""y""))
            :condition (a / amr-unknown)))"
B.363	"(p / prove-01
      :arg0 (s / string-entity
            :value MATH 
 :math (F1 / → :op0(O1 / SUB :op0(V1 / 𝑋) :op1(V2 / 𝑛)) :op1(N1 / 0))
            :mod (v / variable
                  :name (n / name
                        :op1 ""mars""))
            :arg1-of (n2 / negative-03
                  :polarity -))
      :arg1 (s2 / string-entity
            :value MATH 
 :math (E1 /  :op0(O2 / fragments) :op1(V3 / p) :op2(E2 /  :op0(O3 / fragments) :op1(V4 / &lsqb;) :op2(O4 / SUP :op0(V5 / 𝑋) :op1(U1 / times)) :op3(O5 / geq) :op4(V6 / x) :op5(V7 / |) :op6(O6 / SUB :op0(V8 / ℱ) :op1(N2 / 0)) :op7(V9 / &rsqb;) :op3(U2 / eq) :op4(N3 / 1) :op5(U3 / and) :op6(O7 / SUB :op0(V10 / 𝑋) :op1(N4 / 0)) :op7(O8 / divide) :op8(V11 / x))))
      :polarity (a / amr-unknown))"
B.364	"(d / define-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (s / string-entity
            :value MATH 
 :math (O1 / infimum :op0(O2 / conditional-set :op0(U1 / times :op0(V1 / 𝑑) :op0(O3 / interval$O-O$$ :op0(V2 / 𝑥) :op1(V3 / 𝑎))) :op1(O4 / in :op0(V4 / 𝑎) :op1(V5 / 𝐴)))))
      :purpose (p / prove-01
            :mode imperative
            :arg0 y
            :arg1 (h / have-condition-91
                  :arg1 (e / equal-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (O5 / leq :op0(U2 / times :op0(V6 / 𝑑) :op0(O6 / interval$O-O$$ :op0(V7 / 𝑥) :op1(V8 / 𝐴))) :op1(U3 / plus :op0(U4 / times :op0(V9 / 𝑑) :op0(O7 / interval$O-O$$ :op0(V10 / 𝑥) :op1(V11 / 𝑦))) :op0(U5 / times :op0(V12 / 𝑑) :op0(O8 / interval$O-O$$ :op0(V13 / 𝑦) :op1(V14 / 𝐴)))))))
                  :arg2 (e2 / equal-01
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (V15 / 𝑦))
                        :arg2 (p2 / point
                              :part-of (s4 / string-entity
                                    :value MATH 
 :math (V16 / 𝑋))
                              :mod (a / another)))))
      :prep-for (a2 / and
            :op1 (p3 / point
                  :mod (s5 / string-entity
                        :value MATH 
 :math (V17 / 𝑥)))
            :op2 (ii / include-91
                  :arg1 (s6 / string-entity
                        :value MATH 
 :math (V18 / 𝐴))
                  :arg2 (s7 / space
                        :mod (m / metric))
                  :arg3 (s8 / subset)
                  :arg1-of (e3 / empty-02
                        :polarity -))))"
B.365	"(m / multi-sentence
      :snt1 (q / question-01
            :arg0 (ii / i)
            :arg1 (o / or
                  :op1 (p / prove-01
                        :arg1 (s / state-01
                              :arg1-of (f / follow-04)))
                  :op2 (r / refute-01
                        :arg1 s)
                  :mod (b / basic)))
      :snt2 (e / exist-01
            :arg1 (ii2 / inject-01
                  :source (s2 / string-entity
                        :value MATH 
 :math (O1 / SUP :op0(V1 / 𝛼) :op1(U1 / plus)))
                  :destination (s3 / string-entity
                        :value MATH 
 :math (V2 / 𝛼)))
            :polarity (a / amr-unknown)
            :arg2-of (g / give-01
                  :arg1 (o2 / ordinal-entity
                        :value MATH 
 :math (V3 / 𝛼)
                        :mod (ii3 / infinite)))))"
B.366	"(m / multi-sentence
      :snt1 (s / show-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (h / have-condition-91
                  :arg1 (h2 / have-03
                        :arg0 (s2 / space
                              :arg1-of (n / norm-02)
                              :arg1-of (e / equal-01
                                    :arg2 (s3 / string-entity
                                          :value MATH 
 :math (V1 / 𝑋))))
                        :arg1 (s4 / subset
                              :arg1-of (d / depend-01
                                    :polarity -
                                    :arg1-of (p / possible-01))
                              :mod (l / linearly)))
                  :arg2 (h3 / have-03
                        :arg0 (w / we)
                        :arg1 (s5 / subset
                              :mod (s6 / string-entity
                                    :value MATH 
 :math (N1 / 1))))))
      :snt2 (a / attempt-01
            :arg0 (ii / i)
            :arg1 (l2 / let-01
                  :arg0 (s7 / space
                        :name (n2 / name
                              :op1 MATH 
 :math (V2 / 𝑋)))
                  :arg1 (e2 / equal-01
                        :arg1 (s8 / subset)
                        :arg2 (s9 / string-entity
                              :value MATH 
 :math (E1 /  :op0(O1 / fragments) :op1(V3 / s) :op2(U1 / eq) :op3(E2 /  :op0(O2 / fragments) :op1(V4 / {) :op2(O3 / SUB :op0(V5 / 𝑒) :op1(N2 / 1)) :op3(V6 / &comma;) :op4(O4 / SUB :op0(V7 / 𝑒) :op1(N3 / 2)) :op5(V8 / &comma;) :op6(O5 / SUB :op0(V9 / 𝑒) :op1(N4 / 3)) :op7(V10 / &comma;) :op8(V11 / …) :op9(V12 / .) :opA(V13 / &comma;) :opB(O6 / SUB :op0(V14 / 𝑒) :op1(V15 / 𝑛)) :opC(V16 / })))))))
      :snt3 (d2 / define-01
            :arg0 (s10 / string-entity
                  :value MATH 
 :math (O7 / in :op0(O8 / SUB :op0(V17 / 𝑒) :op1(V18 / 𝑖)) :op1(V19 / 𝑋)))
            :arg1 (s11 / string-entity
                  :value MATH 
 :math (U2 / and :op0(O9 / leq :op0(N5 / 1) :op1(V20 / 𝑗)) :op0(O10 / leq :op0(V21 / 𝑛))))
            :arg2 (s12 / string-entity
                  :value MATH 
 :math N1 ))
      :snt4 (p2 / possible-01
            :polarity -
            :arg1 (p3 / proceed-01
                  :arg0 ii
                  :mod (f / further))
            :time (a2 / after
                  :op1 (t / that))))"
B.367	"(p / prove-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 737))"
B.368	"(m / multi-sentence
      :snt1 (s / state-01
            :arg1 (e / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / sum :op0(O2 / SUB :op0(O3 / sum) :op1(O4 / geq :op0(V1 / 𝑛) :op1(N1 / 1))) :op1(O5 / divide :op0(N2 / 1) :op1(O6 / SUP :op0(V2 / 𝑛) :op1(N3 / 2)))) :op0(U2 / plus :op0(O7 / sum :op0(O8 / SUB :op0(O9 / sum) :op1(O10 / leq :op0(V3 / 𝑛) :op1(V4 / 𝑥))) :op1(O11 / divide :op0(N4 / 1) :op1(O12 / SUP :op0(V5 / 𝑛) :op1(N5 / 2)))) :op0(U3 / times :op0(V6 / 𝒪) :op0(O13 / divide :op0(N6 / 1) :op1(V7 / 𝑥))))))
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (F1 / → :op0(V8 / 𝑥) :op1(C1 / infinity))))
            :location (a / answer-01
                  :mod (t / this))
            :polarity (a2 / amr-unknown))
      :snt2 (d / do-02
            :arg0 (ii / i)
            :arg1 (t2 / think-01
                  :arg0 ii
                  :arg1 (t3 / trivial
                        :domain (a3 / answer-01)
                        :mod (a4 / almost))
                  :arg1-of (c / cause-01
                        :arg0 (p / possible-01
                              :arg1 (s4 / set-02
                                    :arg0 (w / we)
                                    :arg1 (s5 / string-entity
                                          :value MATH 
 :math (U4 / eq :op0(V9 / 𝐶) :op0(O14 / divide :op0(U5 / times :op0(O15 / SUP :op0(V10 / 𝜋) :op1(N7 / 2)) :op0(V11 / 𝑥)) :op1(N8 / 6)))
                                          :arg0-of (c2 / cause-01
                                                :arg1 (e2 / equal-01
                                                      :arg1 (s6 / string-entity
                                                            :value MATH 
 :math (U6 / and :op0(O16 / leq :op0(O17 / SUB :op0(O18 / SUP :op0(O19 / SUB :op0(O20 / sum) :op1(U7 / eq :op0(V12 / 𝑛) :op0(V13 / 𝑥))) :op1(C2 / infinity)) :op1(O21 / divide :op0(N9 / 1) :op1(O22 / SUP :op0(V14 / 𝑛) :op1(N10 / 2)))) :op1(O23 / SUB :op0(O24 / SUP :op0(O25 / SUB :op0(O26 / sum) :op1(U8 / eq :op0(V15 / 𝑛) :op0(N11 / 1))) :op1(C3 / infinity)) :op1(O27 / divide :op0(N12 / 1) :op1(O28 / SUP :op0(V16 / 𝑛) :op1(N13 / 2))))) :op0(U9 / eq :op0(O29 / divide :op0(O30 / SUP :op0(V17 / 𝜋) :op1(N14 / 2)) :op1(N15 / 6))) :op0(U10 / eq :op0(O31 / divide :op0(V18 / 𝐶) :op1(V19 / 𝑥)))))
                                                      :arg1-of (c3 / cause-01
                                                            :arg0 (e3 / equal-01
                                                                  :arg1 (s7 / string-entity
                                                                        :value MATH 
 :math (U11 / and :op0(U12 / eq :op0(O32 / sum :op0(O33 / SUB :op0(O34 / sum) :op1(O35 / geq :op0(V20 / 𝑛) :op1(N16 / 1))) :op1(O36 / divide :op0(N17 / 1) :op1(O37 / SUP :op0(V21 / 𝑛) :op1(N18 / 2)))) :op0(U13 / plus :op0(O38 / sum :op0(O39 / SUB :op0(O40 / sum) :op1(O41 / leq :op0(V22 / 𝑛) :op1(V23 / 𝑥))) :op1(O42 / divide :op0(N19 / 1) :op1(O43 / SUP :op0(V24 / 𝑛) :op1(N20 / 2)))) :op0(O44 / SUB :op0(O45 / SUP :op0(O46 / SUB :op0(O47 / sum) :op1(U14 / eq :op0(V25 / 𝑛) :op0(V26 / 𝑥))) :op1(C4 / infinity)) :op1(O48 / divide :op0(N21 / 1) :op1(O49 / SUP :op0(V27 / 𝑛) :op1(N22 / 2)))))) :op0(O50 / leq :op0(U15 / plus :op0(O51 / sum :op0(O52 / SUB :op0(O53 / sum) :op1(O54 / leq :op0(V28 / 𝑛) :op1(V29 / 𝑥))) :op1(O55 / divide :op0(N23 / 1) :op1(O56 / SUP :op0(V30 / 𝑛) :op1(N24 / 2)))) :op0(O57 / divide :op0(V31 / 𝐶) :op1(V32 / 𝑥)))) :op0(U16 / eq :op0(U17 / plus :op0(O58 / sum :op0(O59 / SUB :op0(O60 / sum) :op1(O61 / leq :op0(V33 / 𝑛) :op1(V34 / 𝑥))) :op1(O62 / divide :op0(N25 / 1) :op1(O63 / SUP :op0(V35 / 𝑛) :op1(N26 / 2)))) :op0(U18 / times :op0(V36 / 𝒪) :op0(O64 / divide :op0(N27 / 1) :op1(V37 / 𝑥))))))))))))))
                        :polarity (a5 / amr-unknown))
                  :condition (f / fix-03
                        :arg1 (s8 / string-entity
                              :value MATH 
 :math (V38 / 𝑥))))))"
B.369	"(m / multi-sentence
      :snt1 (c / calculate-01
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / eq :op0(O1 / SUB :op0(V1 / 𝐽) :op1(V2 / 𝑛)) :op0(O2 / SUB :op0(O3 / SUP :op0(O4 / SUB :op0(O5 / int) :op1(O6 / minus :op0(V3 / 𝜋))) :op1(V4 / 𝜋)) :op1(U2 / times :op0(O7 / divide :op0(F1 / sin :op0(U3 / times :op0(V5 / 𝑛) :op0(V6 / 𝑥))) :op1(U4 / times :op0(U5 / plus :op0(N1 / 1) :op0(O8 / SUP :op0(N2 / 2) :op1(V7 / 𝑛))) :op0(F2 / sin :op0(V8 / 𝑥)) :op0(F3 / d :op0(V9 / 𝑥))))))))
                  :mod (ii / integral))
            :manner (a / amr-unknown))
      :snt2 (c2 / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii2 / i)
                  :arg1 (ii3 / integrate-01
                        :degree (p / part)))
            :arg2 (s2 / succeed-01
                  :polarity -
                  :arg0 ii2
                  :arg1 (f / find-01
                        :arg0 ii2
                        :arg1 (r / relate-01
                              :arg1-of (r2 / repeat-01)))))
      :snt3 (c3 / contrast-01
            :arg1 (t2 / try-01
                  :arg0 ii2
                  :arg1 (f2 / formula
                        :name (n / name
                              :op1 ""moivre"")
                        :purpose (e2 / equal-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (U6 / plus :op0(O9 / SUB :op0(V10 / 𝐼) :op1(V11 / 𝑛)) :op0(U7 / times :op0(V12 / 𝑖) :op0(O10 / SUB :op0(V13 / 𝐽) :op1(V14 / 𝑛)))))
                              :arg2-of (e3 / equal-01
                                    :arg1 (s4 / string-entity
                                          :value MATH 
 :math (U8 / eq :op0(O11 / SUB :op0(V15 / 𝐼) :op1(V16 / 𝑛)) :op0(O12 / SUB :op0(O13 / SUP :op0(O14 / SUB :op0(O15 / int) :op1(O16 / minus :op0(V17 / 𝜋))) :op1(V18 / 𝜋)) :op1(U9 / times :op0(O17 / divide :op0(F4 / cos :op0(U10 / times :op0(V19 / 𝑛) :op0(V20 / 𝑥))) :op1(U11 / times :op0(U12 / plus :op0(N3 / 1) :op0(O18 / SUP :op0(N4 / 2) :op1(V21 / 𝑛))) :op0(F5 / sin :op0(V22 / 𝑥)) :op0(F6 / d :op0(V23 / 𝑥))))))))))))
            :arg2 (s5 / succeed-01
                  :polarity -
                  :arg0 ii2
                  :arg1 f2
                  :mod (a2 / also))))"
B.370	"(m / multi-sentence
      :snt1 (d / define-01
            :arg0 (w / we)
            :arg1 (ii / integral
                  :mod (l / lebesgue))
            :arg2 (a / and
                  :op1 (f / function-01
                        :arg1 (s / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑠) :op0(V2 / 𝑥)) :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U3 / eq :op0(V3 / 𝑗) :op0(N1 / 1))) :op1(V4 / 𝑛)) :op1(U4 / times :op0(O5 / SUB :op0(V5 / 𝑐) :op1(V6 / 𝑗)) :op0(O6 / SUB :op0(V7 / 𝜒) :op1(O7 / SUB :op0(V8 / 𝐴) :op1(V9 / 𝑗))) :op0(V10 / 𝑥))))
                              :location-of (m2 / measure-01
                                    :arg1 (s2 / string-entity
                                          :value MATH 
 :math (O8 / SUB :op0(V11 / 𝐴) :op1(V12 / 𝑗)))
                                    :arg1-of (p / possible-01)))
                        :op2 (f2 / function-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (O9 / geq :op0(V13 / 𝑓) :op1(N2 / 0))
                                    :location-of (ii2 / interval
                                          :mod (t / type
                                                :mod (a2 / any))
                                          :example (s4 / string-entity
                                                :value MATH 
 :math (E1 /  :op0(O10 / fragments) :op1(E2 /  :op0(O11 / fragments) :op1(V14 / $) :op2(V15 / a) :op3(V16 / &comma;) :op4(V17 / b) :op5(V18 / $$) :op2(V19 / &comma;) :op3(E3 /  :op0(O12 / fragments) :op1(V20 / $) :op2(V21 / a) :op3(V22 / &comma;) :op4(V23 / b) :op5(V24 / &rsqb;) :op4(V25 / &comma;) :op5(E4 /  :op0(O13 / fragments) :op1(V26 / &lsqb;) :op2(V27 / a) :op3(V28 / &comma;) :op4(V29 / b) :op5(V30 / $$) :op6(V31 / &comma;) :op7(E5 /  :op0(O14 / fragments) :op1(V32 / &lsqb;) :op2(V33 / a) :op3(V34 / &comma;) :op4(V35 / b) :op5(V36 / &rsqb;) :op8(V37 / $$))))))))))
                        :time (t2 / then))
                  :time (d2 / define-01
                        :arg0 (w2 / we)
                        :arg1 ii))
            :snt2 (c / contrast-01
                  :arg2 (w3 / wonder-01
                        :arg0 (ii3 / i)
                        :arg1 (p2 / possible-01
                              :arg1 (g / go-08
                                    :arg1 (t3 / thing)
                                    :arg2 (w4 / wrong-02)
                                    :condition (ii4 / instead-of-91
                                          :arg1 (t4 / take-01
                                                :arg0 w2
                                                :arg1 (f3 / function-01
                                                      :arg1-of (s5 / simple-02)
                                                      :location (s6 / supremum)))
                                          :arg2 (t5 / take-01
                                                :arg0 w2
                                                :arg1 (f4 / function-01
                                                      :arg1-of (s7 / step-01)
                                                      :example (s8 / string-entity
                                                            :value MATH 
 :math (E6 /  :op0(O15 / fragments) :op1(N3 / 0) :op2(O16 / leq) :op3(V38 / s) :op4(O17 / leq) :op5(V39 / f) :op6(V40 / }))))))))))))"
B.371	"(p / possible-01
      :polarity (a / amr-unknown)
      :arg1 (s / say-01
            :arg0 (ii / i)
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(F1 / abs :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥) :op0(V3 / 𝑔) :op0(V4 / 𝑥))) :op0(O1 / norm :op0(U3 / times :op0(V5 / 𝑓) :op0(V6 / 𝑔)))))))"
B.372	"(m / multi-sentence
      :snt1 (p / progress-01
            :arg1 (p2 / person
                  :name (n / name
                        :op1 ""gauss""))
            :mod (g / great)
            :topic (t / theory
                  :mod (n2 / number))
            :manner (w / work-01
                  :arg0 p2
                  :arg1 (s / string-entity
                        :value MATH 
 :math (V1 / ℤ)))
            :arg1-of (h / have-degree-91
                  :arg2 (m2 / much)
                  :arg3 (s2 / so)
                  :arg6 (c / call-01
                        :arg0 (w2 / we)
                        :arg1 (s3 / string-entity
                              :value MATH 
 :math (U1 / times :op0(V2 / ℤ) :op0(M1 / D-lsqb;&rsqb; :op0(V3 / 𝑖))))
                        :arg2 (ii / integer
                              :mod (t2 / thing
                                    :name (n3 / name
                                          :op1 ""gaussian"")))
                        :time (n4 / now))))
      :snt2 (c2 / contrast-01
            :arg2 (s4 / study-01
                  :arg0 w2
                  :arg1 (r / ring
                        :consist-of (s5 / string-entity
                              :value MATH 
 :math (O1 / SUB :op0(V4 / 𝒪) :op1(U2 / times :op0(V5 / ℚ) :op0(M2 / D-lsqb;&rsqb; :op0(O2 / root :op0(V6 / 𝑑) :op1(N1 / 2)))))))
                  :topic (t3 / theory
                        :mod (n5 / number)
                        :arg1-of (m3 / modern-02))
                  :time (n6 / now)
                  :arg1-of (h2 / have-degree-91
                        :arg2 (g2 / good-02
                              :arg1 (a / analyze-01
                                    :arg1 (t4 / thing
                                          :arg2-of (s6 / solve-01
                                                :arg1 (e / equation
                                                      :poss (p3 / person
                                                            :name (n7 / name
                                                                  :op1 ""pell""))
                                                      :mod (s7 / string-entity
                                                            :value MATH 
 :math (U3 / eq :op0(O3 / minus :op0(O4 / SUP :op0(V7 / 𝑥) :op1(N2 / 2)) :op1(U4 / times :op0(V8 / 𝑑) :op0(O5 / SUP :op0(V9 / 𝑦) :op1(N3 / 2)))) :op0(N4 / 1))))))))
                        :arg3 (m4 / more))))
      :snt3 (a2 / and
            :op2 (k / know-01
                  :arg0 (p4 / person
                        :mod (o / old)
                        :arg0-of (h3 / have-org-role-91
                              :arg2 (m5 / mathematics)))
                  :arg1 (p5 / possible-01
                        :arg1 (w3 / work-01
                              :arg1 s7))
                  :mod (e2 / even))))"
B.373	"(m / multi-sentence
      :snt1 (a / appreciate-02
            :arg1 (o / or
                  :op1 (h / hint-01)
                  :op2 (s / solve-01)
                  :mod (a2 / any))
            :degree (g / great))
      :snt2 (t / think-01
            :arg0 (ii / i)
            :arg1 (t2 / thing
                  :arg1-of (a3 / argue-01)
                  :arg1-of (s2 / standard-02)
                  :example (l / let-01
                        :arg1 (e / equal-01
                              :arg1 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(O1 / root :op0(V1 / 𝑛) :op1(N1 / 2)) :op0(O2 / divide :op0(V2 / 𝑎) :op1(V3 / 𝑏))))
                              :arg2 (s4 / string-entity
                                    :value MATH 
 :math (U2 / eq :op0(U3 / times :op0(V4 / 𝑔) :op0(V5 / 𝑐) :op0(V6 / 𝑑) :op0(O3 / interval$O-O$$ :op0(V7 / 𝑎) :op1(V8 / 𝑏))) :op0(N2 / 1)))))
                  :example (a4 / arrive-01
                        :arg1 (f / factor
                              :arg1-of (s5 / share-01
                                    :arg0 (a5 / and
                                          :op1 (m2 / monetary-quantity
                                                :quant ""a$"")
                                          :op2 (s6 / string-entity
                                                :value MATH 
 :math (V9 / 𝑏))))
                              :arg0-of (c / contradict-01
                                    :arg1 (f2 / fact
                                          :mod (e2 / equal-01
                                                :arg1 s6
                                                :arg2 (s7 / string-entity
                                                      :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V10 / 𝑔) :op0(V11 / 𝑐) :op0(V12 / 𝑑) :op0(O4 / interval$O-O$$ :op0(V13 / 𝑎) :op1(V14 / 𝑏))) :op0(N3 / 1)))))))
                        :arg0-of (c2 / cause-01
                              :arg1 (p / possible-01
                                    :arg1 (a6 / apply-02
                                          :arg0 (w / we)
                                          :arg1 (t3 / this)
                                          :mod (a7 / again
                                                :mod (o2 / over-and-over))))))
                  :manner (a8 / algebra
                        :mod (s8 / some))
                  :time (t4 / then))
            :concession-of (u / understand-01
                  :polarity -
                  :arg0 ii
                  :arg1 (t5 / thing
                        :manner-of (s9 / say-01
                              :arg0 (p2 / problem
                                    :mod (n / next))
                              :arg1 (e3 / explain-01
                                    :arg0 p2
                                    :arg1 (t6 / thing
                                          :arg0-of (c3 / cause-01
                                                :arg1 (f3 / fail-01
                                                      :arg1 (m3 / method
                                                            :mod (t7 / this)))))))))))"
B.374	"(f / find-01
      :arg1 (p / polynomial
            :mod (c / complex
                  :mod (m / monic))
            :mod (a / all)
            :arg2-of (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (U1 / times :op0(V1 / 𝑃) :op0(V2 / 𝑥))))
            :arg2-of (e2 / equal-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (F1 / c :op0(U2 / times :op0(V3 / 𝑃) :op0(V4 / 𝑥)) :op1(U3 / times :op0(V5 / 𝑃) :op0(O1 / SUP :op0(V6 / 𝑥) :op1(N1 / 2))))))))"
B.375	"(m / multi-sentence
      :snt1 (f / find-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (t / thing
                  :arg2-of (s / solve-01
                        :arg1 (s2 / string-entity
                              :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(O1 / SUP :op0(V1 / 𝑥) :op1(N1 / 2)) :op0(N2 / 7)) :op0(O2 / SUP :op0(N3 / 2) :op1(V2 / 𝑛)))))
                  :mod (a / all)
                  :mod (ii / integer)))
      :snt2 (c / contrast-01
            :arg1 (d / do-02
                  :arg0 (ii2 / i)
                  :arg1 (c2 / case-04
                        :arg1 (ii3 / integer
                              :mod (e / even)
                              :domain (v / variable
                                    :name (n / name
                                          :op1 ""n"")))))
            :arg2 (l / lose-02
                  :arg1 ii2
                  :degree (l2 / little)
                  :time (n2 / now))))"
B.376	"(m / multi-sentence
      :snt1 (s / string-entity
            :value MATH 
 :math (O1 / limit :op0(O2 / SUB :op0(O3 / limit) :op1(F1 / → :op0(V1 / 𝑛) :op1(C1 / infinity))) :op1(O4 / divide :op0(U1 / plus :op0(O5 / root :op0(N1 / 1) :op1(N2 / 2)) :op0(O6 / root :op0(N3 / 2) :op1(N4 / 2)) :op0(O7 / root :op0(N5 / 3) :op1(N6 / 2)) :op0(V2 / …) :op0(O8 / root :op0(V3 / 𝑛) :op1(N7 / 2))) :op1(U2 / times :op0(V4 / 𝑛) :op0(O9 / root :op0(V5 / 𝑛) :op1(N8 / 2))))))
      :snt2 (h / have-trouble-04
            :arg0 (ii / i)
            :arg1 (d / do-02
                  :arg0 ii
                  :arg1 (p / problem
                        :mod (t / this))))
      :snt3 (c / contrast-01
            :arg1 (a / attempt-01
                  :arg0 (ii2 / i)
                  :arg1 (t2 / take-01
                        :arg0 ii2
                        :arg1 (t3 / thing
                              :name (n / name
                                    :op1 ""riemann""
                                    :op2 ""sum""))))
            :arg2 (p2 / possible-01
                  :polarity -
                  :arg1 (g / get-05
                        :arg1 ii2
                        :arg2 (p3 / pass-by-17
                              :arg0 ii2
                              :arg1 (r / root-of
                                    :op1 2
                                    :op2 3))))))"
B.377	"(a / amr-unknown
      :domain (s / string-entity
            :value MATH 
 :math (O1 / minus :op0(O2 / SUP :op0(V1 / ℝ) :op1(U1 / plus :op0(V2 / 𝑛) :op0(N1 / 1))) :op1(O3 / SUP :op0(V3 / ℝ) :op1(V4 / 𝑛)))))"
B.378	"(e / equal-01
      :polarity -
      :arg1 (s / string-entity
            :value MATH 
 :math (O1 / SUP :op0(O2 / minus :op0(N1 / 3)) :op1(O3 / divide :op0(N2 / 2) :op1(N3 / 2))))
      :arg2 (s2 / string-entity
            :value MATH 
 :math (O4 / root :op0(O5 / SUP :op0(O6 / minus :op0(N4 / 3)) :op1(N5 / 2)) :op1(N6 / 2)))
      :polarity (a / amr-unknown))"
B.379	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg0 (ii / isomorphic
                  :domain (s / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(V1 / 𝑓) :op1(N1 / 2))))
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (U1 / and :op0(U2 / eq :op0(U3 / times :op0(O2 / SUB :op0(V2 / 𝑓) :op1(N2 / 2)) :op0(V3 / 𝑦)) :op0(V4 / 𝑧)) :op0(O3 / in :op0(V5 / 𝐺)))))
      :snt2 (c2 / cause-01
            :arg0 (a / amr-unknown
                  :domain (s3 / string-entity
                        :value MATH 
 :math (U4 / and :op0(U5 / eq :op0(U6 / times :op0(O4 / SUB :op0(V6 / 𝑓) :op1(N3 / 1)) :op0(U7 / times :op0(O5 / SUB :op0(V7 / 𝑓) :op1(N4 / 2)) :op0(V8 / 𝑥))) :op0(U8 / times :op0(O6 / SUB :op0(V9 / 𝑓) :op1(N5 / 1)) :op0(V10 / 𝑦))) :op0(U9 / eq :op0(V11 / 𝑧)) :op0(U10 / eq :op0(U11 / times :op0(O7 / compose :op0(O8 / SUB :op0(V12 / 𝑓) :op1(N6 / 1)) :op1(O9 / SUB :op0(V13 / 𝑓) :op1(N7 / 2))) :op0(V14 / 𝑥))))))
            :arg1 (s4 / string-entity
                  :value MATH 
 :math (U12 / and :op0(O10 / in :op0(M1 / L-2 :op0(O11 / SUB :op0(V15 / 𝑓) :op1(N8 / 1)) :op1(O12 / SUB :op0(V16 / 𝑓) :op1(N9 / 2))) :op1(V17 / 𝑆)) :op0(F1 / ⟶ :op0(O13 / compose :op0(O14 / SUB :op0(V18 / 𝑓) :op1(N10 / 1)) :op1(O15 / SUB :op0(V19 / 𝑓) :op1(N11 / 2)))) :op0(O16 / in :op0(V20 / 𝑆)))))
      :snt3 (p / possible-01
            :arg1 (s5 / show-01
                  :arg0 (o / one)
                  :arg1 (ii2 / isomorphic
                        :domain (s6 / string-entity
                              :value MATH 
 :math (F2 / ⟶ :op0(W1 / ) :op1(O17 / exists :op0(O18 / SUP :op0(V21 / 𝑓) :op1(O19 / minus :op0(N12 / 1))))))
                        :mod (a2 / also)
                        :arg1-of (m2 / mean-01
                              :arg2 (s7 / string-entity
                                    :value MATH 
 :math (U13 / and :op0(F3 / ⟶ :op0(W2 / ) :op1(O20 / SUP :op0(V22 / 𝑓) :op1(O21 / minus :op0(N13 / 1)))) :op0(O22 / in :op0(V23 / 𝑆))))))))
      :snt4 (a3 / and
            :op1 (a4 / amr-unknown
                  :domain (s8 / string-entity
                        :value MATH 
 :math (U14 / times :op0(V24 / 𝑖) :op0(V25 / 𝑑))))
            :op2 (ii3 / isomorphic
                  :domain (s9 / string-entity
                        :value MATH 
 :math (U15 / and :op0(F4 / ⟶ :op0(W3 / ) :op1(U16 / times :op0(V26 / 𝑖) :op0(V27 / 𝑑))) :op0(O23 / in :op0(V28 / 𝑆)))))
            :li ""iii""
            :domain (s10 / string-entity
                  :value MATH 
 :math (V29 / 𝑓))))"
B.380	"(a / admit-02
      :arg0 (t / thing
            :name (n / name
                  :op1 MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑓) :op0(V2 / 𝑥)) :op0(N1 / 0))
                  :op2 ""eqx""))
      :arg1 (t2 / thing
            :quant 2
            :arg2-of (s / solve-01))
      :condition (t3 / thing
            :name (n2 / name
                  :op1 MATH 
 :math (U3 / and :op0(U4 / eq :op0(O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / int) :op1(N2 / 0)) :op1(V3 / 𝜋)) :op1(U5 / times :op0(V4 / 𝑓) :op0(V5 / 𝑡) :op0(F1 / sin :op0(V6 / 𝑡)) :op0(F2 / d :op0(V7 / 𝑡)))) :op0(O5 / SUB :op0(O6 / SUP :op0(O7 / SUB :op0(O8 / int) :op1(N3 / 0)) :op1(V8 / 𝜋)) :op1(U6 / times :op0(V9 / 𝑓) :op0(V10 / 𝑡) :op0(F3 / cos :op0(V11 / 𝑡)) :op0(F4 / d :op0(V12 / 𝑡))))) :op0(U7 / eq :op0(N4 / 0)))
                  :op2 ""eqx"")))"
B.381	"(p / possible-01
      :arg1 (c / count-01
            :arg1 (s / string-entity
                  :value MATH 
 :math (U1 / times :op0(O1 / SUB :op0(V1 / 𝐴) :op1(N1 / 1)) :op0(V2 / …) :op0(O2 / SUB :op0(V3 / 𝐴) :op1(V4 / 𝑛)))))
      :condition (p2 / possible-01
            :arg1 (c2 / count-01
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (M1 / L-3 :op0(O3 / SUB :op0(V5 / 𝐴) :op1(N2 / 1)) :op1(V6 / …) :op2(O4 / SUB :op0(V7 / 𝐴) :op1(V8 / 𝑛)))))))"
B.382	"(p / possible-01
      :arg1 (c / count-01
            :arg1 (s / set
                  :consist-of (f / function-01
                        :arg3 (e / equal-01
                              :arg2 (e2 / equal-01
                                    :arg2 (s2 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝑆) :op0(V2 / 𝑆)) :op0(M1 / S-4 :op0(O1 / SUB :op0(V3 / 𝐴) :op1(N1 / 1)) :op1(O2 / SUB :op0(V4 / 𝐴) :op1(N2 / 2)) :op2(O3 / SUB :op0(V5 / 𝐴) :op1(N3 / 3)) :op3(V6 / …))))))
                        :arg4 (e3 / equal-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (M2 / S-2 :op0(V7 / 𝐓) :op1(V8 / 𝐅))))))))"
B.383	"(m / multi-sentence
      :snt1 (l / look-01
            :arg0 (ii / i)
            :arg1 (p / prove-01
                  :arg1 (m2 / map-01
                        :arg0 (s / string-entity
                              :value MATH 
 :math (O1 / assign :op0(U1 / times :op0(O2 / SUB :op0(V1 / 𝑓) :op1(V2 / 𝑎)) :op0(V3 / 𝑧)) :op1(O3 / divide :op0(O4 / minus :op0(V4 / 𝑧) :op1(V5 / 𝑎)) :op1(O5 / minus :op0(N1 / 1) :op1(U2 / times :op0(F1 / ¯ :op0(V6 / 𝑎)) :op0(V7 / 𝑧))))))
                        :arg1 (d / disk
                              :mod (u / unit)
                              :arg2-of m2)
                        :time (s2 / string-entity
                              :value MATH 
 :math (O6 / lt :op0(F2 / abs :op0(V8 / 𝑎)) :op1(N2 / 1))))
                  :mod (e / elementary)
                  :manner (r / resort-01
                        :polarity -
                        :arg1 (p2 / principle
                              :mod (m3 / maximum))))
            :purpose (p3 / pedagogical))
      :snt2 (t / thing
            :arg1-of (a / argue-01)
            :mod (u2 / usual
                  :mod (a2 / at-least))
            :domain (a3 / and
                  :op1 l
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (U3 / times :op0(O7 / SUB :op0(V9 / 𝑓) :op1(V10 / 𝑎)) :op0(O8 / SUP :op0(V11 / 𝑒) :op1(U4 / times :op0(V12 / 𝑖) :op0(V13 / 𝑡))))))
            :op2 (c / check-01
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (U5 / eq :op0(F3 / abs :op0(U6 / times :op0(O9 / SUB :op0(V14 / 𝑓) :op1(V15 / 𝑎)) :op0(O10 / SUP :op0(V16 / 𝑒) :op1(U7 / times :op0(V17 / 𝑖) :op0(V18 / 𝑡))))) :op0(N3 / 1))))))"
B.384	"(m / multi-sentence
      :snt1 (a / and
            :op1 (t / take-01
                  :arg0 (ii / i)
                  :arg1 (t2 / thing
                        :name (n / name
                              :op1 ""mit6.006""))
                  :time (c / current))
            :op2 (c2 / come-across-21
                  :arg0 ii
                  :arg1 (p / problem
                        :mod (t3 / this))
                  :location (s / set
                        :mod p)))
      :snt2 (a2 / and
            :op1 (s2 / see-01
                  :polarity -
                  :arg0 (ii2 / i)
                  :arg1 (n2 / notation
                        :mod (s3 / such))
                  :time (e / ever)
                  :concession (l / learn-01
                        :arg0 ii2
                        :arg1 (m2 / mathematics
                              :mod (v / variable
                                    :name (n3 / name
                                          :op1 ""discrete"")))
                        :time (b / before)))
            :op2 (l2 / like-02
                  :arg0 ii2
                  :arg1 (k / know-01
                        :arg0 ii2
                        :arg1 (a3 / and
                              :op1 (t4 / thing
                                    :arg2-of (m3 / mean-01
                                          :arg1 n2))
                              :op2 (t5 / thing
                                    :manner-of (w / work-09
                                          :arg0 n2))))))
      :snt3 (t6 / thank-01
            :arg0 (ii3 / i)
            :arg1 (y / you)
            :arg1-of m3
            :arg2 (s4 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(O1 / SUB :op0(V1 / 𝑓) :op1(N1 / 3)) :op0(V2 / 𝑛)) :op0(O2 / binomial :op0(V3 / 𝑛) :op1(N2 / 2)))
                  :arg1-of (t7 / transcribe-01
                        :arg2 (t8 / thing
                              :arg1-of (s5 / screenshot-01))))))"
B.385	"(m / multi-sentence
      :snt1 (w / want-01
            :arg0 (ii / i)
            :arg1 (a / ask-01
                  :arg0 ii
                  :arg1 (t / truth-value
                        :polarity-of (p / possible-01
                              :arg1 (p2 / prove-01
                                    :arg0 (w2 / we)
                                    :arg1 (d / divide-02
                                          :polarity -
                                          :arg0 (e / element
                                                :mod (d2 / degree
                                                      :arg1-of (h / have-degree-91
                                                            :arg2 (l / large)
                                                            :arg3 (m2 / more))))
                                          :arg1 (e2 / element
                                                :mod (d3 / degree
                                                      :arg1-of (h2 / have-degree-91
                                                            :arg2 (s / small)
                                                            :arg3 (m3 / more))))
                                          :arg2 e2
                                          :time (e3 / ever))
                                    :manner (u / use-01
                                          :arg0 w2
                                          :arg1 (d4 / define-01
                                                :mod (t2 / this)
                                                :mod (j / just))))))
                  :time (n / now))
            :snt2 (p3 / possible-01
                  :arg1 (s2 / say-01
                        :arg0 (w3 / we)
                        :arg1 (a2 / and
                              :op1 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(V1 / 𝜎) :op0(V2 / 𝑎)) :op0(F1 / abs :op0(V3 / 𝑎))))
                              :op2 (s4 / string-entity
                                    :value MATH 
 :math (U3 / eq :op0(U4 / times :op0(V4 / 𝜎) :op0(U5 / times :op0(V5 / 𝑎) :op0(V6 / 𝑏))) :op0(U6 / times :op0(V7 / 𝜎) :op0(V8 / 𝑎) :op0(V9 / 𝜎) :op0(V10 / 𝑏))))
                              :op3 (p4 / polynomial
                                    :li ""ii""))
                        :location (r / ring
                              :arg1-of (s5 / specific-02)
                              :example (e4 / element
                                    :mod (ii2 / individual))))
                  :arg1-of (c / cause-01
                        :arg0 (p5 / possible-01
                              :polarity -
                              :arg1 (d5 / divide-02
                                    :arg0 (e5 / element
                                          :arg1-of (h3 / have-degree-91
                                                :arg2 (s6 / small)
                                                :arg3 (m4 / more)))
                                    :arg1 (e6 / element))))
                  :snt3 (c2 / case-04
                        :arg1 (o / or
                              :op1 (g / great
                                    :domain (s7 / size
                                          :poss (p6 / product-of
                                                :op1 e6
                                                :quant 2))))
                        :op2 (e7 / equal-01
                              :arg1 s7
                              :arg2 s7)
                        :time (a3 / always))
                  :location (a4 / above))))"
B.386	"(p / prove-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (e / equal-01
            :arg2 911))"
B.387	"(m / multi-sentence
      :snt1 (l / let-01
            :arg1 (e / equal-01
                  :arg2 (s / string-entity
                        :value MATH 
 :math (O1 / in :op0(V1 / 𝑛) :op1(O2 / SUP :op0(V2 / ℤ) :op1(U1 / plus))))))
      :snt2 (e2 / exist-01
            :arg1 (s2 / string-entity
                  :value MATH 
 :math (O3 / in :op0(V3 / 𝑘) :op1(O4 / SUP :op0(O5 / SUB :op0(V4 / ℤ) :op1(N1 / 0)) :op1(U2 / plus)))
                  :arg0-of (c / cause-01
                        :arg1 (e3 / equal-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (O6 / form-seq :op0(U3 / eq :op0(V5 / 𝑛) :op0(U4 / plus :op0(U5 / times :op0(N2 / 5) :op0(V6 / 𝑘)) :op0(V7 / 𝑖))) :op1(O7 / in :op0(V8 / 𝑖) :op1(M1 / S-5 :op0(N3 / 0) :op1(N4 / 1) :op2(N5 / 2) :op3(N6 / 3) :op4(N7 / 4))))))))
            :snt3 (h / have-03
                  :arg0 (w / we)
                  :time (a / analyze-01
                        :arg0 w
                        :manner (c2 / case-03)
                        :time (n / now)))))"
B.388	"(a / and
      :op2 (c / cause-01
            :arg0 (s / switch-01
                  :arg0 (ii / i)
                  :arg1 (s2 / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(V1 / 𝑅) :op1(N1 / 2)))
                  :arg2 (s3 / string-entity
                        :value MATH 
 :math (O2 / SUB :op0(V2 / 𝑅) :op1(N2 / 3)))
                  :time (t / then))
            :arg1 (h / have-03
                  :arg0 ii
                  :arg1 (s4 / string-entity
                        :value MATH 
 :math (M1 / D-lsqb;&rsqb; :op0(M2 / M-3x4 :op0(M3 / R :op0(N3 / 1) :op1(N4 / 10) :op2(O3 / minus :op0(N5 / 6)) :op3(N6 / 1)) :op1(M4 / R :op0(N7 / 1) :op1(V3 / 𝑘) :op2(O4 / minus :op0(N8 / 1)) :op3(N9 / 2)) :op2(M5 / R :op0(N10 / 2) :op1(O5 / minus :op0(N11 / 1)) :op2(V4 / 𝑘) :op3(N12 / 5)))))
                  :arg1-of (c2 / contrast-01
                        :arg2 (a2 / and
                              :op1 (s5 / stick-01
                                    :arg1 ii
                                    :time (t2 / then))
                              :op2 (k / know-01
                                    :polarity -
                                    :arg0 ii
                                    :arg1 (t3 / thing
                                          :manner-of (g / get-05
                                                :arg1 ii
                                                :arg2 (f / further
                                                      :mod (a3 / any))))))))))"
B.389	"(m / multi-sentence
      :snt1 (a / and
            :op1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (f / find-01
                        :arg0 ii
                        :arg1 (f2 / formula
                              :arg1-of (g / general-02
                                    :arg1 (s / series)))))
            :op2 (c / constant
                  :domain (s2 / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(O2 / SUP :op0(O3 / SUB :op0(O4 / sum) :op1(U1 / eq :op0(V1 / 𝑖) :op0(N1 / 1))) :op1(V2 / 𝑁)) :op1(O5 / divide :op0(V3 / 𝑖) :op1(O6 / SUP :op0(U2 / plus :op0(N2 / 1) :op0(V4 / 𝑟)) :op1(V5 / 𝑖)))))))
      :snt2 (d / deduce-01
            :arg0 (ii2 / i)
            :arg1 (f3 / formula
                  :arg1-of g)
            :mod (s3 / sum))
      :snt3 (s4 / string-entity
            :value MATH 
 :math (O7 / divide :op0(O8 / minus :op0(O9 / SUP :op0(U3 / plus :op0(N3 / 1) :op0(V6 / 𝑟)) :op1(U4 / plus :op0(V7 / 𝑁) :op0(N4 / 1))) :op1(U5 / plus :op0(N5 / 1) :op0(V8 / 𝑟)) :op2(U6 / times :op0(V9 / 𝑟) :op0(V10 / 𝑁))) :op1(U7 / times :op0(O10 / SUP :op0(V11 / 𝑟) :op1(N6 / 2)) :op0(O11 / SUP :op0(U8 / plus :op0(N7 / 1) :op0(V12 / 𝑟)) :op1(V13 / 𝑁))))
            :polarity (a2 / amr-unknown))
      :snt4 (p / possible-01
            :arg1 (e / explain-01
                  :arg0 (s5 / someone)
                  :arg1 (t2 / thing
                        :manner-of (d2 / deal-01
                              :arg0 s5
                              :arg2 (ii3 / it))))
            :polarity (a3 / amr-unknown)
            :time (l / large
                  :domain (v / variable
                        :name (n / name
                              :op1 ""n""))
                  :degree (v2 / very))))"
B.390	"(m / multi-sentence
      :snt1 (d / define-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s / sequence
                  :arg1-of (n / new-01)
                  :mod (s2 / string-entity
                        :value MATH 
 :math (O1 / SUB :op0(O2 / SUB :op0(V1 / 𝑡) :op1(V2 / 𝑛) :op1(O3 / in :op0(V3 / 𝑛) :op1(V4 / ℕ))))))
            :arg2 (s3 / sequence
                  :mod (s4 / string-entity
                        :value MATH 
 :math (O4 / assign :op0(O5 / SUB :op0(V5 / 𝑡) :op1(V6 / 𝑛)) :op1(O6 / divide :op0(U1 / plus :op0(O7 / SUB :op0(V7 / 𝑥) :op1(N1 / 1)) :op0(O8 / SUB :op0(V8 / 𝑥) :op1(N2 / 2)) :op0(V9 / …) :op0(O9 / SUB :op0(V10 / 𝑥) :op1(V11 / 𝑛))) :op1(V12 / 𝑛))))))
      :snt2 (p / possible-01
            :arg1 (s5 / show-01
                  :arg0 (ii / i)
                  :arg1 (s6 / string-entity
                        :value MATH 
 :math (U2 / eq :op0(O10 / limit :op0(O11 / SUB :op0(O12 / limit) :op1(F1 / → :op0(V13 / 𝑡) :op1(C1 / infinity))) :op1(O13 / SUB :op0(V14 / 𝑥) :op1(V15 / 𝑛))) :op0(V16 / 𝜔)))
                  :condition (s7 / string-entity
                        :value MATH 
 :math (U3 / eq :op0(O14 / limit :op0(O15 / SUB :op0(O16 / limit) :op1(F2 / → :op0(V17 / 𝑛) :op1(C2 / infinity))) :op1(O17 / SUB :op0(V18 / 𝑡) :op1(V19 / 𝑛))) :op0(V20 / 𝜔)))
                  :manner (a / amr-unknown))))"
B.391	"(s / show-01
      :mode imperative
      :arg0 (y / you)
      :arg1 (c / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (u / use-01
                        :arg0 ii
                        :arg1 (e / equal-01
                              :polarity -
                              :mod (o / other))
                        :arg2 (p / prove-01
                              :arg1 (o2 / one
                                    :mod (t2 / this)))))
            :arg2 (s2 / stick-01
                  :arg1 ii
                  :mod (s3 / still)
                  :topic (c2 / case-04
                        :arg1 (e2 / equal-01
                              :arg1 (s4 / string-entity
                                    :value MATH 
 :math (O1 / gt :op0(V1 / 𝑟) :op1(N1 / 0)))))))
      :condition (e3 / equal-01
            :arg1 (s5 / string-entity
                  :value MATH 
 :math (O2 / leq :op0(U1 / times :op0(V2 / 𝔼) :op0(O3 / SUP :op0(F1 / abs :op0(U2 / plus :op0(V3 / 𝑋) :op0(V4 / 𝑌))) :op1(V5 / 𝑟))) :op1(U3 / times :op0(O4 / SUB :op0(V6 / 𝑐) :op1(V7 / 𝑟)) :op0(U4 / plus :op0(U5 / times :op0(V8 / 𝔼) :op0(O5 / SUP :op0(F2 / abs :op0(V9 / 𝑋)) :op1(V10 / 𝑟))) :op0(U6 / times :op0(V11 / 𝔼) :op0(O6 / SUP :op0(F3 / abs :op0(V12 / 𝑌)) :op1(V13 / 𝑟)))))))
            :arg2 (c3 / constant
                  :arg1-of (g / give-01
                        :arg0 (s6 / string-entity
                              :value MATH 
 :math (W1 / ))))
            :mod (e4 / each)))"
B.392	"(m / multi-sentence
      :snt1 (c / cause-01
            :arg0 (w / work-01
                  :arg0 (ii / i)
                  :arg1 (p / polynomial
                        :mod (r / ring
                              :mod (s / string-entity
                                    :value MATH 
 :math (O1 / divide :op0(U1 / times :op0(V1 / ℤ) :op0(M1 / D-lsqb;&rsqb; :op0(V2 / 𝑋))) :op1(O2 / minus :op0(O3 / SUP :op0(V3 / 𝑋) :op1(V4 / 𝑛)) :op1(N1 / 1)))))))
            :arg1 (a / and
                  :op1 (a2 / allow-01
                        :arg1 (p2 / polynomial
                              :mod (d / degree
                                    :mod (a3 / at-most
                                          :op1 (s2 / string-entity
                                                :value MATH 
 :math (O4 / minus :op0(V5 / 𝑛) :op1(N2 / 1)))))
                              :mod (o / only)))
                  :op2 (o2 / obligate-01
                        :arg2 (r2 / reduce-01
                              :arg1 (m2 / multiply-01)
                              :manner (m3 / modulo
                                    :op1 (s3 / string-entity
                                          :value MATH 
 :math (O5 / minus :op0(O6 / SUP :op0(V6 / 𝑋) :op1(V7 / 𝑛)) :op1(N3 / 1))))))))
      :snt2 (a4 / and
            :op1 (h / have-03
                  :arg0 (ii2 / i)
                  :arg1 (p3 / polynomial
                        :mod (s4 / string-entity
                              :value MATH 
 :math (U2 / times :op0(V8 / 𝑓) :op0(V9 / 𝑋)))))
            :op2 (w2 / want-01
                  :arg0 ii2
                  :arg1 (c2 / compute-01
                        :arg0 ii2
                        :arg1 (ii3 / inverse
                              :poss p3)
                        :manner (m4 / modulo
                              :op1 (a5 / and
                                    :op1 (s5 / string-entity
                                          :value MATH 
 :math (V10 / 𝑝))
                                    :op2 (s6 / string-entity
                                          :value MATH 
 :math (U3 / times :op0(O7 / SUB :op0(V11 / 𝑓) :op1(V12 / 𝑝)) :op0(V13 / 𝑋))))
                              :arg0-of c
                              :arg1 (e / equal-01
                                    :arg2 (s7 / string-entity
                                          :value MATH 
 :math (U4 / equivalent :op0(U5 / times :op0(V14 / 𝑓) :op0(O8 / SUB :op0(V15 / 𝑓) :op1(V16 / 𝑝))) :op0(O9 / rem :op0(N4 / 1) :op1(V17 / 𝑝)))))))))
      :snt3 (p4 / possible-01
            :arg1 (d2 / do-02
                  :arg0 (ii4 / i)
                  :arg1 (t / that)
                  :manner (a6 / amr-unknown)))
      :snt4 (a7 / algorithm
            :polarity a6)
      :arg1-of (k / know-01))"
B.393	"(m / multi-sentence
      :snt1 (f / function
            :domain (s / string-entity
                  :value ""f"")
            :mod (e / entire))
      :snt2 (s2 / suppose-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s3 / string-entity
                  :value MATH 
 :math (O1 / leq :op0(F1 / abs :op0(U1 / times :op0(V1 / 𝑓) :op0(O2 / SUP :op0(V2 / 𝑧) :op1(N1 / 2)))) :op1(U2 / times :op0(N2 / 2) :op0(F2 / abs :op0(U3 / times :op0(V3 / 𝑓) :op0(V4 / 𝑧)))))
                  :prep-for (v / variable
                        :name (n / name
                              :op1 ""c"")
                        :mod (a / all))
                  :mod (c / constant)))
      :snt3 (c2 / contrast-01
            :arg1 (t / try-01
                  :arg0 (ii / i)
                  :arg1 (u / use-01
                        :arg0 ii
                        :arg1 (t2 / theorem
                              :mod (p / person
                                    :name (n2 / name
                                          :op1 ""liouville"")))))
            :arg2 (s4 / seem-01
                  :arg1 (h / helpful-04
                        :polarity -
                        :arg0 t2))))"
B.394	"(m / multi-sentence
      :snt1 (a / and
            :op1 (s / show-01
                  :arg0 (ii / i)
                  :arg1 (d / discontinuous
                        :domain (ii2 / it)
                        :beneficiary (r / rational
                              :mod (a2 / all))))
            :op2 (b / believe-01
                  :arg0 ii
                  :arg1 (o / obligate-01
                        :arg1 ii
                        :arg2 (o2 / or
                              :op1 (u / use-01
                                    :arg0 ii
                                    :arg1 (d2 / define-01
                                          :arg1 (c / continuity)
                                          :arg2 (s2 / string-entity
                                                :value MATH 
 :math (O1 / minus :op0(V1 / italic-ϵ) :op1(V2 / 𝛿)))))
                              :op2 (u2 / use-01
                                    :arg0 ii
                                    :arg1 (c2 / continuity
                                          :mod (s3 / sequential))
                                    :arg2 (s4 / show-01
                                          :arg0 ii
                                          :arg1 (c3 / continue-01
                                                :arg1 (f / function-01))))))))
      :snt2 (a3 / and
            :op1 (s5 / split-01
                  :arg0 (ii3 / i)
                  :arg1 (a4 / attempt-01
                        :arg0 ii3)
                  :arg2 (c4 / case-04
                        :quant 2
                        :arg1 (r2 / rational
                              :polarity -
                              :arg1 (v / value-01
                                    :arg0 (w / we)
                                    :arg1 (s6 / string-entity
                                          :value MATH 
 :math (V3 / 𝑥)))))
                  :op2 (w2 / want-01
                        :arg0 ii3
                        :arg1 (r3 / rational
                              :polarity -
                              :domain (u3 / use-01
                                    :arg0 ii3
                                    :arg1 (s7 / string-entity
                                          :value MATH 
 :math (O2 / form-seq :op0(O3 / gt :op0(O4 / forall :op0(V4 / italic-ϵ)) :op1(N1 / 0)) :op1(O5 / form-seq :op0(O6 / gt :op0(O7 / exists :op0(V5 / 𝛿)) :op1(N2 / 0)) :op1(U1 / and :op0(O8 / lt :op0(F1 / abs :op0(O9 / minus :op0(V6 / 𝑥) :op1(V7 / 𝑎))) :op1(V8 / 𝛿)) :op0(O10 / implies :op0(F2 / abs :op0(O11 / minus :op0(U2 / times :op0(V9 / 𝑓) :op0(V10 / 𝑥)) :op1(U3 / times :op0(V11 / 𝑓) :op0(V12 / 𝑎))))) :op0(O12 / lt :op0(V13 / italic-ϵ)))))))
                              :location (h / here))))
            :snt3 (r4 / rational
                  :polarity -
                  :domain (u4 / use-01
                        :arg0 (ii4 / i)
                        :arg1 (s8 / string-entity
                              :value MATH 
 :math (U4 / eq :op0(U5 / times :op0(V14 / 𝑓) :op0(V15 / 𝑥)) :op0(N3 / 0)))))))"
B.395	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (e / equal-01
                  :arg1 (s / string-entity
                        :value MATH 
 :math (F1 / $##$ :op0(V1 / 𝑓) :op1(F2 / → :op0(V2 / 𝑉) :op1(V3 / 𝑊))))
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (V4 / 𝐾)))
            :arg2 (e2 / equal-01
                  :arg1 (s3 / string-entity
                        :value MATH 
 :math (O1 / in :op0(M1 / L-2 :op0(V5 / 𝑎) :op1(V6 / 𝑏)) :op1(V7 / 𝑉)))
                  :arg2 (s4 / string-entity
                        :value MATH 
 :math (O2 / in :op0(V8 / 𝑘) :op1(V9 / 𝐾)))))
      :snt2 (g / glad-02
            :arg0 (h / have-03
                  :arg0 (ii / i)
                  :arg1 (a / and
                        :op1 (e3 / example
                              :quant (s5 / some)
                              :arg1-of (e4 / easy-05))
                        :op2 (ii2 / intuition
                              :topic (t / thing
                                    :arg0-of (c2 / cause-01
                                          :arg1 (o / obligate-01
                                                :arg1 (w / we)
                                                :arg2 (c3 / check-01
                                                      :arg0 w
                                                      :arg1 (c4 / condition
                                                            :mod (b / both))))))))))
      :snt3 (h2 / have-03
            :arg0 ii
            :arg1 (u / understand-01
                  :arg0 ii
                  :arg1 (l / linear
                        :domain (f / function-01)
                        :condition (k / keep-01
                              :arg1 (s6 / structure)
                              :time (p / project-01
                                    :arg1 s6
                                    :arg2 (s7 / string-entity
                                          :value MATH 
 :math (V10 / 𝑓)))))
                  :mod (v / visual))
            :arg1-of (c5 / cause-01
                  :arg0 (a2 / amr-unknown))))"
B.396	"(m / multi-sentence
      :snt1 (h / have-03
            :arg0 (ii / i)
            :arg1 (b / be-from-91
                  :arg1 (s / string-entity
                        :value MATH 
 :math (M1 / L-4 :op0(O1 / SUB :op0(V1 / 𝑥) :op1(N1 / 1)) :op1(O2 / SUB :op0(V2 / 𝑥) :op1(N2 / 2)) :op2(V3 / …) :op3(O3 / SUB :op0(V4 / 𝑥) :op1(V5 / 𝑛))))
                  :arg2 (s2 / string-entity
                        :value MATH 
 :math (V6 / 𝑋)
                        :arg0-of (h2 / have-03
                              :arg1 (f / function
                                    :mod (d / density)
                                    :mod (s3 / string-entity
                                          :value MATH 
 :math (U1 / eq :op0(U2 / times :op0(O4 / SUB :op0(V7 / 𝑓) :op1(V8 / 𝑋)) :op0(V9 / 𝑥)) :op0(O5 / divide :op0(U3 / times :op0(N3 / 2) :op0(V10 / 𝑥)) :op1(O6 / SUP :op0(V11 / 𝜃) :op1(N4 / 2)))))
                                    :beneficiary (a / and
                                          :op1 (s4 / string-entity
                                                :value MATH 
 :math (U4 / and :op0(O7 / leq :op0(N5 / 0) :op1(V12 / 𝑥)) :op0(O8 / leq :op0(V13 / 𝜃))))
                                          :op2 (s5 / string-entity
                                                :value MATH 
 :math (U5 / eq :op0(U6 / times :op0(O9 / SUB :op0(V14 / 𝑓) :op1(V15 / 𝑋)) :op0(V16 / 𝑥)) :op0(N6 / 0))))))))
            :snt2 (c / correct-02
                  :arg1 (t / this)
                  :polarity (a2 / amr-unknown))
            :snt3 (o / obligate-01
                  :arg1 (ii2 / i)
                  :arg2 (d2 / determine-01
                        :arg0 ii2
                        :arg1 (t2 / thing
                              :arg2-of (e / equal-01
                                    :arg1 (e2 / equal-01
                                          :arg1 (s6 / string-entity
                                                :value MATH 
 :math (O10 / SUP :op0(V17 / 𝜃) :op1(U7 / times)))
                                          :arg2 (s7 / string-entity
                                                :value MATH 
 :math (V18 / 𝜃)))))))
            :snt4 (d3 / do-02
                  :arg0 ii2
                  :arg1 (ii3 / it)
                  :manner a2)))"
B.397	"(m / multi-sentence
      :snt1 (c / contrast-01
            :arg1 (t / think-01
                  :arg0 (ii / i)
                  :arg1 (s / see-01
                        :arg0 ii
                        :arg1 (e / everything)))
            :arg2 (s2 / see-01
                  :arg0 ii
                  :arg1 (ii2 / identity
                        :mod (t2 / this)
                        :arg1-of (a / attribute-01
                              :arg2 (p / person
                                    :name (n / name
                                          :op1 ""ramanujan"")))
                        :arg1-of (m2 / mean-01
                              :arg2 (s3 / string-entity
                                    :value MATH 
 :math (U1 / eq :op0(U2 / plus :op0(N1 / 1) :op0(N2 / 2) :op0(N3 / 3) :op0(N4 / 4) :op0(V1 / ⋯)) :op0(O1 / minus :op0(O2 / divide :op0(N5 / 1) :op1(N6 / 12)))))))
                  :time (d / date-entity
                        :dayperiod (n2 / night)
                        :mod (y / yesterday))))
      :snt2 (s4 / see-01
            :arg0 (ii3 / i)
            :arg1 (p2 / prove-01
                  :arg1-of (c2 / correct-02
                        :arg1-of (s5 / seem-01)))
            :time (t3 / then))
      :snt3 (c3 / cause-01
            :arg1 (a2 / and
                  :op1 (b / believe-01
                        :arg0 (ii4 / i)
                        :arg1 (ii5 / it)
                        :mod (a3 / all-right))
                  :op2 (c4 / crazy-03
                        :polarity -
                        :arg1 ii5
                        :mod (h / hey
                              :mode expressive)
                        :arg2-of (h2 / have-degree-91
                              :arg1 ii5
                              :arg3 (m3 / more)
                              :arg4 (h3 / have-03
                                    :arg1 infinity
                                    :arg1-of (s6 / size-01
                                          :arg1-of (d2 / differ-02))))))
            :op3 (h4 / have-03
                  :arg0 ii4
                  :arg1 (c5 / close-01
                        :arg1 (f / fact
                              :mod (t4 / that))
                        :mod (s7 / some))
                  :time (f2 / final))))"
B.398	"(m / multi-sentence
      :snt1 (d / differiable
            :polarity (a / amr-unknown)
            :domain (f / function
                  :arg1-of (c / continue-01))
            :condition (v / value-01
                  :arg1 (l / limit-01
                        :arg1 (d2 / derivative
                              :poss f))
                  :time (p / point
                        :mod (t / that))))
      :snt2 (c2 / contrast-01
            :arg2 (s / seem-01
                  :arg1 (l2 / locate-01
                        :arg0 (ii / i)
                        :arg1 (t2 / theorem
                              :mod (s2 / such)))
                  :arg0-of (c3 / cause-01
                        :arg1 (s3 / suspect-01
                              :arg0 ii
                              :arg1 (w / wrong-04
                                    :arg1 ii
                                    :arg2 (ii2 / intuition))))))
      :snt3 (h / have-condition-91
            :arg1 (t3 / that)
            :arg2 (a2 / and
                  :op1 (a3 / approach-01
                        :arg1 (s4 / slope
                              :poss (t4 / tangent))
                        :arg2 (v2 / value-01
                              :arg1-of (s5 / same-01)))
                  :op2 (p2 / possible-01
                        :polarity -
                        :arg1 (d3 / discontinuity
                              :mod (j / jump-03))
                        :arg0-of (c4 / cause-01
                              :arg1 (a4 / appear-02
                                    :arg1 (r / recommend-01
                                          :arg1 (s6 / slope
                                                :location (p3 / point
                                                      :mod (t5 / that))
                                                :mod (t6 / too)
                                                :mod (s7 / string-entity
                                                      :value MATH 
 :math (V1 / 𝐿)))))))
                  :manner (ii3 / intuitive))))"
B.399	"(m / multi-sentence
      :snt1 (p / prove-01
            :mode imperative
            :arg0 (y / you)
            :arg1 (s / set
                  :arg1-of (c / count-01
                        :arg1-of (p2 / possible-01))
                  :domain (s2 / string-entity
                        :value MATH 
 :math (V1 / 𝐴))))
      :snt2 (f / form
            :mod (s3 / string-entity
                  :value MATH 
 :math (U1 / eq :op0(V2 / 𝑀) :op0(O1 / conditional-set :op0(O2 / in :op0(M1 / L-2 :op0(V3 / 𝑥) :op1(V4 / 𝑦)) :op1(O3 / SUP :op0(V5 / ℝ) :op1(N1 / 2))) :op1(O4 / form-seq :op0(U2 / and :op0(O5 / leq :op0(V6 / 𝑎) :op1(V7 / 𝑥)) :op0(O6 / leq :op0(V8 / 𝑏))) :op1(U3 / and :op0(O7 / leq :op0(V9 / 𝑐) :op1(V10 / 𝑦)) :op0(O8 / leq :op0(V11 / 𝑑))))))
                  :prep-for (s4 / string-entity
                        :value MATH 
 :math (M2 / L-4 :op0(V12 / 𝑎) :op1(V13 / 𝑏) :op2(V14 / 𝑐) :op3(V15 / 𝑑)))
                  :arg0-of (c2 / cause-01
                        :arg1 (a / and
                              :op1 (s5 / string-entity
                                    :value MATH 
 :math (O9 / lt :op0(V16 / 𝑎) :op1(V17 / 𝑏)))
                              :op2 (s6 / string-entity
                                    :value MATH 
 :math (O10 / lt :op0(V18 / 𝑐) :op1(V19 / 𝑑)))))
                  :domain (r / rectangle
                        :arg1-of (a2 / align-01
                              :arg2 (a3 / axis))))
            :snt3 (a4 / attempt-01
                  :arg0 (ii / i)
                  :arg1 (t / try-01
                        :arg0 ii
                        :arg1 (u / use-01
                              :arg0 ii
                              :arg1 (d / density
                                    :poss (s7 / string-entity
                                          :value MATH 
 :math (V20 / ℚ))
                                    :prep-in (s8 / string-entity
                                          :value MATH 
 :math (O11 / interval$O-O$$ :op0(V21 / ℝ) :op1(O12 / leq)))))
                        :concession-of (s9 / succeed-01
                              :polarity -
                              :arg0 ii
                              :mod (a5 / any))))))"
B.400	"(m / multi-sentence
      :snt1 (s / show-01
            :polarity -
            :arg0 (t / thing
                  :name (n / name
                        :op1 ""symbolab"")
                  :mod (e / even))
            :arg1 (s2 / simplify-01
                  :arg1-of (s3 / same-01)))
      :snt2 (u / understand-01
            :polarity -
            :arg0 (ii / i)
            :arg1 (s4 / string-entity
                  :value MATH 
 :math (O1 / SUP :op0(O2 / divide :op0(N1 / 1) :op1(O3 / SUP :op0(N2 / 2) :op1(O4 / minus :op0(V1 / 𝑛) :op1(N3 / 2)) :op1(N4 / 2)))))
            :arg1-of (r / resemble-01
                  :arg2 (t2 / thing
                        :arg1-of (q / question-01)
                        :time (p / previous)))))"
